#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
#import <CoreGraphics/CGGeometry.h>
#import <UIKit/UIGeometry.h>
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_NSData_dataWithContentsOfURL__Class(id rcv, SEL _cmd, id __rollout_var_url);
static id (*_rollout_storage_NSData_dataWithContentsOfURL__Class)(id rcv, SEL _cmd, id __rollout_var_url);
id  _rollout_impl_NSData_dataWithContentsOfURL__Class(id rcv, SEL _cmd, id __rollout_var_url){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_url], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"dataWithContentsOfURL:" forClass:@"NSData"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_NSData_dataWithContentsOfURL__Class(rcv, _cmd, __rollout_var_url);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_NSData_dataWithContentsOfURL__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_NSData_dataWithContentsOfURL__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"dataWithContentsOfURL:" forClass:@"NSData"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"NSData"), @selector(dataWithContentsOfURL:),(IMP) _rollout_impl_NSData_dataWithContentsOfURL__Class, (IMP*)&_rollout_storage_NSData_dataWithContentsOfURL__Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"dataWithContentsOfURL:" forClass:@"NSData"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_NSURLConnection_sendSynchronousRequest_returningResponse_error__Class(id rcv, SEL _cmd, id __rollout_var_request, void* __rollout_var_response, void* __rollout_var_error);
static id (*_rollout_storage_NSURLConnection_sendSynchronousRequest_returningResponse_error__Class)(id rcv, SEL _cmd, id __rollout_var_request, void* __rollout_var_response, void* __rollout_var_error);
id  _rollout_impl_NSURLConnection_sendSynchronousRequest_returningResponse_error__Class(id rcv, SEL _cmd, id __rollout_var_request, void* __rollout_var_response, void* __rollout_var_error){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_request], 
     [[RolloutTypeWrapper alloc] initWithPointer:__rollout_var_response], 
     [[RolloutTypeWrapper alloc] initWithPointer:__rollout_var_error], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"sendSynchronousRequest:returningResponse:error:" forClass:@"NSURLConnection"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_NSURLConnection_sendSynchronousRequest_returningResponse_error__Class(rcv, _cmd, __rollout_var_request, __rollout_var_response, __rollout_var_error);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_NSURLConnection_sendSynchronousRequest_returningResponse_error__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).pointerValue, ((RolloutTypeWrapper*)arguments[2]).pointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_NSURLConnection_sendSynchronousRequest_returningResponse_error__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).pointerValue, ((RolloutTypeWrapper*)arguments[2]).pointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"sendSynchronousRequest:returningResponse:error:" forClass:@"NSURLConnection"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"NSURLConnection"), @selector(sendSynchronousRequest:returningResponse:error:),(IMP) _rollout_impl_NSURLConnection_sendSynchronousRequest_returningResponse_error__Class, (IMP*)&_rollout_storage_NSURLConnection_sendSynchronousRequest_returningResponse_error__Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"sendSynchronousRequest:returningResponse:error:" forClass:@"NSURLConnection"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_NSURLConnection_sendAsynchronousRequest_queue_completionHandler__Class(id rcv, SEL _cmd, id __rollout_var_request, id __rollout_var_queue, id __rollout_var_handler);
static void (*_rollout_storage_NSURLConnection_sendAsynchronousRequest_queue_completionHandler__Class)(id rcv, SEL _cmd, id __rollout_var_request, id __rollout_var_queue, id __rollout_var_handler);
void  _rollout_impl_NSURLConnection_sendAsynchronousRequest_queue_completionHandler__Class(id rcv, SEL _cmd, id __rollout_var_request, id __rollout_var_queue, id __rollout_var_handler){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_request], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_queue], 
     [[RolloutTypeWrapper alloc] initWithBlockPointer:__rollout_var_handler], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"sendAsynchronousRequest:queue:completionHandler:" forClass:@"NSURLConnection"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_NSURLConnection_sendAsynchronousRequest_queue_completionHandler__Class(rcv, _cmd, __rollout_var_request, __rollout_var_queue, __rollout_var_handler); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_NSURLConnection_sendAsynchronousRequest_queue_completionHandler__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).blockPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_NSURLConnection_sendAsynchronousRequest_queue_completionHandler__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).blockPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"sendAsynchronousRequest:queue:completionHandler:" forClass:@"NSURLConnection"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"NSURLConnection"), @selector(sendAsynchronousRequest:queue:completionHandler:),(IMP) _rollout_impl_NSURLConnection_sendAsynchronousRequest_queue_completionHandler__Class, (IMP*)&_rollout_storage_NSURLConnection_sendAsynchronousRequest_queue_completionHandler__Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"sendAsynchronousRequest:queue:completionHandler:" forClass:@"NSURLConnection"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_viewDidLoad_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_RegisterViewController_viewDidLoad_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_RegisterViewController_viewDidLoad_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewDidLoad" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_viewDidLoad_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_viewDidLoad_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_viewDidLoad_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewDidLoad" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(viewDidLoad),(IMP) _rollout_impl_RegisterViewController_viewDidLoad_Instance, (IMP*)&_rollout_storage_RegisterViewController_viewDidLoad_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewDidLoad" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_viewDidAppear__Instance(id rcv, SEL _cmd, signed char __rollout_var_animated);
static void (*_rollout_storage_RegisterViewController_viewDidAppear__Instance)(id rcv, SEL _cmd, signed char __rollout_var_animated);
void  _rollout_impl_RegisterViewController_viewDidAppear__Instance(id rcv, SEL _cmd, signed char __rollout_var_animated){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_animated], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewDidAppear:" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_viewDidAppear__Instance(rcv, _cmd, __rollout_var_animated); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_viewDidAppear__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_viewDidAppear__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewDidAppear:" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(viewDidAppear:),(IMP) _rollout_impl_RegisterViewController_viewDidAppear__Instance, (IMP*)&_rollout_storage_RegisterViewController_viewDidAppear__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewDidAppear:" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_signUpUser__Instance(id rcv, SEL _cmd, id __rollout_var_sender);
static void (*_rollout_storage_RegisterViewController_signUpUser__Instance)(id rcv, SEL _cmd, id __rollout_var_sender);
void  _rollout_impl_RegisterViewController_signUpUser__Instance(id rcv, SEL _cmd, id __rollout_var_sender){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_sender], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"signUpUser:" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_signUpUser__Instance(rcv, _cmd, __rollout_var_sender); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_signUpUser__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_signUpUser__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"signUpUser:" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(signUpUser:),(IMP) _rollout_impl_RegisterViewController_signUpUser__Instance, (IMP*)&_rollout_storage_RegisterViewController_signUpUser__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"signUpUser:" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_checkFieldsComplete_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_RegisterViewController_checkFieldsComplete_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_RegisterViewController_checkFieldsComplete_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"checkFieldsComplete" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_checkFieldsComplete_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_checkFieldsComplete_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_checkFieldsComplete_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"checkFieldsComplete" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(checkFieldsComplete),(IMP) _rollout_impl_RegisterViewController_checkFieldsComplete_Instance, (IMP*)&_rollout_storage_RegisterViewController_checkFieldsComplete_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"checkFieldsComplete" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_dismissKeyboardTxt__Instance(id rcv, SEL _cmd, id __rollout_var_sender);
static void (*_rollout_storage_RegisterViewController_dismissKeyboardTxt__Instance)(id rcv, SEL _cmd, id __rollout_var_sender);
void  _rollout_impl_RegisterViewController_dismissKeyboardTxt__Instance(id rcv, SEL _cmd, id __rollout_var_sender){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_sender], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"dismissKeyboardTxt:" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_dismissKeyboardTxt__Instance(rcv, _cmd, __rollout_var_sender); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_dismissKeyboardTxt__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_dismissKeyboardTxt__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"dismissKeyboardTxt:" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(dismissKeyboardTxt:),(IMP) _rollout_impl_RegisterViewController_dismissKeyboardTxt__Instance, (IMP*)&_rollout_storage_RegisterViewController_dismissKeyboardTxt__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"dismissKeyboardTxt:" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_checkBtn__Instance(id rcv, SEL _cmd, id __rollout_var_sender);
static void (*_rollout_storage_RegisterViewController_checkBtn__Instance)(id rcv, SEL _cmd, id __rollout_var_sender);
void  _rollout_impl_RegisterViewController_checkBtn__Instance(id rcv, SEL _cmd, id __rollout_var_sender){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_sender], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"checkBtn:" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_checkBtn__Instance(rcv, _cmd, __rollout_var_sender); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_checkBtn__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_checkBtn__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"checkBtn:" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(checkBtn:),(IMP) _rollout_impl_RegisterViewController_checkBtn__Instance, (IMP*)&_rollout_storage_RegisterViewController_checkBtn__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"checkBtn:" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_makePrediction_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_RegisterViewController_makePrediction_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_RegisterViewController_makePrediction_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"makePrediction" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_makePrediction_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_makePrediction_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_makePrediction_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"makePrediction" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(makePrediction),(IMP) _rollout_impl_RegisterViewController_makePrediction_Instance, (IMP*)&_rollout_storage_RegisterViewController_makePrediction_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"makePrediction" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_motionBegan_withEvent__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event);
static void (*_rollout_storage_RegisterViewController_motionBegan_withEvent__Instance)(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event);
void  _rollout_impl_RegisterViewController_motionBegan_withEvent__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_motion], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_event], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"motionBegan:withEvent:" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_motionBegan_withEvent__Instance(rcv, _cmd, __rollout_var_motion, __rollout_var_event); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_motionBegan_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_motionBegan_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"motionBegan:withEvent:" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(motionBegan:withEvent:),(IMP) _rollout_impl_RegisterViewController_motionBegan_withEvent__Instance, (IMP*)&_rollout_storage_RegisterViewController_motionBegan_withEvent__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"motionBegan:withEvent:" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_motionEnded_withEvent__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event);
static void (*_rollout_storage_RegisterViewController_motionEnded_withEvent__Instance)(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event);
void  _rollout_impl_RegisterViewController_motionEnded_withEvent__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_motion], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_event], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"motionEnded:withEvent:" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_motionEnded_withEvent__Instance(rcv, _cmd, __rollout_var_motion, __rollout_var_event); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_motionEnded_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_motionEnded_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"motionEnded:withEvent:" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(motionEnded:withEvent:),(IMP) _rollout_impl_RegisterViewController_motionEnded_withEvent__Instance, (IMP*)&_rollout_storage_RegisterViewController_motionEnded_withEvent__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"motionEnded:withEvent:" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_motionCancelled_withEvent__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event);
static void (*_rollout_storage_RegisterViewController_motionCancelled_withEvent__Instance)(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event);
void  _rollout_impl_RegisterViewController_motionCancelled_withEvent__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_motion], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_event], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"motionCancelled:withEvent:" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_motionCancelled_withEvent__Instance(rcv, _cmd, __rollout_var_motion, __rollout_var_event); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_motionCancelled_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_motionCancelled_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"motionCancelled:withEvent:" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(motionCancelled:withEvent:),(IMP) _rollout_impl_RegisterViewController_motionCancelled_withEvent__Instance, (IMP*)&_rollout_storage_RegisterViewController_motionCancelled_withEvent__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"motionCancelled:withEvent:" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_touchesBegan_withEvent__Instance(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event);
static void (*_rollout_storage_RegisterViewController_touchesBegan_withEvent__Instance)(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event);
void  _rollout_impl_RegisterViewController_touchesBegan_withEvent__Instance(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_touches], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_event], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"touchesBegan:withEvent:" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_touchesBegan_withEvent__Instance(rcv, _cmd, __rollout_var_touches, __rollout_var_event); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_touchesBegan_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_touchesBegan_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"touchesBegan:withEvent:" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(touchesBegan:withEvent:),(IMP) _rollout_impl_RegisterViewController_touchesBegan_withEvent__Instance, (IMP*)&_rollout_storage_RegisterViewController_touchesBegan_withEvent__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"touchesBegan:withEvent:" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_touchesEnded_withEvent__Instance(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event);
static void (*_rollout_storage_RegisterViewController_touchesEnded_withEvent__Instance)(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event);
void  _rollout_impl_RegisterViewController_touchesEnded_withEvent__Instance(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_touches], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_event], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"touchesEnded:withEvent:" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_touchesEnded_withEvent__Instance(rcv, _cmd, __rollout_var_touches, __rollout_var_event); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_touchesEnded_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_touchesEnded_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"touchesEnded:withEvent:" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(touchesEnded:withEvent:),(IMP) _rollout_impl_RegisterViewController_touchesEnded_withEvent__Instance, (IMP*)&_rollout_storage_RegisterViewController_touchesEnded_withEvent__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"touchesEnded:withEvent:" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_touchesCancelled_withEvent__Instance(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event);
static void (*_rollout_storage_RegisterViewController_touchesCancelled_withEvent__Instance)(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event);
void  _rollout_impl_RegisterViewController_touchesCancelled_withEvent__Instance(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_touches], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_event], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"touchesCancelled:withEvent:" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_touchesCancelled_withEvent__Instance(rcv, _cmd, __rollout_var_touches, __rollout_var_event); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_touchesCancelled_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_touchesCancelled_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"touchesCancelled:withEvent:" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(touchesCancelled:withEvent:),(IMP) _rollout_impl_RegisterViewController_touchesCancelled_withEvent__Instance, (IMP*)&_rollout_storage_RegisterViewController_touchesCancelled_withEvent__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"touchesCancelled:withEvent:" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_registerNewUser_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_RegisterViewController_registerNewUser_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_RegisterViewController_registerNewUser_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"registerNewUser" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_registerNewUser_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_registerNewUser_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_registerNewUser_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"registerNewUser" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(registerNewUser),(IMP) _rollout_impl_RegisterViewController_registerNewUser_Instance, (IMP*)&_rollout_storage_RegisterViewController_registerNewUser_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"registerNewUser" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_sendmail_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_RegisterViewController_sendmail_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_RegisterViewController_sendmail_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"sendmail" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_sendmail_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_sendmail_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_sendmail_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"sendmail" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(sendmail),(IMP) _rollout_impl_RegisterViewController_sendmail_Instance, (IMP*)&_rollout_storage_RegisterViewController_sendmail_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"sendmail" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_messageComposeViewController_didFinishWithResult__Instance(id rcv, SEL _cmd, id __rollout_var_controller, __rollout_enum __rollout_var_result);
static void (*_rollout_storage_RegisterViewController_messageComposeViewController_didFinishWithResult__Instance)(id rcv, SEL _cmd, id __rollout_var_controller, __rollout_enum __rollout_var_result);
void  _rollout_impl_RegisterViewController_messageComposeViewController_didFinishWithResult__Instance(id rcv, SEL _cmd, id __rollout_var_controller, __rollout_enum __rollout_var_result){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_controller], 
     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_result], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"messageComposeViewController:didFinishWithResult:" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_messageComposeViewController_didFinishWithResult__Instance(rcv, _cmd, __rollout_var_controller, __rollout_var_result); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_messageComposeViewController_didFinishWithResult__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).enumValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_messageComposeViewController_didFinishWithResult__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).enumValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"messageComposeViewController:didFinishWithResult:" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(messageComposeViewController:didFinishWithResult:),(IMP) _rollout_impl_RegisterViewController_messageComposeViewController_didFinishWithResult__Instance, (IMP*)&_rollout_storage_RegisterViewController_messageComposeViewController_didFinishWithResult__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"messageComposeViewController:didFinishWithResult:" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RegisterViewController_mailComposeController_didFinishWithResult_error__Instance(id rcv, SEL _cmd, id __rollout_var_controller, __rollout_enum __rollout_var_result, id __rollout_var_error);
static void (*_rollout_storage_RegisterViewController_mailComposeController_didFinishWithResult_error__Instance)(id rcv, SEL _cmd, id __rollout_var_controller, __rollout_enum __rollout_var_result, id __rollout_var_error);
void  _rollout_impl_RegisterViewController_mailComposeController_didFinishWithResult_error__Instance(id rcv, SEL _cmd, id __rollout_var_controller, __rollout_enum __rollout_var_result, id __rollout_var_error){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_controller], 
     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_result], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_error], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"mailComposeController:didFinishWithResult:error:" forClass:@"RegisterViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RegisterViewController_mailComposeController_didFinishWithResult_error__Instance(rcv, _cmd, __rollout_var_controller, __rollout_var_result, __rollout_var_error); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RegisterViewController_mailComposeController_didFinishWithResult_error__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).enumValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RegisterViewController_mailComposeController_didFinishWithResult_error__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).enumValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"mailComposeController:didFinishWithResult:error:" forClass:@"RegisterViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"RegisterViewController"), @selector(mailComposeController:didFinishWithResult:error:),(IMP) _rollout_impl_RegisterViewController_mailComposeController_didFinishWithResult_error__Instance, (IMP*)&_rollout_storage_RegisterViewController_mailComposeController_didFinishWithResult_error__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"mailComposeController:didFinishWithResult:error:" forClass:@"RegisterViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertViewResponder_init__Instance(id rcv, SEL _cmd, id __rollout_var_alertview);
static id (*_rollout_storage_SCLAlertViewResponder_init__Instance)(id rcv, SEL _cmd, id __rollout_var_alertview);
id  _rollout_impl_SCLAlertViewResponder_init__Instance(id rcv, SEL _cmd, id __rollout_var_alertview){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_alertview], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"init:" forClass:@"SCLAlertViewResponder"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertViewResponder_init__Instance(rcv, _cmd, __rollout_var_alertview);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertViewResponder_init__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertViewResponder_init__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"init:" forClass:@"SCLAlertViewResponder"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertViewResponder"), @selector(init:),(IMP) _rollout_impl_SCLAlertViewResponder_init__Instance, (IMP*)&_rollout_storage_SCLAlertViewResponder_init__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"init:" forClass:@"SCLAlertViewResponder"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertViewResponder_setTitletitle__Instance(id rcv, SEL _cmd, id __rollout_var_title);
static void (*_rollout_storage_SCLAlertViewResponder_setTitletitle__Instance)(id rcv, SEL _cmd, id __rollout_var_title);
void  _rollout_impl_SCLAlertViewResponder_setTitletitle__Instance(id rcv, SEL _cmd, id __rollout_var_title){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setTitletitle:" forClass:@"SCLAlertViewResponder"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertViewResponder_setTitletitle__Instance(rcv, _cmd, __rollout_var_title); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertViewResponder_setTitletitle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertViewResponder_setTitletitle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setTitletitle:" forClass:@"SCLAlertViewResponder"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertViewResponder"), @selector(setTitletitle:),(IMP) _rollout_impl_SCLAlertViewResponder_setTitletitle__Instance, (IMP*)&_rollout_storage_SCLAlertViewResponder_setTitletitle__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setTitletitle:" forClass:@"SCLAlertViewResponder"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertViewResponder_setSubTitle__Instance(id rcv, SEL _cmd, id __rollout_var_subTitle);
static void (*_rollout_storage_SCLAlertViewResponder_setSubTitle__Instance)(id rcv, SEL _cmd, id __rollout_var_subTitle);
void  _rollout_impl_SCLAlertViewResponder_setSubTitle__Instance(id rcv, SEL _cmd, id __rollout_var_subTitle){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_subTitle], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setSubTitle:" forClass:@"SCLAlertViewResponder"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertViewResponder_setSubTitle__Instance(rcv, _cmd, __rollout_var_subTitle); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertViewResponder_setSubTitle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertViewResponder_setSubTitle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setSubTitle:" forClass:@"SCLAlertViewResponder"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertViewResponder"), @selector(setSubTitle:),(IMP) _rollout_impl_SCLAlertViewResponder_setSubTitle__Instance, (IMP*)&_rollout_storage_SCLAlertViewResponder_setSubTitle__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setSubTitle:" forClass:@"SCLAlertViewResponder"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertViewResponder_close_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertViewResponder_close_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertViewResponder_close_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"close" forClass:@"SCLAlertViewResponder"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertViewResponder_close_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertViewResponder_close_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertViewResponder_close_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"close" forClass:@"SCLAlertViewResponder"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertViewResponder"), @selector(close),(IMP) _rollout_impl_SCLAlertViewResponder_close_Instance, (IMP*)&_rollout_storage_SCLAlertViewResponder_close_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"close" forClass:@"SCLAlertViewResponder"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_advantageTableViewController_initWithStyle__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_style);
static id (*_rollout_storage_advantageTableViewController_initWithStyle__Instance)(id rcv, SEL _cmd, __rollout_enum __rollout_var_style);
id  _rollout_impl_advantageTableViewController_initWithStyle__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_style){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_style], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithStyle:" forClass:@"advantageTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_advantageTableViewController_initWithStyle__Instance(rcv, _cmd, __rollout_var_style);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_advantageTableViewController_initWithStyle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_advantageTableViewController_initWithStyle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithStyle:" forClass:@"advantageTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"advantageTableViewController"), @selector(initWithStyle:),(IMP) _rollout_impl_advantageTableViewController_initWithStyle__Instance, (IMP*)&_rollout_storage_advantageTableViewController_initWithStyle__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithStyle:" forClass:@"advantageTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_advantageTableViewController_viewDidLoad_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_advantageTableViewController_viewDidLoad_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_advantageTableViewController_viewDidLoad_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewDidLoad" forClass:@"advantageTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_advantageTableViewController_viewDidLoad_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_advantageTableViewController_viewDidLoad_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_advantageTableViewController_viewDidLoad_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewDidLoad" forClass:@"advantageTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"advantageTableViewController"), @selector(viewDidLoad),(IMP) _rollout_impl_advantageTableViewController_viewDidLoad_Instance, (IMP*)&_rollout_storage_advantageTableViewController_viewDidLoad_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewDidLoad" forClass:@"advantageTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_advantageTableViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_advantageTableViewController_didReceiveMemoryWarning_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_advantageTableViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"didReceiveMemoryWarning" forClass:@"advantageTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_advantageTableViewController_didReceiveMemoryWarning_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_advantageTableViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_advantageTableViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"advantageTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"advantageTableViewController"), @selector(didReceiveMemoryWarning),(IMP) _rollout_impl_advantageTableViewController_didReceiveMemoryWarning_Instance, (IMP*)&_rollout_storage_advantageTableViewController_didReceiveMemoryWarning_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"advantageTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static int  _rollout_impl_advantageTableViewController_tableView_numberOfRowsInSection__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section);
static int (*_rollout_storage_advantageTableViewController_tableView_numberOfRowsInSection__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section);
int  _rollout_impl_advantageTableViewController_tableView_numberOfRowsInSection__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithInt:__rollout_var_section], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:numberOfRowsInSection:" forClass:@"advantageTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_advantageTableViewController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_section);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:_rollout_storage_advantageTableViewController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:_rollout_storage_advantageTableViewController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.intValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:numberOfRowsInSection:" forClass:@"advantageTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"advantageTableViewController"), @selector(tableView:numberOfRowsInSection:),(IMP) _rollout_impl_advantageTableViewController_tableView_numberOfRowsInSection__Instance, (IMP*)&_rollout_storage_advantageTableViewController_tableView_numberOfRowsInSection__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:numberOfRowsInSection:" forClass:@"advantageTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static float  _rollout_impl_advantageTableViewController_tableView_heightForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
static float (*_rollout_storage_advantageTableViewController_tableView_heightForRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
float  _rollout_impl_advantageTableViewController_tableView_heightForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:heightForRowAtIndexPath:" forClass:@"advantageTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_advantageTableViewController_tableView_heightForRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_indexPath);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithFloat:_rollout_storage_advantageTableViewController_tableView_heightForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithFloat:_rollout_storage_advantageTableViewController_tableView_heightForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.floatValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:heightForRowAtIndexPath:" forClass:@"advantageTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"advantageTableViewController"), @selector(tableView:heightForRowAtIndexPath:),(IMP) _rollout_impl_advantageTableViewController_tableView_heightForRowAtIndexPath__Instance, (IMP*)&_rollout_storage_advantageTableViewController_tableView_heightForRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:heightForRowAtIndexPath:" forClass:@"advantageTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_advantageTableViewController_cellBackgroundForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_indexPath);
static id (*_rollout_storage_advantageTableViewController_cellBackgroundForRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_indexPath);
id  _rollout_impl_advantageTableViewController_cellBackgroundForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_indexPath){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"cellBackgroundForRowAtIndexPath:" forClass:@"advantageTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_advantageTableViewController_cellBackgroundForRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_indexPath);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_advantageTableViewController_cellBackgroundForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_advantageTableViewController_cellBackgroundForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"cellBackgroundForRowAtIndexPath:" forClass:@"advantageTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"advantageTableViewController"), @selector(cellBackgroundForRowAtIndexPath:),(IMP) _rollout_impl_advantageTableViewController_cellBackgroundForRowAtIndexPath__Instance, (IMP*)&_rollout_storage_advantageTableViewController_cellBackgroundForRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"cellBackgroundForRowAtIndexPath:" forClass:@"advantageTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_advantageTableViewController_tableView_cellForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
static id (*_rollout_storage_advantageTableViewController_tableView_cellForRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
id  _rollout_impl_advantageTableViewController_tableView_cellForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:cellForRowAtIndexPath:" forClass:@"advantageTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_advantageTableViewController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_indexPath);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_advantageTableViewController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_advantageTableViewController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:cellForRowAtIndexPath:" forClass:@"advantageTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"advantageTableViewController"), @selector(tableView:cellForRowAtIndexPath:),(IMP) _rollout_impl_advantageTableViewController_tableView_cellForRowAtIndexPath__Instance, (IMP*)&_rollout_storage_advantageTableViewController_tableView_cellForRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:cellForRowAtIndexPath:" forClass:@"advantageTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_advantageTableViewController_prepareForSegue_sender__Instance(id rcv, SEL _cmd, id __rollout_var_segue, id __rollout_var_sender);
static void (*_rollout_storage_advantageTableViewController_prepareForSegue_sender__Instance)(id rcv, SEL _cmd, id __rollout_var_segue, id __rollout_var_sender);
void  _rollout_impl_advantageTableViewController_prepareForSegue_sender__Instance(id rcv, SEL _cmd, id __rollout_var_segue, id __rollout_var_sender){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_segue], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_sender], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"prepareForSegue:sender:" forClass:@"advantageTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_advantageTableViewController_prepareForSegue_sender__Instance(rcv, _cmd, __rollout_var_segue, __rollout_var_sender); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_advantageTableViewController_prepareForSegue_sender__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_advantageTableViewController_prepareForSegue_sender__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"prepareForSegue:sender:" forClass:@"advantageTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"advantageTableViewController"), @selector(prepareForSegue:sender:),(IMP) _rollout_impl_advantageTableViewController_prepareForSegue_sender__Instance, (IMP*)&_rollout_storage_advantageTableViewController_prepareForSegue_sender__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"prepareForSegue:sender:" forClass:@"advantageTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_viewDidLoad_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SJOPaperboyViewController_viewDidLoad_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SJOPaperboyViewController_viewDidLoad_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewDidLoad" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_viewDidLoad_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_viewDidLoad_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_viewDidLoad_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewDidLoad" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(viewDidLoad),(IMP) _rollout_impl_SJOPaperboyViewController_viewDidLoad_Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_viewDidLoad_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewDidLoad" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_viewWillAppear__Instance(id rcv, SEL _cmd, signed char __rollout_var_animated);
static void (*_rollout_storage_SJOPaperboyViewController_viewWillAppear__Instance)(id rcv, SEL _cmd, signed char __rollout_var_animated);
void  _rollout_impl_SJOPaperboyViewController_viewWillAppear__Instance(id rcv, SEL _cmd, signed char __rollout_var_animated){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_animated], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewWillAppear:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_viewWillAppear__Instance(rcv, _cmd, __rollout_var_animated); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_viewWillAppear__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_viewWillAppear__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewWillAppear:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(viewWillAppear:),(IMP) _rollout_impl_SJOPaperboyViewController_viewWillAppear__Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_viewWillAppear__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewWillAppear:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SJOPaperboyViewController_didReceiveMemoryWarning_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SJOPaperboyViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"didReceiveMemoryWarning" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_didReceiveMemoryWarning_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(didReceiveMemoryWarning),(IMP) _rollout_impl_SJOPaperboyViewController_didReceiveMemoryWarning_Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_didReceiveMemoryWarning_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static int  _rollout_impl_SJOPaperboyViewController_numberOfSectionsInTableView__Instance(id rcv, SEL _cmd, id __rollout_var_tableView);
static int (*_rollout_storage_SJOPaperboyViewController_numberOfSectionsInTableView__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView);
int  _rollout_impl_SJOPaperboyViewController_numberOfSectionsInTableView__Instance(id rcv, SEL _cmd, id __rollout_var_tableView){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"numberOfSectionsInTableView:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SJOPaperboyViewController_numberOfSectionsInTableView__Instance(rcv, _cmd, __rollout_var_tableView);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:_rollout_storage_SJOPaperboyViewController_numberOfSectionsInTableView__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:_rollout_storage_SJOPaperboyViewController_numberOfSectionsInTableView__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.intValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"numberOfSectionsInTableView:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(numberOfSectionsInTableView:),(IMP) _rollout_impl_SJOPaperboyViewController_numberOfSectionsInTableView__Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_numberOfSectionsInTableView__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"numberOfSectionsInTableView:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static int  _rollout_impl_SJOPaperboyViewController_tableView_numberOfRowsInSection__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section);
static int (*_rollout_storage_SJOPaperboyViewController_tableView_numberOfRowsInSection__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section);
int  _rollout_impl_SJOPaperboyViewController_tableView_numberOfRowsInSection__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithInt:__rollout_var_section], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:numberOfRowsInSection:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SJOPaperboyViewController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_section);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:_rollout_storage_SJOPaperboyViewController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:_rollout_storage_SJOPaperboyViewController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.intValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:numberOfRowsInSection:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(tableView:numberOfRowsInSection:),(IMP) _rollout_impl_SJOPaperboyViewController_tableView_numberOfRowsInSection__Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_tableView_numberOfRowsInSection__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:numberOfRowsInSection:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SJOPaperboyViewController_tableView_cellForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
static id (*_rollout_storage_SJOPaperboyViewController_tableView_cellForRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
id  _rollout_impl_SJOPaperboyViewController_tableView_cellForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:cellForRowAtIndexPath:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SJOPaperboyViewController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_indexPath);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SJOPaperboyViewController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SJOPaperboyViewController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:cellForRowAtIndexPath:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(tableView:cellForRowAtIndexPath:),(IMP) _rollout_impl_SJOPaperboyViewController_tableView_cellForRowAtIndexPath__Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_tableView_cellForRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:cellForRowAtIndexPath:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_SJOPaperboyViewController_tableView_canEditRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
static signed char (*_rollout_storage_SJOPaperboyViewController_tableView_canEditRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
signed char  _rollout_impl_SJOPaperboyViewController_tableView_canEditRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:canEditRowAtIndexPath:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SJOPaperboyViewController_tableView_canEditRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_indexPath);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SJOPaperboyViewController_tableView_canEditRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SJOPaperboyViewController_tableView_canEditRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:canEditRowAtIndexPath:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(tableView:canEditRowAtIndexPath:),(IMP) _rollout_impl_SJOPaperboyViewController_tableView_canEditRowAtIndexPath__Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_tableView_canEditRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:canEditRowAtIndexPath:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_tableView_commitEditingStyle_forRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, __rollout_enum __rollout_var_editingStyle, id __rollout_var_indexPath);
static void (*_rollout_storage_SJOPaperboyViewController_tableView_commitEditingStyle_forRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, __rollout_enum __rollout_var_editingStyle, id __rollout_var_indexPath);
void  _rollout_impl_SJOPaperboyViewController_tableView_commitEditingStyle_forRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, __rollout_enum __rollout_var_editingStyle, id __rollout_var_indexPath){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_editingStyle], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:commitEditingStyle:forRowAtIndexPath:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_tableView_commitEditingStyle_forRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_editingStyle, __rollout_var_indexPath); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_tableView_commitEditingStyle_forRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).enumValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_tableView_commitEditingStyle_forRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).enumValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:commitEditingStyle:forRowAtIndexPath:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(tableView:commitEditingStyle:forRowAtIndexPath:),(IMP) _rollout_impl_SJOPaperboyViewController_tableView_commitEditingStyle_forRowAtIndexPath__Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_tableView_commitEditingStyle_forRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:commitEditingStyle:forRowAtIndexPath:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_tableView_didSelectRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
static void (*_rollout_storage_SJOPaperboyViewController_tableView_didSelectRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
void  _rollout_impl_SJOPaperboyViewController_tableView_didSelectRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:didSelectRowAtIndexPath:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_tableView_didSelectRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_indexPath); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_tableView_didSelectRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_tableView_didSelectRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:didSelectRowAtIndexPath:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(tableView:didSelectRowAtIndexPath:),(IMP) _rollout_impl_SJOPaperboyViewController_tableView_didSelectRowAtIndexPath__Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_tableView_didSelectRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:didSelectRowAtIndexPath:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_locationManager_didUpdateLocations__Instance(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_locations);
static void (*_rollout_storage_SJOPaperboyViewController_locationManager_didUpdateLocations__Instance)(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_locations);
void  _rollout_impl_SJOPaperboyViewController_locationManager_didUpdateLocations__Instance(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_locations){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_manager], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_locations], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"locationManager:didUpdateLocations:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_locationManager_didUpdateLocations__Instance(rcv, _cmd, __rollout_var_manager, __rollout_var_locations); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_locationManager_didUpdateLocations__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_locationManager_didUpdateLocations__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"locationManager:didUpdateLocations:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(locationManager:didUpdateLocations:),(IMP) _rollout_impl_SJOPaperboyViewController_locationManager_didUpdateLocations__Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_locationManager_didUpdateLocations__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"locationManager:didUpdateLocations:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_locationManager_didUpdateToLocation_fromLocation__Instance(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_newLocation, id __rollout_var_oldLocation);
static void (*_rollout_storage_SJOPaperboyViewController_locationManager_didUpdateToLocation_fromLocation__Instance)(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_newLocation, id __rollout_var_oldLocation);
void  _rollout_impl_SJOPaperboyViewController_locationManager_didUpdateToLocation_fromLocation__Instance(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_newLocation, id __rollout_var_oldLocation){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_manager], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_newLocation], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_oldLocation], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"locationManager:didUpdateToLocation:fromLocation:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_locationManager_didUpdateToLocation_fromLocation__Instance(rcv, _cmd, __rollout_var_manager, __rollout_var_newLocation, __rollout_var_oldLocation); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_locationManager_didUpdateToLocation_fromLocation__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_locationManager_didUpdateToLocation_fromLocation__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"locationManager:didUpdateToLocation:fromLocation:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(locationManager:didUpdateToLocation:fromLocation:),(IMP) _rollout_impl_SJOPaperboyViewController_locationManager_didUpdateToLocation_fromLocation__Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_locationManager_didUpdateToLocation_fromLocation__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"locationManager:didUpdateToLocation:fromLocation:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_locationManager_didFailWithError__Instance(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_error);
static void (*_rollout_storage_SJOPaperboyViewController_locationManager_didFailWithError__Instance)(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_error);
void  _rollout_impl_SJOPaperboyViewController_locationManager_didFailWithError__Instance(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_error){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_manager], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_error], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"locationManager:didFailWithError:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_locationManager_didFailWithError__Instance(rcv, _cmd, __rollout_var_manager, __rollout_var_error); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_locationManager_didFailWithError__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_locationManager_didFailWithError__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"locationManager:didFailWithError:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(locationManager:didFailWithError:),(IMP) _rollout_impl_SJOPaperboyViewController_locationManager_didFailWithError__Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_locationManager_didFailWithError__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"locationManager:didFailWithError:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_openHelperToCustomizeTypeLocation_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SJOPaperboyViewController_openHelperToCustomizeTypeLocation_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SJOPaperboyViewController_openHelperToCustomizeTypeLocation_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"openHelperToCustomizeTypeLocation" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_openHelperToCustomizeTypeLocation_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_openHelperToCustomizeTypeLocation_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_openHelperToCustomizeTypeLocation_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"openHelperToCustomizeTypeLocation" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(openHelperToCustomizeTypeLocation),(IMP) _rollout_impl_SJOPaperboyViewController_openHelperToCustomizeTypeLocation_Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_openHelperToCustomizeTypeLocation_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"openHelperToCustomizeTypeLocation" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_updateGeofencedLocations_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SJOPaperboyViewController_updateGeofencedLocations_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SJOPaperboyViewController_updateGeofencedLocations_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"updateGeofencedLocations" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_updateGeofencedLocations_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_updateGeofencedLocations_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_updateGeofencedLocations_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"updateGeofencedLocations" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(updateGeofencedLocations),(IMP) _rollout_impl_SJOPaperboyViewController_updateGeofencedLocations_Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_updateGeofencedLocations_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"updateGeofencedLocations" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SJOPaperboyViewController_styledLabelWithText__Instance(id rcv, SEL _cmd, id __rollout_var_text);
static id (*_rollout_storage_SJOPaperboyViewController_styledLabelWithText__Instance)(id rcv, SEL _cmd, id __rollout_var_text);
id  _rollout_impl_SJOPaperboyViewController_styledLabelWithText__Instance(id rcv, SEL _cmd, id __rollout_var_text){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_text], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"styledLabelWithText:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SJOPaperboyViewController_styledLabelWithText__Instance(rcv, _cmd, __rollout_var_text);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SJOPaperboyViewController_styledLabelWithText__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SJOPaperboyViewController_styledLabelWithText__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"styledLabelWithText:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(styledLabelWithText:),(IMP) _rollout_impl_SJOPaperboyViewController_styledLabelWithText__Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_styledLabelWithText__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"styledLabelWithText:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_toggleBackgroundUpdates__Instance(id rcv, SEL _cmd, id __rollout_var_sender);
static void (*_rollout_storage_SJOPaperboyViewController_toggleBackgroundUpdates__Instance)(id rcv, SEL _cmd, id __rollout_var_sender);
void  _rollout_impl_SJOPaperboyViewController_toggleBackgroundUpdates__Instance(id rcv, SEL _cmd, id __rollout_var_sender){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_sender], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"toggleBackgroundUpdates:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_toggleBackgroundUpdates__Instance(rcv, _cmd, __rollout_var_sender); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_toggleBackgroundUpdates__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_toggleBackgroundUpdates__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"toggleBackgroundUpdates:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(toggleBackgroundUpdates:),(IMP) _rollout_impl_SJOPaperboyViewController_toggleBackgroundUpdates__Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_toggleBackgroundUpdates__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"toggleBackgroundUpdates:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_toggleLocationUpdates__Instance(id rcv, SEL _cmd, id __rollout_var_sender);
static void (*_rollout_storage_SJOPaperboyViewController_toggleLocationUpdates__Instance)(id rcv, SEL _cmd, id __rollout_var_sender);
void  _rollout_impl_SJOPaperboyViewController_toggleLocationUpdates__Instance(id rcv, SEL _cmd, id __rollout_var_sender){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_sender], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"toggleLocationUpdates:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_toggleLocationUpdates__Instance(rcv, _cmd, __rollout_var_sender); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_toggleLocationUpdates__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_toggleLocationUpdates__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"toggleLocationUpdates:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(toggleLocationUpdates:),(IMP) _rollout_impl_SJOPaperboyViewController_toggleLocationUpdates__Instance, (IMP*)&_rollout_storage_SJOPaperboyViewController_toggleLocationUpdates__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"toggleLocationUpdates:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_SJOPaperboyViewController_isBackgroundUpdatingEnabled_Class(id rcv, SEL _cmd);
static signed char (*_rollout_storage_SJOPaperboyViewController_isBackgroundUpdatingEnabled_Class)(id rcv, SEL _cmd);
signed char  _rollout_impl_SJOPaperboyViewController_isBackgroundUpdatingEnabled_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"isBackgroundUpdatingEnabled" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SJOPaperboyViewController_isBackgroundUpdatingEnabled_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SJOPaperboyViewController_isBackgroundUpdatingEnabled_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SJOPaperboyViewController_isBackgroundUpdatingEnabled_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"isBackgroundUpdatingEnabled" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(isBackgroundUpdatingEnabled),(IMP) _rollout_impl_SJOPaperboyViewController_isBackgroundUpdatingEnabled_Class, (IMP*)&_rollout_storage_SJOPaperboyViewController_isBackgroundUpdatingEnabled_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"isBackgroundUpdatingEnabled" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_SJOPaperboyViewController_isLocationUpdatingEnabled_Class(id rcv, SEL _cmd);
static signed char (*_rollout_storage_SJOPaperboyViewController_isLocationUpdatingEnabled_Class)(id rcv, SEL _cmd);
signed char  _rollout_impl_SJOPaperboyViewController_isLocationUpdatingEnabled_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"isLocationUpdatingEnabled" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SJOPaperboyViewController_isLocationUpdatingEnabled_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SJOPaperboyViewController_isLocationUpdatingEnabled_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SJOPaperboyViewController_isLocationUpdatingEnabled_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"isLocationUpdatingEnabled" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(isLocationUpdatingEnabled),(IMP) _rollout_impl_SJOPaperboyViewController_isLocationUpdatingEnabled_Class, (IMP*)&_rollout_storage_SJOPaperboyViewController_isLocationUpdatingEnabled_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"isLocationUpdatingEnabled" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_setDefaultBackgroundValue__Class(id rcv, SEL _cmd, signed char __rollout_var_isBackgroundingEnabled);
static void (*_rollout_storage_SJOPaperboyViewController_setDefaultBackgroundValue__Class)(id rcv, SEL _cmd, signed char __rollout_var_isBackgroundingEnabled);
void  _rollout_impl_SJOPaperboyViewController_setDefaultBackgroundValue__Class(id rcv, SEL _cmd, signed char __rollout_var_isBackgroundingEnabled){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_isBackgroundingEnabled], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"setDefaultBackgroundValue:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_setDefaultBackgroundValue__Class(rcv, _cmd, __rollout_var_isBackgroundingEnabled); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_setDefaultBackgroundValue__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_setDefaultBackgroundValue__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"setDefaultBackgroundValue:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(setDefaultBackgroundValue:),(IMP) _rollout_impl_SJOPaperboyViewController_setDefaultBackgroundValue__Class, (IMP*)&_rollout_storage_SJOPaperboyViewController_setDefaultBackgroundValue__Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"setDefaultBackgroundValue:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_setDefaultLocationUpdateValue__Class(id rcv, SEL _cmd, signed char __rollout_var_areLocationUpdatesEnabled);
static void (*_rollout_storage_SJOPaperboyViewController_setDefaultLocationUpdateValue__Class)(id rcv, SEL _cmd, signed char __rollout_var_areLocationUpdatesEnabled);
void  _rollout_impl_SJOPaperboyViewController_setDefaultLocationUpdateValue__Class(id rcv, SEL _cmd, signed char __rollout_var_areLocationUpdatesEnabled){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_areLocationUpdatesEnabled], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"setDefaultLocationUpdateValue:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_setDefaultLocationUpdateValue__Class(rcv, _cmd, __rollout_var_areLocationUpdatesEnabled); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_setDefaultLocationUpdateValue__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_setDefaultLocationUpdateValue__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"setDefaultLocationUpdateValue:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(setDefaultLocationUpdateValue:),(IMP) _rollout_impl_SJOPaperboyViewController_setDefaultLocationUpdateValue__Class, (IMP*)&_rollout_storage_SJOPaperboyViewController_setDefaultLocationUpdateValue__Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"setDefaultLocationUpdateValue:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyViewController_setDefaultDefaultsValue_forKey__Class(id rcv, SEL _cmd, signed char __rollout_var_value, id __rollout_var_key);
static void (*_rollout_storage_SJOPaperboyViewController_setDefaultDefaultsValue_forKey__Class)(id rcv, SEL _cmd, signed char __rollout_var_value, id __rollout_var_key);
void  _rollout_impl_SJOPaperboyViewController_setDefaultDefaultsValue_forKey__Class(id rcv, SEL _cmd, signed char __rollout_var_value, id __rollout_var_key){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_value], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_key], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"setDefaultDefaultsValue:forKey:" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyViewController_setDefaultDefaultsValue_forKey__Class(rcv, _cmd, __rollout_var_value, __rollout_var_key); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyViewController_setDefaultDefaultsValue_forKey__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyViewController_setDefaultDefaultsValue_forKey__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"setDefaultDefaultsValue:forKey:" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(setDefaultDefaultsValue:forKey:),(IMP) _rollout_impl_SJOPaperboyViewController_setDefaultDefaultsValue_forKey__Class, (IMP*)&_rollout_storage_SJOPaperboyViewController_setDefaultDefaultsValue_forKey__Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"setDefaultDefaultsValue:forKey:" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SJOPaperboyViewController_locationsForUpdate_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_SJOPaperboyViewController_locationsForUpdate_Class)(id rcv, SEL _cmd);
id  _rollout_impl_SJOPaperboyViewController_locationsForUpdate_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"locationsForUpdate" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SJOPaperboyViewController_locationsForUpdate_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SJOPaperboyViewController_locationsForUpdate_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SJOPaperboyViewController_locationsForUpdate_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"locationsForUpdate" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(locationsForUpdate),(IMP) _rollout_impl_SJOPaperboyViewController_locationsForUpdate_Class, (IMP*)&_rollout_storage_SJOPaperboyViewController_locationsForUpdate_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"locationsForUpdate" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_SJOPaperboyViewController_hasBackgroundModeEnabled_Class(id rcv, SEL _cmd);
static signed char (*_rollout_storage_SJOPaperboyViewController_hasBackgroundModeEnabled_Class)(id rcv, SEL _cmd);
signed char  _rollout_impl_SJOPaperboyViewController_hasBackgroundModeEnabled_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"hasBackgroundModeEnabled" forClass:@"SJOPaperboyViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SJOPaperboyViewController_hasBackgroundModeEnabled_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SJOPaperboyViewController_hasBackgroundModeEnabled_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SJOPaperboyViewController_hasBackgroundModeEnabled_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"hasBackgroundModeEnabled" forClass:@"SJOPaperboyViewController"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SJOPaperboyViewController"), @selector(hasBackgroundModeEnabled),(IMP) _rollout_impl_SJOPaperboyViewController_hasBackgroundModeEnabled_Class, (IMP*)&_rollout_storage_SJOPaperboyViewController_hasBackgroundModeEnabled_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"hasBackgroundModeEnabled" forClass:@"SJOPaperboyViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageOperation_main_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_FXImageOperation_main_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_FXImageOperation_main_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"main" forClass:@"FXImageOperation"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageOperation_main_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageOperation_main_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageOperation_main_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"main" forClass:@"FXImageOperation"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageOperation"), @selector(main),(IMP) _rollout_impl_FXImageOperation_main_Instance, (IMP*)&_rollout_storage_FXImageOperation_main_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"main" forClass:@"FXImageOperation"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_FXImageView_processingQueue_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_FXImageView_processingQueue_Class)(id rcv, SEL _cmd);
id  _rollout_impl_FXImageView_processingQueue_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"processingQueue" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_FXImageView_processingQueue_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_processingQueue_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_processingQueue_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"processingQueue" forClass:@"FXImageView"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"FXImageView"), @selector(processingQueue),(IMP) _rollout_impl_FXImageView_processingQueue_Class, (IMP*)&_rollout_storage_FXImageView_processingQueue_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"processingQueue" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_FXImageView_processedImageCache_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_FXImageView_processedImageCache_Class)(id rcv, SEL _cmd);
id  _rollout_impl_FXImageView_processedImageCache_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"processedImageCache" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_FXImageView_processedImageCache_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_processedImageCache_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_processedImageCache_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"processedImageCache" forClass:@"FXImageView"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"FXImageView"), @selector(processedImageCache),(IMP) _rollout_impl_FXImageView_processedImageCache_Class, (IMP*)&_rollout_storage_FXImageView_processedImageCache_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"processedImageCache" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setUp_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_FXImageView_setUp_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_FXImageView_setUp_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setUp" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setUp_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setUp_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setUp_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setUp" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setUp),(IMP) _rollout_impl_FXImageView_setUp_Instance, (IMP*)&_rollout_storage_FXImageView_setUp_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setUp" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_FXImageView_initWithFrame__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_frame);
static id (*_rollout_storage_FXImageView_initWithFrame__Instance)(id rcv, SEL _cmd, struct CGRect __rollout_var_frame);
id  _rollout_impl_FXImageView_initWithFrame__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_frame){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithRecordPointer:&__rollout_var_frame ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithFrame:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_FXImageView_initWithFrame__Instance(rcv, _cmd, __rollout_var_frame);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_initWithFrame__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_initWithFrame__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithFrame:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(initWithFrame:),(IMP) _rollout_impl_FXImageView_initWithFrame__Instance, (IMP*)&_rollout_storage_FXImageView_initWithFrame__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithFrame:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_FXImageView_initWithImage__Instance(id rcv, SEL _cmd, id __rollout_var_image);
static id (*_rollout_storage_FXImageView_initWithImage__Instance)(id rcv, SEL _cmd, id __rollout_var_image);
id  _rollout_impl_FXImageView_initWithImage__Instance(id rcv, SEL _cmd, id __rollout_var_image){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_image], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithImage:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_FXImageView_initWithImage__Instance(rcv, _cmd, __rollout_var_image);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_initWithImage__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_initWithImage__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithImage:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(initWithImage:),(IMP) _rollout_impl_FXImageView_initWithImage__Instance, (IMP*)&_rollout_storage_FXImageView_initWithImage__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithImage:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_FXImageView_initWithImage_highlightedImage__Instance(id rcv, SEL _cmd, id __rollout_var_image, id __rollout_var_highlightedImage);
static id (*_rollout_storage_FXImageView_initWithImage_highlightedImage__Instance)(id rcv, SEL _cmd, id __rollout_var_image, id __rollout_var_highlightedImage);
id  _rollout_impl_FXImageView_initWithImage_highlightedImage__Instance(id rcv, SEL _cmd, id __rollout_var_image, id __rollout_var_highlightedImage){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_image], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_highlightedImage], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithImage:highlightedImage:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_FXImageView_initWithImage_highlightedImage__Instance(rcv, _cmd, __rollout_var_image, __rollout_var_highlightedImage);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_initWithImage_highlightedImage__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_initWithImage_highlightedImage__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithImage:highlightedImage:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(initWithImage:highlightedImage:),(IMP) _rollout_impl_FXImageView_initWithImage_highlightedImage__Instance, (IMP*)&_rollout_storage_FXImageView_initWithImage_highlightedImage__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithImage:highlightedImage:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_awakeFromNib_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_FXImageView_awakeFromNib_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_FXImageView_awakeFromNib_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"awakeFromNib" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_awakeFromNib_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_awakeFromNib_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_awakeFromNib_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"awakeFromNib" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(awakeFromNib),(IMP) _rollout_impl_FXImageView_awakeFromNib_Instance, (IMP*)&_rollout_storage_FXImageView_awakeFromNib_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"awakeFromNib" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_FXImageView_colorHash__Instance(id rcv, SEL _cmd, id __rollout_var_color);
static id (*_rollout_storage_FXImageView_colorHash__Instance)(id rcv, SEL _cmd, id __rollout_var_color);
id  _rollout_impl_FXImageView_colorHash__Instance(id rcv, SEL _cmd, id __rollout_var_color){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_color], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"colorHash:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_FXImageView_colorHash__Instance(rcv, _cmd, __rollout_var_color);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_colorHash__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_colorHash__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"colorHash:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(colorHash:),(IMP) _rollout_impl_FXImageView_colorHash__Instance, (IMP*)&_rollout_storage_FXImageView_colorHash__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"colorHash:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_FXImageView_imageHash__Instance(id rcv, SEL _cmd, id __rollout_var_image);
static id (*_rollout_storage_FXImageView_imageHash__Instance)(id rcv, SEL _cmd, id __rollout_var_image);
id  _rollout_impl_FXImageView_imageHash__Instance(id rcv, SEL _cmd, id __rollout_var_image){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_image], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"imageHash:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_FXImageView_imageHash__Instance(rcv, _cmd, __rollout_var_image);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_imageHash__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_imageHash__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"imageHash:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(imageHash:),(IMP) _rollout_impl_FXImageView_imageHash__Instance, (IMP*)&_rollout_storage_FXImageView_imageHash__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"imageHash:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_FXImageView_cacheKey_Instance(id rcv, SEL _cmd);
static id (*_rollout_storage_FXImageView_cacheKey_Instance)(id rcv, SEL _cmd);
id  _rollout_impl_FXImageView_cacheKey_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"cacheKey" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_FXImageView_cacheKey_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_cacheKey_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_cacheKey_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"cacheKey" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(cacheKey),(IMP) _rollout_impl_FXImageView_cacheKey_Instance, (IMP*)&_rollout_storage_FXImageView_cacheKey_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"cacheKey" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_cacheProcessedImage_forKey__Instance(id rcv, SEL _cmd, id __rollout_var_processedImage, id __rollout_var_cacheKey);
static void (*_rollout_storage_FXImageView_cacheProcessedImage_forKey__Instance)(id rcv, SEL _cmd, id __rollout_var_processedImage, id __rollout_var_cacheKey);
void  _rollout_impl_FXImageView_cacheProcessedImage_forKey__Instance(id rcv, SEL _cmd, id __rollout_var_processedImage, id __rollout_var_cacheKey){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_processedImage], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_cacheKey], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"cacheProcessedImage:forKey:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_cacheProcessedImage_forKey__Instance(rcv, _cmd, __rollout_var_processedImage, __rollout_var_cacheKey); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_cacheProcessedImage_forKey__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_cacheProcessedImage_forKey__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"cacheProcessedImage:forKey:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(cacheProcessedImage:forKey:),(IMP) _rollout_impl_FXImageView_cacheProcessedImage_forKey__Instance, (IMP*)&_rollout_storage_FXImageView_cacheProcessedImage_forKey__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"cacheProcessedImage:forKey:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_FXImageView_cachedProcessedImage_Instance(id rcv, SEL _cmd);
static id (*_rollout_storage_FXImageView_cachedProcessedImage_Instance)(id rcv, SEL _cmd);
id  _rollout_impl_FXImageView_cachedProcessedImage_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"cachedProcessedImage" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_FXImageView_cachedProcessedImage_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_cachedProcessedImage_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_cachedProcessedImage_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"cachedProcessedImage" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(cachedProcessedImage),(IMP) _rollout_impl_FXImageView_cachedProcessedImage_Instance, (IMP*)&_rollout_storage_FXImageView_cachedProcessedImage_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"cachedProcessedImage" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setProcessedImageOnMainThread__Instance(id rcv, SEL _cmd, id __rollout_var_array);
static void (*_rollout_storage_FXImageView_setProcessedImageOnMainThread__Instance)(id rcv, SEL _cmd, id __rollout_var_array);
void  _rollout_impl_FXImageView_setProcessedImageOnMainThread__Instance(id rcv, SEL _cmd, id __rollout_var_array){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_array], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setProcessedImageOnMainThread:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setProcessedImageOnMainThread__Instance(rcv, _cmd, __rollout_var_array); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setProcessedImageOnMainThread__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setProcessedImageOnMainThread__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setProcessedImageOnMainThread:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setProcessedImageOnMainThread:),(IMP) _rollout_impl_FXImageView_setProcessedImageOnMainThread__Instance, (IMP*)&_rollout_storage_FXImageView_setProcessedImageOnMainThread__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setProcessedImageOnMainThread:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_processImage_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_FXImageView_processImage_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_FXImageView_processImage_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"processImage" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_processImage_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_processImage_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_processImage_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"processImage" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(processImage),(IMP) _rollout_impl_FXImageView_processImage_Instance, (IMP*)&_rollout_storage_FXImageView_processImage_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"processImage" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_queueProcessingOperation__Instance(id rcv, SEL _cmd, id __rollout_var_operation);
static void (*_rollout_storage_FXImageView_queueProcessingOperation__Instance)(id rcv, SEL _cmd, id __rollout_var_operation);
void  _rollout_impl_FXImageView_queueProcessingOperation__Instance(id rcv, SEL _cmd, id __rollout_var_operation){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_operation], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"queueProcessingOperation:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_queueProcessingOperation__Instance(rcv, _cmd, __rollout_var_operation); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_queueProcessingOperation__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_queueProcessingOperation__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"queueProcessingOperation:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(queueProcessingOperation:),(IMP) _rollout_impl_FXImageView_queueProcessingOperation__Instance, (IMP*)&_rollout_storage_FXImageView_queueProcessingOperation__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"queueProcessingOperation:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_queueImageForProcessing_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_FXImageView_queueImageForProcessing_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_FXImageView_queueImageForProcessing_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"queueImageForProcessing" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_queueImageForProcessing_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_queueImageForProcessing_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_queueImageForProcessing_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"queueImageForProcessing" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(queueImageForProcessing),(IMP) _rollout_impl_FXImageView_queueImageForProcessing_Instance, (IMP*)&_rollout_storage_FXImageView_queueImageForProcessing_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"queueImageForProcessing" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_updateProcessedImage_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_FXImageView_updateProcessedImage_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_FXImageView_updateProcessedImage_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"updateProcessedImage" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_updateProcessedImage_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_updateProcessedImage_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_updateProcessedImage_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"updateProcessedImage" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(updateProcessedImage),(IMP) _rollout_impl_FXImageView_updateProcessedImage_Instance, (IMP*)&_rollout_storage_FXImageView_updateProcessedImage_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"updateProcessedImage" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_layoutSubviews_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_FXImageView_layoutSubviews_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_FXImageView_layoutSubviews_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"layoutSubviews" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_layoutSubviews_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_layoutSubviews_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_layoutSubviews_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"layoutSubviews" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(layoutSubviews),(IMP) _rollout_impl_FXImageView_layoutSubviews_Instance, (IMP*)&_rollout_storage_FXImageView_layoutSubviews_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"layoutSubviews" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setProcessedImage__Instance(id rcv, SEL _cmd, id __rollout_var_processedImage);
static void (*_rollout_storage_FXImageView_setProcessedImage__Instance)(id rcv, SEL _cmd, id __rollout_var_processedImage);
void  _rollout_impl_FXImageView_setProcessedImage__Instance(id rcv, SEL _cmd, id __rollout_var_processedImage){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_processedImage], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setProcessedImage:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setProcessedImage__Instance(rcv, _cmd, __rollout_var_processedImage); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setProcessedImage__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setProcessedImage__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setProcessedImage:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setProcessedImage:),(IMP) _rollout_impl_FXImageView_setProcessedImage__Instance, (IMP*)&_rollout_storage_FXImageView_setProcessedImage__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setProcessedImage:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setProcessedImageInternal__Instance(id rcv, SEL _cmd, id __rollout_var_processedImage);
static void (*_rollout_storage_FXImageView_setProcessedImageInternal__Instance)(id rcv, SEL _cmd, id __rollout_var_processedImage);
void  _rollout_impl_FXImageView_setProcessedImageInternal__Instance(id rcv, SEL _cmd, id __rollout_var_processedImage){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_processedImage], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setProcessedImageInternal:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setProcessedImageInternal__Instance(rcv, _cmd, __rollout_var_processedImage); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setProcessedImageInternal__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setProcessedImageInternal__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setProcessedImageInternal:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setProcessedImageInternal:),(IMP) _rollout_impl_FXImageView_setProcessedImageInternal__Instance, (IMP*)&_rollout_storage_FXImageView_setProcessedImageInternal__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setProcessedImageInternal:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_FXImageView_image_Instance(id rcv, SEL _cmd);
static id (*_rollout_storage_FXImageView_image_Instance)(id rcv, SEL _cmd);
id  _rollout_impl_FXImageView_image_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"image" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_FXImageView_image_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_image_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_FXImageView_image_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"image" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(image),(IMP) _rollout_impl_FXImageView_image_Instance, (IMP*)&_rollout_storage_FXImageView_image_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"image" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setImage__Instance(id rcv, SEL _cmd, id __rollout_var_image);
static void (*_rollout_storage_FXImageView_setImage__Instance)(id rcv, SEL _cmd, id __rollout_var_image);
void  _rollout_impl_FXImageView_setImage__Instance(id rcv, SEL _cmd, id __rollout_var_image){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_image], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setImage:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setImage__Instance(rcv, _cmd, __rollout_var_image); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setImage__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setImage__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setImage:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setImage:),(IMP) _rollout_impl_FXImageView_setImage__Instance, (IMP*)&_rollout_storage_FXImageView_setImage__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setImage:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setReflectionGap__Instance(id rcv, SEL _cmd, float __rollout_var_reflectionGap);
static void (*_rollout_storage_FXImageView_setReflectionGap__Instance)(id rcv, SEL _cmd, float __rollout_var_reflectionGap);
void  _rollout_impl_FXImageView_setReflectionGap__Instance(id rcv, SEL _cmd, float __rollout_var_reflectionGap){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithFloat:__rollout_var_reflectionGap], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setReflectionGap:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setReflectionGap__Instance(rcv, _cmd, __rollout_var_reflectionGap); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setReflectionGap__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).floatValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setReflectionGap__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).floatValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setReflectionGap:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setReflectionGap:),(IMP) _rollout_impl_FXImageView_setReflectionGap__Instance, (IMP*)&_rollout_storage_FXImageView_setReflectionGap__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setReflectionGap:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setReflectionScale__Instance(id rcv, SEL _cmd, float __rollout_var_reflectionScale);
static void (*_rollout_storage_FXImageView_setReflectionScale__Instance)(id rcv, SEL _cmd, float __rollout_var_reflectionScale);
void  _rollout_impl_FXImageView_setReflectionScale__Instance(id rcv, SEL _cmd, float __rollout_var_reflectionScale){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithFloat:__rollout_var_reflectionScale], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setReflectionScale:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setReflectionScale__Instance(rcv, _cmd, __rollout_var_reflectionScale); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setReflectionScale__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).floatValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setReflectionScale__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).floatValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setReflectionScale:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setReflectionScale:),(IMP) _rollout_impl_FXImageView_setReflectionScale__Instance, (IMP*)&_rollout_storage_FXImageView_setReflectionScale__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setReflectionScale:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setReflectionAlpha__Instance(id rcv, SEL _cmd, float __rollout_var_reflectionAlpha);
static void (*_rollout_storage_FXImageView_setReflectionAlpha__Instance)(id rcv, SEL _cmd, float __rollout_var_reflectionAlpha);
void  _rollout_impl_FXImageView_setReflectionAlpha__Instance(id rcv, SEL _cmd, float __rollout_var_reflectionAlpha){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithFloat:__rollout_var_reflectionAlpha], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setReflectionAlpha:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setReflectionAlpha__Instance(rcv, _cmd, __rollout_var_reflectionAlpha); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setReflectionAlpha__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).floatValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setReflectionAlpha__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).floatValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setReflectionAlpha:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setReflectionAlpha:),(IMP) _rollout_impl_FXImageView_setReflectionAlpha__Instance, (IMP*)&_rollout_storage_FXImageView_setReflectionAlpha__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setReflectionAlpha:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setShadowColor__Instance(id rcv, SEL _cmd, id __rollout_var_shadowColor);
static void (*_rollout_storage_FXImageView_setShadowColor__Instance)(id rcv, SEL _cmd, id __rollout_var_shadowColor);
void  _rollout_impl_FXImageView_setShadowColor__Instance(id rcv, SEL _cmd, id __rollout_var_shadowColor){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_shadowColor], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setShadowColor:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setShadowColor__Instance(rcv, _cmd, __rollout_var_shadowColor); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setShadowColor__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setShadowColor__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setShadowColor:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setShadowColor:),(IMP) _rollout_impl_FXImageView_setShadowColor__Instance, (IMP*)&_rollout_storage_FXImageView_setShadowColor__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setShadowColor:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setShadowOffset__Instance(id rcv, SEL _cmd, struct CGSize __rollout_var_shadowOffset);
static void (*_rollout_storage_FXImageView_setShadowOffset__Instance)(id rcv, SEL _cmd, struct CGSize __rollout_var_shadowOffset);
void  _rollout_impl_FXImageView_setShadowOffset__Instance(id rcv, SEL _cmd, struct CGSize __rollout_var_shadowOffset){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithRecordPointer:&__rollout_var_shadowOffset ofSize:sizeof(struct CGSize) shouldBeFreedInDealloc:NO], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setShadowOffset:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setShadowOffset__Instance(rcv, _cmd, __rollout_var_shadowOffset); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setShadowOffset__Instance(rcv, _cmd, *(struct CGSize*)((RolloutTypeWrapper*)arguments[0]).recordPointer);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setShadowOffset__Instance(rcv, _cmd, *(struct CGSize*)((RolloutTypeWrapper*)arguments[0]).recordPointer);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setShadowOffset:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setShadowOffset:),(IMP) _rollout_impl_FXImageView_setShadowOffset__Instance, (IMP*)&_rollout_storage_FXImageView_setShadowOffset__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setShadowOffset:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setShadowBlur__Instance(id rcv, SEL _cmd, float __rollout_var_shadowBlur);
static void (*_rollout_storage_FXImageView_setShadowBlur__Instance)(id rcv, SEL _cmd, float __rollout_var_shadowBlur);
void  _rollout_impl_FXImageView_setShadowBlur__Instance(id rcv, SEL _cmd, float __rollout_var_shadowBlur){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithFloat:__rollout_var_shadowBlur], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setShadowBlur:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setShadowBlur__Instance(rcv, _cmd, __rollout_var_shadowBlur); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setShadowBlur__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).floatValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setShadowBlur__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).floatValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setShadowBlur:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setShadowBlur:),(IMP) _rollout_impl_FXImageView_setShadowBlur__Instance, (IMP*)&_rollout_storage_FXImageView_setShadowBlur__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setShadowBlur:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setCornerRadius__Instance(id rcv, SEL _cmd, float __rollout_var_cornerRadius);
static void (*_rollout_storage_FXImageView_setCornerRadius__Instance)(id rcv, SEL _cmd, float __rollout_var_cornerRadius);
void  _rollout_impl_FXImageView_setCornerRadius__Instance(id rcv, SEL _cmd, float __rollout_var_cornerRadius){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithFloat:__rollout_var_cornerRadius], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setCornerRadius:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setCornerRadius__Instance(rcv, _cmd, __rollout_var_cornerRadius); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setCornerRadius__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).floatValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setCornerRadius__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).floatValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setCornerRadius:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setCornerRadius:),(IMP) _rollout_impl_FXImageView_setCornerRadius__Instance, (IMP*)&_rollout_storage_FXImageView_setCornerRadius__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setCornerRadius:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setContentMode__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_contentMode);
static void (*_rollout_storage_FXImageView_setContentMode__Instance)(id rcv, SEL _cmd, __rollout_enum __rollout_var_contentMode);
void  _rollout_impl_FXImageView_setContentMode__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_contentMode){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_contentMode], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setContentMode:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setContentMode__Instance(rcv, _cmd, __rollout_var_contentMode); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setContentMode__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setContentMode__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setContentMode:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setContentMode:),(IMP) _rollout_impl_FXImageView_setContentMode__Instance, (IMP*)&_rollout_storage_FXImageView_setContentMode__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setContentMode:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setCustomEffectsBlock__Instance(id rcv, SEL _cmd, id __rollout_var_customEffectsBlock);
static void (*_rollout_storage_FXImageView_setCustomEffectsBlock__Instance)(id rcv, SEL _cmd, id __rollout_var_customEffectsBlock);
void  _rollout_impl_FXImageView_setCustomEffectsBlock__Instance(id rcv, SEL _cmd, id __rollout_var_customEffectsBlock){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithBlockPointer:__rollout_var_customEffectsBlock], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setCustomEffectsBlock:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setCustomEffectsBlock__Instance(rcv, _cmd, __rollout_var_customEffectsBlock); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setCustomEffectsBlock__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).blockPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setCustomEffectsBlock__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).blockPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setCustomEffectsBlock:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setCustomEffectsBlock:),(IMP) _rollout_impl_FXImageView_setCustomEffectsBlock__Instance, (IMP*)&_rollout_storage_FXImageView_setCustomEffectsBlock__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setCustomEffectsBlock:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setCacheKey__Instance(id rcv, SEL _cmd, id __rollout_var_cacheKey);
static void (*_rollout_storage_FXImageView_setCacheKey__Instance)(id rcv, SEL _cmd, id __rollout_var_cacheKey);
void  _rollout_impl_FXImageView_setCacheKey__Instance(id rcv, SEL _cmd, id __rollout_var_cacheKey){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_cacheKey], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setCacheKey:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setCacheKey__Instance(rcv, _cmd, __rollout_var_cacheKey); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setCacheKey__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setCacheKey__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setCacheKey:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setCacheKey:),(IMP) _rollout_impl_FXImageView_setCacheKey__Instance, (IMP*)&_rollout_storage_FXImageView_setCacheKey__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setCacheKey:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setImageWithContentsOfFile__Instance(id rcv, SEL _cmd, id __rollout_var_file);
static void (*_rollout_storage_FXImageView_setImageWithContentsOfFile__Instance)(id rcv, SEL _cmd, id __rollout_var_file);
void  _rollout_impl_FXImageView_setImageWithContentsOfFile__Instance(id rcv, SEL _cmd, id __rollout_var_file){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_file], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setImageWithContentsOfFile:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setImageWithContentsOfFile__Instance(rcv, _cmd, __rollout_var_file); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setImageWithContentsOfFile__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setImageWithContentsOfFile__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setImageWithContentsOfFile:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setImageWithContentsOfFile:),(IMP) _rollout_impl_FXImageView_setImageWithContentsOfFile__Instance, (IMP*)&_rollout_storage_FXImageView_setImageWithContentsOfFile__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setImageWithContentsOfFile:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_FXImageView_setImageWithContentsOfURL__Instance(id rcv, SEL _cmd, id __rollout_var_URL);
static void (*_rollout_storage_FXImageView_setImageWithContentsOfURL__Instance)(id rcv, SEL _cmd, id __rollout_var_URL);
void  _rollout_impl_FXImageView_setImageWithContentsOfURL__Instance(id rcv, SEL _cmd, id __rollout_var_URL){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_URL], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setImageWithContentsOfURL:" forClass:@"FXImageView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_FXImageView_setImageWithContentsOfURL__Instance(rcv, _cmd, __rollout_var_URL); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_FXImageView_setImageWithContentsOfURL__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_FXImageView_setImageWithContentsOfURL__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setImageWithContentsOfURL:" forClass:@"FXImageView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"FXImageView"), @selector(setImageWithContentsOfURL:),(IMP) _rollout_impl_FXImageView_setImageWithContentsOfURL__Instance, (IMP*)&_rollout_storage_FXImageView_setImageWithContentsOfURL__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setImageWithContentsOfURL:" forClass:@"FXImageView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_AppDelegate_application_didFinishLaunchingWithOptions__Instance(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_launchOptions);
static signed char (*_rollout_storage_AppDelegate_application_didFinishLaunchingWithOptions__Instance)(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_launchOptions);
signed char  _rollout_impl_AppDelegate_application_didFinishLaunchingWithOptions__Instance(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_launchOptions){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_application], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_launchOptions], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"application:didFinishLaunchingWithOptions:" forClass:@"AppDelegate"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_AppDelegate_application_didFinishLaunchingWithOptions__Instance(rcv, _cmd, __rollout_var_application, __rollout_var_launchOptions);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_AppDelegate_application_didFinishLaunchingWithOptions__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_AppDelegate_application_didFinishLaunchingWithOptions__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"application:didFinishLaunchingWithOptions:" forClass:@"AppDelegate"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AppDelegate"), @selector(application:didFinishLaunchingWithOptions:),(IMP) _rollout_impl_AppDelegate_application_didFinishLaunchingWithOptions__Instance, (IMP*)&_rollout_storage_AppDelegate_application_didFinishLaunchingWithOptions__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"application:didFinishLaunchingWithOptions:" forClass:@"AppDelegate"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AppDelegate_application_didRegisterForRemoteNotificationsWithDeviceToken__Instance(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_deviceToken);
static void (*_rollout_storage_AppDelegate_application_didRegisterForRemoteNotificationsWithDeviceToken__Instance)(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_deviceToken);
void  _rollout_impl_AppDelegate_application_didRegisterForRemoteNotificationsWithDeviceToken__Instance(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_deviceToken){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_application], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_deviceToken], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"application:didRegisterForRemoteNotificationsWithDeviceToken:" forClass:@"AppDelegate"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AppDelegate_application_didRegisterForRemoteNotificationsWithDeviceToken__Instance(rcv, _cmd, __rollout_var_application, __rollout_var_deviceToken); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AppDelegate_application_didRegisterForRemoteNotificationsWithDeviceToken__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AppDelegate_application_didRegisterForRemoteNotificationsWithDeviceToken__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"application:didRegisterForRemoteNotificationsWithDeviceToken:" forClass:@"AppDelegate"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AppDelegate"), @selector(application:didRegisterForRemoteNotificationsWithDeviceToken:),(IMP) _rollout_impl_AppDelegate_application_didRegisterForRemoteNotificationsWithDeviceToken__Instance, (IMP*)&_rollout_storage_AppDelegate_application_didRegisterForRemoteNotificationsWithDeviceToken__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"application:didRegisterForRemoteNotificationsWithDeviceToken:" forClass:@"AppDelegate"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AppDelegate_application_didReceiveRemoteNotification_fetchCompletionHandler__Instance(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_userInfo, id __rollout_var_completionHandler);
static void (*_rollout_storage_AppDelegate_application_didReceiveRemoteNotification_fetchCompletionHandler__Instance)(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_userInfo, id __rollout_var_completionHandler);
void  _rollout_impl_AppDelegate_application_didReceiveRemoteNotification_fetchCompletionHandler__Instance(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_userInfo, id __rollout_var_completionHandler){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_application], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_userInfo], 
     [[RolloutTypeWrapper alloc] initWithBlockPointer:__rollout_var_completionHandler], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"application:didReceiveRemoteNotification:fetchCompletionHandler:" forClass:@"AppDelegate"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AppDelegate_application_didReceiveRemoteNotification_fetchCompletionHandler__Instance(rcv, _cmd, __rollout_var_application, __rollout_var_userInfo, __rollout_var_completionHandler); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AppDelegate_application_didReceiveRemoteNotification_fetchCompletionHandler__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).blockPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AppDelegate_application_didReceiveRemoteNotification_fetchCompletionHandler__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).blockPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"application:didReceiveRemoteNotification:fetchCompletionHandler:" forClass:@"AppDelegate"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AppDelegate"), @selector(application:didReceiveRemoteNotification:fetchCompletionHandler:),(IMP) _rollout_impl_AppDelegate_application_didReceiveRemoteNotification_fetchCompletionHandler__Instance, (IMP*)&_rollout_storage_AppDelegate_application_didReceiveRemoteNotification_fetchCompletionHandler__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"application:didReceiveRemoteNotification:fetchCompletionHandler:" forClass:@"AppDelegate"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AppDelegate_application_didFailToRegisterForRemoteNotificationsWithError__Instance(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_error);
static void (*_rollout_storage_AppDelegate_application_didFailToRegisterForRemoteNotificationsWithError__Instance)(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_error);
void  _rollout_impl_AppDelegate_application_didFailToRegisterForRemoteNotificationsWithError__Instance(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_error){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_application], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_error], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"application:didFailToRegisterForRemoteNotificationsWithError:" forClass:@"AppDelegate"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AppDelegate_application_didFailToRegisterForRemoteNotificationsWithError__Instance(rcv, _cmd, __rollout_var_application, __rollout_var_error); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AppDelegate_application_didFailToRegisterForRemoteNotificationsWithError__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AppDelegate_application_didFailToRegisterForRemoteNotificationsWithError__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"application:didFailToRegisterForRemoteNotificationsWithError:" forClass:@"AppDelegate"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AppDelegate"), @selector(application:didFailToRegisterForRemoteNotificationsWithError:),(IMP) _rollout_impl_AppDelegate_application_didFailToRegisterForRemoteNotificationsWithError__Instance, (IMP*)&_rollout_storage_AppDelegate_application_didFailToRegisterForRemoteNotificationsWithError__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"application:didFailToRegisterForRemoteNotificationsWithError:" forClass:@"AppDelegate"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AppDelegate_application_didRegisterUserNotificationSettings__Instance(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_notificationSettings);
static void (*_rollout_storage_AppDelegate_application_didRegisterUserNotificationSettings__Instance)(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_notificationSettings);
void  _rollout_impl_AppDelegate_application_didRegisterUserNotificationSettings__Instance(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_notificationSettings){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_application], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_notificationSettings], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"application:didRegisterUserNotificationSettings:" forClass:@"AppDelegate"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AppDelegate_application_didRegisterUserNotificationSettings__Instance(rcv, _cmd, __rollout_var_application, __rollout_var_notificationSettings); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AppDelegate_application_didRegisterUserNotificationSettings__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AppDelegate_application_didRegisterUserNotificationSettings__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"application:didRegisterUserNotificationSettings:" forClass:@"AppDelegate"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AppDelegate"), @selector(application:didRegisterUserNotificationSettings:),(IMP) _rollout_impl_AppDelegate_application_didRegisterUserNotificationSettings__Instance, (IMP*)&_rollout_storage_AppDelegate_application_didRegisterUserNotificationSettings__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"application:didRegisterUserNotificationSettings:" forClass:@"AppDelegate"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AppDelegate_application_handleActionWithIdentifier_forRemoteNotification_completionHandler__Instance(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_identifier, id __rollout_var_userInfo, id __rollout_var_completionHandler);
static void (*_rollout_storage_AppDelegate_application_handleActionWithIdentifier_forRemoteNotification_completionHandler__Instance)(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_identifier, id __rollout_var_userInfo, id __rollout_var_completionHandler);
void  _rollout_impl_AppDelegate_application_handleActionWithIdentifier_forRemoteNotification_completionHandler__Instance(id rcv, SEL _cmd, id __rollout_var_application, id __rollout_var_identifier, id __rollout_var_userInfo, id __rollout_var_completionHandler){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_application], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_identifier], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_userInfo], 
     [[RolloutTypeWrapper alloc] initWithBlockPointer:__rollout_var_completionHandler], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"application:handleActionWithIdentifier:forRemoteNotification:completionHandler:" forClass:@"AppDelegate"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AppDelegate_application_handleActionWithIdentifier_forRemoteNotification_completionHandler__Instance(rcv, _cmd, __rollout_var_application, __rollout_var_identifier, __rollout_var_userInfo, __rollout_var_completionHandler); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AppDelegate_application_handleActionWithIdentifier_forRemoteNotification_completionHandler__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).blockPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AppDelegate_application_handleActionWithIdentifier_forRemoteNotification_completionHandler__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).blockPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"application:handleActionWithIdentifier:forRemoteNotification:completionHandler:" forClass:@"AppDelegate"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AppDelegate"), @selector(application:handleActionWithIdentifier:forRemoteNotification:completionHandler:),(IMP) _rollout_impl_AppDelegate_application_handleActionWithIdentifier_forRemoteNotification_completionHandler__Instance, (IMP*)&_rollout_storage_AppDelegate_application_handleActionWithIdentifier_forRemoteNotification_completionHandler__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"application:handleActionWithIdentifier:forRemoteNotification:completionHandler:" forClass:@"AppDelegate"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AppDelegate_applicationWillResignActive__Instance(id rcv, SEL _cmd, id __rollout_var_application);
static void (*_rollout_storage_AppDelegate_applicationWillResignActive__Instance)(id rcv, SEL _cmd, id __rollout_var_application);
void  _rollout_impl_AppDelegate_applicationWillResignActive__Instance(id rcv, SEL _cmd, id __rollout_var_application){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_application], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"applicationWillResignActive:" forClass:@"AppDelegate"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AppDelegate_applicationWillResignActive__Instance(rcv, _cmd, __rollout_var_application); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AppDelegate_applicationWillResignActive__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AppDelegate_applicationWillResignActive__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"applicationWillResignActive:" forClass:@"AppDelegate"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AppDelegate"), @selector(applicationWillResignActive:),(IMP) _rollout_impl_AppDelegate_applicationWillResignActive__Instance, (IMP*)&_rollout_storage_AppDelegate_applicationWillResignActive__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"applicationWillResignActive:" forClass:@"AppDelegate"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AppDelegate_applicationDidEnterBackground__Instance(id rcv, SEL _cmd, id __rollout_var_application);
static void (*_rollout_storage_AppDelegate_applicationDidEnterBackground__Instance)(id rcv, SEL _cmd, id __rollout_var_application);
void  _rollout_impl_AppDelegate_applicationDidEnterBackground__Instance(id rcv, SEL _cmd, id __rollout_var_application){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_application], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"applicationDidEnterBackground:" forClass:@"AppDelegate"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AppDelegate_applicationDidEnterBackground__Instance(rcv, _cmd, __rollout_var_application); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AppDelegate_applicationDidEnterBackground__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AppDelegate_applicationDidEnterBackground__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"applicationDidEnterBackground:" forClass:@"AppDelegate"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AppDelegate"), @selector(applicationDidEnterBackground:),(IMP) _rollout_impl_AppDelegate_applicationDidEnterBackground__Instance, (IMP*)&_rollout_storage_AppDelegate_applicationDidEnterBackground__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"applicationDidEnterBackground:" forClass:@"AppDelegate"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AppDelegate_applicationWillEnterForeground__Instance(id rcv, SEL _cmd, id __rollout_var_application);
static void (*_rollout_storage_AppDelegate_applicationWillEnterForeground__Instance)(id rcv, SEL _cmd, id __rollout_var_application);
void  _rollout_impl_AppDelegate_applicationWillEnterForeground__Instance(id rcv, SEL _cmd, id __rollout_var_application){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_application], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"applicationWillEnterForeground:" forClass:@"AppDelegate"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AppDelegate_applicationWillEnterForeground__Instance(rcv, _cmd, __rollout_var_application); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AppDelegate_applicationWillEnterForeground__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AppDelegate_applicationWillEnterForeground__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"applicationWillEnterForeground:" forClass:@"AppDelegate"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AppDelegate"), @selector(applicationWillEnterForeground:),(IMP) _rollout_impl_AppDelegate_applicationWillEnterForeground__Instance, (IMP*)&_rollout_storage_AppDelegate_applicationWillEnterForeground__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"applicationWillEnterForeground:" forClass:@"AppDelegate"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AppDelegate_applicationWillTerminate__Instance(id rcv, SEL _cmd, id __rollout_var_application);
static void (*_rollout_storage_AppDelegate_applicationWillTerminate__Instance)(id rcv, SEL _cmd, id __rollout_var_application);
void  _rollout_impl_AppDelegate_applicationWillTerminate__Instance(id rcv, SEL _cmd, id __rollout_var_application){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_application], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"applicationWillTerminate:" forClass:@"AppDelegate"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AppDelegate_applicationWillTerminate__Instance(rcv, _cmd, __rollout_var_application); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AppDelegate_applicationWillTerminate__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AppDelegate_applicationWillTerminate__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"applicationWillTerminate:" forClass:@"AppDelegate"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AppDelegate"), @selector(applicationWillTerminate:),(IMP) _rollout_impl_AppDelegate_applicationWillTerminate__Instance, (IMP*)&_rollout_storage_AppDelegate_applicationWillTerminate__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"applicationWillTerminate:" forClass:@"AppDelegate"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AppDelegate_awakeFromNib_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_AppDelegate_awakeFromNib_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_AppDelegate_awakeFromNib_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"awakeFromNib" forClass:@"AppDelegate"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AppDelegate_awakeFromNib_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AppDelegate_awakeFromNib_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AppDelegate_awakeFromNib_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"awakeFromNib" forClass:@"AppDelegate"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AppDelegate"), @selector(awakeFromNib),(IMP) _rollout_impl_AppDelegate_awakeFromNib_Instance, (IMP*)&_rollout_storage_AppDelegate_awakeFromNib_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"awakeFromNib" forClass:@"AppDelegate"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AppDelegate_updateTimer_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_AppDelegate_updateTimer_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_AppDelegate_updateTimer_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"updateTimer" forClass:@"AppDelegate"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AppDelegate_updateTimer_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AppDelegate_updateTimer_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AppDelegate_updateTimer_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"updateTimer" forClass:@"AppDelegate"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AppDelegate"), @selector(updateTimer),(IMP) _rollout_impl_AppDelegate_updateTimer_Instance, (IMP*)&_rollout_storage_AppDelegate_updateTimer_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"updateTimer" forClass:@"AppDelegate"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AppDelegate_customizeTheme_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_AppDelegate_customizeTheme_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_AppDelegate_customizeTheme_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"customizeTheme" forClass:@"AppDelegate"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AppDelegate_customizeTheme_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AppDelegate_customizeTheme_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AppDelegate_customizeTheme_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"customizeTheme" forClass:@"AppDelegate"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AppDelegate"), @selector(customizeTheme),(IMP) _rollout_impl_AppDelegate_customizeTheme_Instance, (IMP*)&_rollout_storage_AppDelegate_customizeTheme_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"customizeTheme" forClass:@"AppDelegate"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLButton_init_Instance(id rcv, SEL _cmd);
static id (*_rollout_storage_SCLButton_init_Instance)(id rcv, SEL _cmd);
id  _rollout_impl_SCLButton_init_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"init" forClass:@"SCLButton"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLButton_init_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLButton_init_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLButton_init_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"init" forClass:@"SCLButton"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLButton"), @selector(init),(IMP) _rollout_impl_SCLButton_init_Instance, (IMP*)&_rollout_storage_SCLButton_init_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"init" forClass:@"SCLButton"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLButton_initWithCoder__Instance(id rcv, SEL _cmd, id __rollout_var_aDecoder);
static id (*_rollout_storage_SCLButton_initWithCoder__Instance)(id rcv, SEL _cmd, id __rollout_var_aDecoder);
id  _rollout_impl_SCLButton_initWithCoder__Instance(id rcv, SEL _cmd, id __rollout_var_aDecoder){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_aDecoder], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithCoder:" forClass:@"SCLButton"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLButton_initWithCoder__Instance(rcv, _cmd, __rollout_var_aDecoder);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLButton_initWithCoder__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLButton_initWithCoder__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithCoder:" forClass:@"SCLButton"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLButton"), @selector(initWithCoder:),(IMP) _rollout_impl_SCLButton_initWithCoder__Instance, (IMP*)&_rollout_storage_SCLButton_initWithCoder__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithCoder:" forClass:@"SCLButton"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLButton_initWithFrame__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_frame);
static id (*_rollout_storage_SCLButton_initWithFrame__Instance)(id rcv, SEL _cmd, struct CGRect __rollout_var_frame);
id  _rollout_impl_SCLButton_initWithFrame__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_frame){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithRecordPointer:&__rollout_var_frame ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithFrame:" forClass:@"SCLButton"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLButton_initWithFrame__Instance(rcv, _cmd, __rollout_var_frame);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLButton_initWithFrame__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLButton_initWithFrame__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithFrame:" forClass:@"SCLButton"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLButton"), @selector(initWithFrame:),(IMP) _rollout_impl_SCLButton_initWithFrame__Instance, (IMP*)&_rollout_storage_SCLButton_initWithFrame__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithFrame:" forClass:@"SCLButton"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLButton_setHighlighted__Instance(id rcv, SEL _cmd, signed char __rollout_var_highlighted);
static void (*_rollout_storage_SCLButton_setHighlighted__Instance)(id rcv, SEL _cmd, signed char __rollout_var_highlighted);
void  _rollout_impl_SCLButton_setHighlighted__Instance(id rcv, SEL _cmd, signed char __rollout_var_highlighted){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_highlighted], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setHighlighted:" forClass:@"SCLButton"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLButton_setHighlighted__Instance(rcv, _cmd, __rollout_var_highlighted); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLButton_setHighlighted__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLButton_setHighlighted__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setHighlighted:" forClass:@"SCLButton"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLButton"), @selector(setHighlighted:),(IMP) _rollout_impl_SCLButton_setHighlighted__Instance, (IMP*)&_rollout_storage_SCLButton_setHighlighted__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setHighlighted:" forClass:@"SCLButton"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLButton_setDefaultBackgroundColor__Instance(id rcv, SEL _cmd, id __rollout_var_defaultBackgroundColor);
static void (*_rollout_storage_SCLButton_setDefaultBackgroundColor__Instance)(id rcv, SEL _cmd, id __rollout_var_defaultBackgroundColor);
void  _rollout_impl_SCLButton_setDefaultBackgroundColor__Instance(id rcv, SEL _cmd, id __rollout_var_defaultBackgroundColor){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_defaultBackgroundColor], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setDefaultBackgroundColor:" forClass:@"SCLButton"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLButton_setDefaultBackgroundColor__Instance(rcv, _cmd, __rollout_var_defaultBackgroundColor); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLButton_setDefaultBackgroundColor__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLButton_setDefaultBackgroundColor__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setDefaultBackgroundColor:" forClass:@"SCLButton"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLButton"), @selector(setDefaultBackgroundColor:),(IMP) _rollout_impl_SCLButton_setDefaultBackgroundColor__Instance, (IMP*)&_rollout_storage_SCLButton_setDefaultBackgroundColor__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setDefaultBackgroundColor:" forClass:@"SCLButton"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLButton_parseConfig__Instance(id rcv, SEL _cmd, id __rollout_var_buttonConfig);
static void (*_rollout_storage_SCLButton_parseConfig__Instance)(id rcv, SEL _cmd, id __rollout_var_buttonConfig);
void  _rollout_impl_SCLButton_parseConfig__Instance(id rcv, SEL _cmd, id __rollout_var_buttonConfig){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_buttonConfig], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"parseConfig:" forClass:@"SCLButton"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLButton_parseConfig__Instance(rcv, _cmd, __rollout_var_buttonConfig); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLButton_parseConfig__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLButton_parseConfig__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"parseConfig:" forClass:@"SCLButton"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLButton"), @selector(parseConfig:),(IMP) _rollout_impl_SCLButton_parseConfig__Instance, (IMP*)&_rollout_storage_SCLButton_parseConfig__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"parseConfig:" forClass:@"SCLButton"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLButton_darkerColorForColor__Instance(id rcv, SEL _cmd, id __rollout_var_color);
static id (*_rollout_storage_SCLButton_darkerColorForColor__Instance)(id rcv, SEL _cmd, id __rollout_var_color);
id  _rollout_impl_SCLButton_darkerColorForColor__Instance(id rcv, SEL _cmd, id __rollout_var_color){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_color], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"darkerColorForColor:" forClass:@"SCLButton"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLButton_darkerColorForColor__Instance(rcv, _cmd, __rollout_var_color);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLButton_darkerColorForColor__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLButton_darkerColorForColor__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"darkerColorForColor:" forClass:@"SCLButton"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLButton"), @selector(darkerColorForColor:),(IMP) _rollout_impl_SCLButton_darkerColorForColor__Instance, (IMP*)&_rollout_storage_SCLButton_darkerColorForColor__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"darkerColorForColor:" forClass:@"SCLButton"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLButton_lighterColorForColor__Instance(id rcv, SEL _cmd, id __rollout_var_color);
static id (*_rollout_storage_SCLButton_lighterColorForColor__Instance)(id rcv, SEL _cmd, id __rollout_var_color);
id  _rollout_impl_SCLButton_lighterColorForColor__Instance(id rcv, SEL _cmd, id __rollout_var_color){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_color], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"lighterColorForColor:" forClass:@"SCLButton"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLButton_lighterColorForColor__Instance(rcv, _cmd, __rollout_var_color);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLButton_lighterColorForColor__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLButton_lighterColorForColor__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"lighterColorForColor:" forClass:@"SCLButton"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLButton"), @selector(lighterColorForColor:),(IMP) _rollout_impl_SCLButton_lighterColorForColor__Instance, (IMP*)&_rollout_storage_SCLButton_lighterColorForColor__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"lighterColorForColor:" forClass:@"SCLButton"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_DBPrivateHelperController_helperForType__Class(id rcv, SEL _cmd, id __rollout_var_type);
static id (*_rollout_storage_DBPrivateHelperController_helperForType__Class)(id rcv, SEL _cmd, id __rollout_var_type);
id  _rollout_impl_DBPrivateHelperController_helperForType__Class(id rcv, SEL _cmd, id __rollout_var_type){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_type], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"helperForType:" forClass:@"DBPrivateHelperController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DBPrivateHelperController_helperForType__Class(rcv, _cmd, __rollout_var_type);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DBPrivateHelperController_helperForType__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DBPrivateHelperController_helperForType__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"helperForType:" forClass:@"DBPrivateHelperController"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"DBPrivateHelperController"), @selector(helperForType:),(IMP) _rollout_impl_DBPrivateHelperController_helperForType__Class, (IMP*)&_rollout_storage_DBPrivateHelperController_helperForType__Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"helperForType:" forClass:@"DBPrivateHelperController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_DBPrivateHelperController_initWithPrivacyType__Instance(id rcv, SEL _cmd, id __rollout_var_type);
static id (*_rollout_storage_DBPrivateHelperController_initWithPrivacyType__Instance)(id rcv, SEL _cmd, id __rollout_var_type);
id  _rollout_impl_DBPrivateHelperController_initWithPrivacyType__Instance(id rcv, SEL _cmd, id __rollout_var_type){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_type], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithPrivacyType:" forClass:@"DBPrivateHelperController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DBPrivateHelperController_initWithPrivacyType__Instance(rcv, _cmd, __rollout_var_type);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DBPrivateHelperController_initWithPrivacyType__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DBPrivateHelperController_initWithPrivacyType__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithPrivacyType:" forClass:@"DBPrivateHelperController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperController"), @selector(initWithPrivacyType:),(IMP) _rollout_impl_DBPrivateHelperController_initWithPrivacyType__Instance, (IMP*)&_rollout_storage_DBPrivateHelperController_initWithPrivacyType__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithPrivacyType:" forClass:@"DBPrivateHelperController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_DBPrivateHelperController_viewDidLoad_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_DBPrivateHelperController_viewDidLoad_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_DBPrivateHelperController_viewDidLoad_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewDidLoad" forClass:@"DBPrivateHelperController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_DBPrivateHelperController_viewDidLoad_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_DBPrivateHelperController_viewDidLoad_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_DBPrivateHelperController_viewDidLoad_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewDidLoad" forClass:@"DBPrivateHelperController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperController"), @selector(viewDidLoad),(IMP) _rollout_impl_DBPrivateHelperController_viewDidLoad_Instance, (IMP*)&_rollout_storage_DBPrivateHelperController_viewDidLoad_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewDidLoad" forClass:@"DBPrivateHelperController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_DBPrivateHelperController_dismissHelper__Instance(id rcv, SEL _cmd, id __rollout_var_button);
static void (*_rollout_storage_DBPrivateHelperController_dismissHelper__Instance)(id rcv, SEL _cmd, id __rollout_var_button);
void  _rollout_impl_DBPrivateHelperController_dismissHelper__Instance(id rcv, SEL _cmd, id __rollout_var_button){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_button], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"dismissHelper:" forClass:@"DBPrivateHelperController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_DBPrivateHelperController_dismissHelper__Instance(rcv, _cmd, __rollout_var_button); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_DBPrivateHelperController_dismissHelper__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_DBPrivateHelperController_dismissHelper__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"dismissHelper:" forClass:@"DBPrivateHelperController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperController"), @selector(dismissHelper:),(IMP) _rollout_impl_DBPrivateHelperController_dismissHelper__Instance, (IMP*)&_rollout_storage_DBPrivateHelperController_dismissHelper__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"dismissHelper:" forClass:@"DBPrivateHelperController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_DBPrivateHelperController_viewWillAppear__Instance(id rcv, SEL _cmd, signed char __rollout_var_animated);
static void (*_rollout_storage_DBPrivateHelperController_viewWillAppear__Instance)(id rcv, SEL _cmd, signed char __rollout_var_animated);
void  _rollout_impl_DBPrivateHelperController_viewWillAppear__Instance(id rcv, SEL _cmd, signed char __rollout_var_animated){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_animated], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewWillAppear:" forClass:@"DBPrivateHelperController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_DBPrivateHelperController_viewWillAppear__Instance(rcv, _cmd, __rollout_var_animated); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_DBPrivateHelperController_viewWillAppear__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_DBPrivateHelperController_viewWillAppear__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewWillAppear:" forClass:@"DBPrivateHelperController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperController"), @selector(viewWillAppear:),(IMP) _rollout_impl_DBPrivateHelperController_viewWillAppear__Instance, (IMP*)&_rollout_storage_DBPrivateHelperController_viewWillAppear__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewWillAppear:" forClass:@"DBPrivateHelperController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_DBPrivateHelperController_viewDidDisappear__Instance(id rcv, SEL _cmd, signed char __rollout_var_animated);
static void (*_rollout_storage_DBPrivateHelperController_viewDidDisappear__Instance)(id rcv, SEL _cmd, signed char __rollout_var_animated);
void  _rollout_impl_DBPrivateHelperController_viewDidDisappear__Instance(id rcv, SEL _cmd, signed char __rollout_var_animated){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_animated], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewDidDisappear:" forClass:@"DBPrivateHelperController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_DBPrivateHelperController_viewDidDisappear__Instance(rcv, _cmd, __rollout_var_animated); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_DBPrivateHelperController_viewDidDisappear__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_DBPrivateHelperController_viewDidDisappear__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewDidDisappear:" forClass:@"DBPrivateHelperController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperController"), @selector(viewDidDisappear:),(IMP) _rollout_impl_DBPrivateHelperController_viewDidDisappear__Instance, (IMP*)&_rollout_storage_DBPrivateHelperController_viewDidDisappear__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewDidDisappear:" forClass:@"DBPrivateHelperController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_DBPrivateHelperController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_DBPrivateHelperController_didReceiveMemoryWarning_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_DBPrivateHelperController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"didReceiveMemoryWarning" forClass:@"DBPrivateHelperController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_DBPrivateHelperController_didReceiveMemoryWarning_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_DBPrivateHelperController_didReceiveMemoryWarning_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_DBPrivateHelperController_didReceiveMemoryWarning_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"DBPrivateHelperController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperController"), @selector(didReceiveMemoryWarning),(IMP) _rollout_impl_DBPrivateHelperController_didReceiveMemoryWarning_Instance, (IMP*)&_rollout_storage_DBPrivateHelperController_didReceiveMemoryWarning_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"DBPrivateHelperController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static float  _rollout_impl_DBPrivateHelperController_cellHeightForText__Instance(id rcv, SEL _cmd, id __rollout_var_text);
static float (*_rollout_storage_DBPrivateHelperController_cellHeightForText__Instance)(id rcv, SEL _cmd, id __rollout_var_text);
float  _rollout_impl_DBPrivateHelperController_cellHeightForText__Instance(id rcv, SEL _cmd, id __rollout_var_text){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_text], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"cellHeightForText:" forClass:@"DBPrivateHelperController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DBPrivateHelperController_cellHeightForText__Instance(rcv, _cmd, __rollout_var_text);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithFloat:_rollout_storage_DBPrivateHelperController_cellHeightForText__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithFloat:_rollout_storage_DBPrivateHelperController_cellHeightForText__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.floatValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"cellHeightForText:" forClass:@"DBPrivateHelperController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperController"), @selector(cellHeightForText:),(IMP) _rollout_impl_DBPrivateHelperController_cellHeightForText__Instance, (IMP*)&_rollout_storage_DBPrivateHelperController_cellHeightForText__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"cellHeightForText:" forClass:@"DBPrivateHelperController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static int  _rollout_impl_DBPrivateHelperController_tableView_numberOfRowsInSection__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section);
static int (*_rollout_storage_DBPrivateHelperController_tableView_numberOfRowsInSection__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section);
int  _rollout_impl_DBPrivateHelperController_tableView_numberOfRowsInSection__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithInt:__rollout_var_section], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:numberOfRowsInSection:" forClass:@"DBPrivateHelperController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DBPrivateHelperController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_section);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:_rollout_storage_DBPrivateHelperController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:_rollout_storage_DBPrivateHelperController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.intValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:numberOfRowsInSection:" forClass:@"DBPrivateHelperController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperController"), @selector(tableView:numberOfRowsInSection:),(IMP) _rollout_impl_DBPrivateHelperController_tableView_numberOfRowsInSection__Instance, (IMP*)&_rollout_storage_DBPrivateHelperController_tableView_numberOfRowsInSection__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:numberOfRowsInSection:" forClass:@"DBPrivateHelperController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_DBPrivateHelperController_tableView_cellForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
static id (*_rollout_storage_DBPrivateHelperController_tableView_cellForRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
id  _rollout_impl_DBPrivateHelperController_tableView_cellForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:cellForRowAtIndexPath:" forClass:@"DBPrivateHelperController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DBPrivateHelperController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_indexPath);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DBPrivateHelperController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DBPrivateHelperController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:cellForRowAtIndexPath:" forClass:@"DBPrivateHelperController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperController"), @selector(tableView:cellForRowAtIndexPath:),(IMP) _rollout_impl_DBPrivateHelperController_tableView_cellForRowAtIndexPath__Instance, (IMP*)&_rollout_storage_DBPrivateHelperController_tableView_cellForRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:cellForRowAtIndexPath:" forClass:@"DBPrivateHelperController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static float  _rollout_impl_DBPrivateHelperController_tableView_heightForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
static float (*_rollout_storage_DBPrivateHelperController_tableView_heightForRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
float  _rollout_impl_DBPrivateHelperController_tableView_heightForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:heightForRowAtIndexPath:" forClass:@"DBPrivateHelperController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DBPrivateHelperController_tableView_heightForRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_indexPath);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithFloat:_rollout_storage_DBPrivateHelperController_tableView_heightForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithFloat:_rollout_storage_DBPrivateHelperController_tableView_heightForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.floatValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:heightForRowAtIndexPath:" forClass:@"DBPrivateHelperController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperController"), @selector(tableView:heightForRowAtIndexPath:),(IMP) _rollout_impl_DBPrivateHelperController_tableView_heightForRowAtIndexPath__Instance, (IMP*)&_rollout_storage_DBPrivateHelperController_tableView_heightForRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:heightForRowAtIndexPath:" forClass:@"DBPrivateHelperController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static __rollout_enum  _rollout_impl_DBPrivateHelperController_preferredStatusBarStyle_Instance(id rcv, SEL _cmd);
static __rollout_enum (*_rollout_storage_DBPrivateHelperController_preferredStatusBarStyle_Instance)(id rcv, SEL _cmd);
__rollout_enum  _rollout_impl_DBPrivateHelperController_preferredStatusBarStyle_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"preferredStatusBarStyle" forClass:@"DBPrivateHelperController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DBPrivateHelperController_preferredStatusBarStyle_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:_rollout_storage_DBPrivateHelperController_preferredStatusBarStyle_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:_rollout_storage_DBPrivateHelperController_preferredStatusBarStyle_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.enumValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"preferredStatusBarStyle" forClass:@"DBPrivateHelperController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperController"), @selector(preferredStatusBarStyle),(IMP) _rollout_impl_DBPrivateHelperController_preferredStatusBarStyle_Instance, (IMP*)&_rollout_storage_DBPrivateHelperController_preferredStatusBarStyle_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"preferredStatusBarStyle" forClass:@"DBPrivateHelperController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_DBPrivateHelperController_shouldAutorotate_Instance(id rcv, SEL _cmd);
static signed char (*_rollout_storage_DBPrivateHelperController_shouldAutorotate_Instance)(id rcv, SEL _cmd);
signed char  _rollout_impl_DBPrivateHelperController_shouldAutorotate_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"shouldAutorotate" forClass:@"DBPrivateHelperController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DBPrivateHelperController_shouldAutorotate_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_DBPrivateHelperController_shouldAutorotate_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_DBPrivateHelperController_shouldAutorotate_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"shouldAutorotate" forClass:@"DBPrivateHelperController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperController"), @selector(shouldAutorotate),(IMP) _rollout_impl_DBPrivateHelperController_shouldAutorotate_Instance, (IMP*)&_rollout_storage_DBPrivateHelperController_shouldAutorotate_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"shouldAutorotate" forClass:@"DBPrivateHelperController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static unsigned int  _rollout_impl_DBPrivateHelperController_supportedInterfaceOrientations_Instance(id rcv, SEL _cmd);
static unsigned int (*_rollout_storage_DBPrivateHelperController_supportedInterfaceOrientations_Instance)(id rcv, SEL _cmd);
unsigned int  _rollout_impl_DBPrivateHelperController_supportedInterfaceOrientations_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"supportedInterfaceOrientations" forClass:@"DBPrivateHelperController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DBPrivateHelperController_supportedInterfaceOrientations_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithUInt:_rollout_storage_DBPrivateHelperController_supportedInterfaceOrientations_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithUInt:_rollout_storage_DBPrivateHelperController_supportedInterfaceOrientations_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.uIntValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"supportedInterfaceOrientations" forClass:@"DBPrivateHelperController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperController"), @selector(supportedInterfaceOrientations),(IMP) _rollout_impl_DBPrivateHelperController_supportedInterfaceOrientations_Instance, (IMP*)&_rollout_storage_DBPrivateHelperController_supportedInterfaceOrientations_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"supportedInterfaceOrientations" forClass:@"DBPrivateHelperController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_DeviceViewController_viewDidLoad_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_DeviceViewController_viewDidLoad_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_DeviceViewController_viewDidLoad_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewDidLoad" forClass:@"DeviceViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_DeviceViewController_viewDidLoad_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_DeviceViewController_viewDidLoad_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_DeviceViewController_viewDidLoad_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewDidLoad" forClass:@"DeviceViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DeviceViewController"), @selector(viewDidLoad),(IMP) _rollout_impl_DeviceViewController_viewDidLoad_Instance, (IMP*)&_rollout_storage_DeviceViewController_viewDidLoad_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewDidLoad" forClass:@"DeviceViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_DeviceViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_DeviceViewController_didReceiveMemoryWarning_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_DeviceViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"didReceiveMemoryWarning" forClass:@"DeviceViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_DeviceViewController_didReceiveMemoryWarning_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_DeviceViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_DeviceViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"DeviceViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DeviceViewController"), @selector(didReceiveMemoryWarning),(IMP) _rollout_impl_DeviceViewController_didReceiveMemoryWarning_Instance, (IMP*)&_rollout_storage_DeviceViewController_didReceiveMemoryWarning_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"DeviceViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static int  _rollout_impl_DeviceViewController_tableView_numberOfRowsInSection__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section);
static int (*_rollout_storage_DeviceViewController_tableView_numberOfRowsInSection__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section);
int  _rollout_impl_DeviceViewController_tableView_numberOfRowsInSection__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithInt:__rollout_var_section], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:numberOfRowsInSection:" forClass:@"DeviceViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DeviceViewController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_section);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:_rollout_storage_DeviceViewController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:_rollout_storage_DeviceViewController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.intValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:numberOfRowsInSection:" forClass:@"DeviceViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DeviceViewController"), @selector(tableView:numberOfRowsInSection:),(IMP) _rollout_impl_DeviceViewController_tableView_numberOfRowsInSection__Instance, (IMP*)&_rollout_storage_DeviceViewController_tableView_numberOfRowsInSection__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:numberOfRowsInSection:" forClass:@"DeviceViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static float  _rollout_impl_DeviceViewController_tableView_heightForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
static float (*_rollout_storage_DeviceViewController_tableView_heightForRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
float  _rollout_impl_DeviceViewController_tableView_heightForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:heightForRowAtIndexPath:" forClass:@"DeviceViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DeviceViewController_tableView_heightForRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_indexPath);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithFloat:_rollout_storage_DeviceViewController_tableView_heightForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithFloat:_rollout_storage_DeviceViewController_tableView_heightForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.floatValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:heightForRowAtIndexPath:" forClass:@"DeviceViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DeviceViewController"), @selector(tableView:heightForRowAtIndexPath:),(IMP) _rollout_impl_DeviceViewController_tableView_heightForRowAtIndexPath__Instance, (IMP*)&_rollout_storage_DeviceViewController_tableView_heightForRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:heightForRowAtIndexPath:" forClass:@"DeviceViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_DeviceViewController_cellBackgroundForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_indexPath);
static id (*_rollout_storage_DeviceViewController_cellBackgroundForRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_indexPath);
id  _rollout_impl_DeviceViewController_cellBackgroundForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_indexPath){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"cellBackgroundForRowAtIndexPath:" forClass:@"DeviceViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DeviceViewController_cellBackgroundForRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_indexPath);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DeviceViewController_cellBackgroundForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DeviceViewController_cellBackgroundForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"cellBackgroundForRowAtIndexPath:" forClass:@"DeviceViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DeviceViewController"), @selector(cellBackgroundForRowAtIndexPath:),(IMP) _rollout_impl_DeviceViewController_cellBackgroundForRowAtIndexPath__Instance, (IMP*)&_rollout_storage_DeviceViewController_cellBackgroundForRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"cellBackgroundForRowAtIndexPath:" forClass:@"DeviceViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_DeviceViewController_tableView_cellForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
static id (*_rollout_storage_DeviceViewController_tableView_cellForRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
id  _rollout_impl_DeviceViewController_tableView_cellForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:cellForRowAtIndexPath:" forClass:@"DeviceViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DeviceViewController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_indexPath);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DeviceViewController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DeviceViewController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:cellForRowAtIndexPath:" forClass:@"DeviceViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DeviceViewController"), @selector(tableView:cellForRowAtIndexPath:),(IMP) _rollout_impl_DeviceViewController_tableView_cellForRowAtIndexPath__Instance, (IMP*)&_rollout_storage_DeviceViewController_tableView_cellForRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:cellForRowAtIndexPath:" forClass:@"DeviceViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_DeviceViewController_message__Instance(id rcv, SEL _cmd, id __rollout_var_sender);
static void (*_rollout_storage_DeviceViewController_message__Instance)(id rcv, SEL _cmd, id __rollout_var_sender);
void  _rollout_impl_DeviceViewController_message__Instance(id rcv, SEL _cmd, id __rollout_var_sender){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_sender], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"message:" forClass:@"DeviceViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_DeviceViewController_message__Instance(rcv, _cmd, __rollout_var_sender); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_DeviceViewController_message__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_DeviceViewController_message__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"message:" forClass:@"DeviceViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DeviceViewController"), @selector(message:),(IMP) _rollout_impl_DeviceViewController_message__Instance, (IMP*)&_rollout_storage_DeviceViewController_message__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"message:" forClass:@"DeviceViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_DeviceViewController_messageComposeViewController_didFinishWithResult__Instance(id rcv, SEL _cmd, id __rollout_var_controller, __rollout_enum __rollout_var_result);
static void (*_rollout_storage_DeviceViewController_messageComposeViewController_didFinishWithResult__Instance)(id rcv, SEL _cmd, id __rollout_var_controller, __rollout_enum __rollout_var_result);
void  _rollout_impl_DeviceViewController_messageComposeViewController_didFinishWithResult__Instance(id rcv, SEL _cmd, id __rollout_var_controller, __rollout_enum __rollout_var_result){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_controller], 
     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_result], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"messageComposeViewController:didFinishWithResult:" forClass:@"DeviceViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_DeviceViewController_messageComposeViewController_didFinishWithResult__Instance(rcv, _cmd, __rollout_var_controller, __rollout_var_result); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_DeviceViewController_messageComposeViewController_didFinishWithResult__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).enumValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_DeviceViewController_messageComposeViewController_didFinishWithResult__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).enumValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"messageComposeViewController:didFinishWithResult:" forClass:@"DeviceViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DeviceViewController"), @selector(messageComposeViewController:didFinishWithResult:),(IMP) _rollout_impl_DeviceViewController_messageComposeViewController_didFinishWithResult__Instance, (IMP*)&_rollout_storage_DeviceViewController_messageComposeViewController_didFinishWithResult__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"messageComposeViewController:didFinishWithResult:" forClass:@"DeviceViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_DeviceViewController_prepareForSegue_sender__Instance(id rcv, SEL _cmd, id __rollout_var_segue, id __rollout_var_sender);
static void (*_rollout_storage_DeviceViewController_prepareForSegue_sender__Instance)(id rcv, SEL _cmd, id __rollout_var_segue, id __rollout_var_sender);
void  _rollout_impl_DeviceViewController_prepareForSegue_sender__Instance(id rcv, SEL _cmd, id __rollout_var_segue, id __rollout_var_sender){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_segue], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_sender], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"prepareForSegue:sender:" forClass:@"DeviceViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_DeviceViewController_prepareForSegue_sender__Instance(rcv, _cmd, __rollout_var_segue, __rollout_var_sender); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_DeviceViewController_prepareForSegue_sender__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_DeviceViewController_prepareForSegue_sender__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"prepareForSegue:sender:" forClass:@"DeviceViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DeviceViewController"), @selector(prepareForSegue:sender:),(IMP) _rollout_impl_DeviceViewController_prepareForSegue_sender__Instance, (IMP*)&_rollout_storage_DeviceViewController_prepareForSegue_sender__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"prepareForSegue:sender:" forClass:@"DeviceViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_CustomSegue_perform_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_CustomSegue_perform_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_CustomSegue_perform_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"perform" forClass:@"CustomSegue"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_CustomSegue_perform_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_CustomSegue_perform_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_CustomSegue_perform_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"perform" forClass:@"CustomSegue"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"CustomSegue"), @selector(perform),(IMP) _rollout_impl_CustomSegue_perform_Instance, (IMP*)&_rollout_storage_CustomSegue_perform_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"perform" forClass:@"CustomSegue"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_CustomSegue_finishedFadeOut_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_CustomSegue_finishedFadeOut_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_CustomSegue_finishedFadeOut_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"finishedFadeOut" forClass:@"CustomSegue"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_CustomSegue_finishedFadeOut_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_CustomSegue_finishedFadeOut_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_CustomSegue_finishedFadeOut_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"finishedFadeOut" forClass:@"CustomSegue"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"CustomSegue"), @selector(finishedFadeOut),(IMP) _rollout_impl_CustomSegue_finishedFadeOut_Instance, (IMP*)&_rollout_storage_CustomSegue_finishedFadeOut_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"finishedFadeOut" forClass:@"CustomSegue"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_CustomSegue_finishedFadeIn_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_CustomSegue_finishedFadeIn_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_CustomSegue_finishedFadeIn_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"finishedFadeIn" forClass:@"CustomSegue"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_CustomSegue_finishedFadeIn_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_CustomSegue_finishedFadeIn_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_CustomSegue_finishedFadeIn_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"finishedFadeIn" forClass:@"CustomSegue"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"CustomSegue"), @selector(finishedFadeIn),(IMP) _rollout_impl_CustomSegue_finishedFadeIn_Instance, (IMP*)&_rollout_storage_CustomSegue_finishedFadeIn_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"finishedFadeIn" forClass:@"CustomSegue"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertView_initWithCoder__Instance(id rcv, SEL _cmd, id __rollout_var_aDecoder);
static id (*_rollout_storage_SCLAlertView_initWithCoder__Instance)(id rcv, SEL _cmd, id __rollout_var_aDecoder);
id  _rollout_impl_SCLAlertView_initWithCoder__Instance(id rcv, SEL _cmd, id __rollout_var_aDecoder){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_aDecoder], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithCoder:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertView_initWithCoder__Instance(rcv, _cmd, __rollout_var_aDecoder);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_initWithCoder__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_initWithCoder__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithCoder:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(initWithCoder:),(IMP) _rollout_impl_SCLAlertView_initWithCoder__Instance, (IMP*)&_rollout_storage_SCLAlertView_initWithCoder__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithCoder:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertView_init_Instance(id rcv, SEL _cmd);
static id (*_rollout_storage_SCLAlertView_init_Instance)(id rcv, SEL _cmd);
id  _rollout_impl_SCLAlertView_init_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"init" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertView_init_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_init_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_init_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"init" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(init),(IMP) _rollout_impl_SCLAlertView_init_Instance, (IMP*)&_rollout_storage_SCLAlertView_init_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"init" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_addObservers_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_addObservers_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_addObservers_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"addObservers" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_addObservers_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_addObservers_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_addObservers_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"addObservers" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(addObservers),(IMP) _rollout_impl_SCLAlertView_addObservers_Instance, (IMP*)&_rollout_storage_SCLAlertView_addObservers_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"addObservers" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_removeObservers_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_removeObservers_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_removeObservers_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"removeObservers" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_removeObservers_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_removeObservers_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_removeObservers_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"removeObservers" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(removeObservers),(IMP) _rollout_impl_SCLAlertView_removeObservers_Instance, (IMP*)&_rollout_storage_SCLAlertView_removeObservers_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"removeObservers" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_viewWillLayoutSubviews_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_viewWillLayoutSubviews_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_viewWillLayoutSubviews_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewWillLayoutSubviews" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_viewWillLayoutSubviews_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_viewWillLayoutSubviews_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_viewWillLayoutSubviews_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewWillLayoutSubviews" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(viewWillLayoutSubviews),(IMP) _rollout_impl_SCLAlertView_viewWillLayoutSubviews_Instance, (IMP*)&_rollout_storage_SCLAlertView_viewWillLayoutSubviews_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewWillLayoutSubviews" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_handleTap__Instance(id rcv, SEL _cmd, id __rollout_var_gesture);
static void (*_rollout_storage_SCLAlertView_handleTap__Instance)(id rcv, SEL _cmd, id __rollout_var_gesture);
void  _rollout_impl_SCLAlertView_handleTap__Instance(id rcv, SEL _cmd, id __rollout_var_gesture){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_gesture], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"handleTap:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_handleTap__Instance(rcv, _cmd, __rollout_var_gesture); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_handleTap__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_handleTap__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"handleTap:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(handleTap:),(IMP) _rollout_impl_SCLAlertView_handleTap__Instance, (IMP*)&_rollout_storage_SCLAlertView_handleTap__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"handleTap:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_setShouldDismissOnTapOutside__Instance(id rcv, SEL _cmd, signed char __rollout_var_shouldDismissOnTapOutside);
static void (*_rollout_storage_SCLAlertView_setShouldDismissOnTapOutside__Instance)(id rcv, SEL _cmd, signed char __rollout_var_shouldDismissOnTapOutside);
void  _rollout_impl_SCLAlertView_setShouldDismissOnTapOutside__Instance(id rcv, SEL _cmd, signed char __rollout_var_shouldDismissOnTapOutside){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_shouldDismissOnTapOutside], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setShouldDismissOnTapOutside:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_setShouldDismissOnTapOutside__Instance(rcv, _cmd, __rollout_var_shouldDismissOnTapOutside); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_setShouldDismissOnTapOutside__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_setShouldDismissOnTapOutside__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setShouldDismissOnTapOutside:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(setShouldDismissOnTapOutside:),(IMP) _rollout_impl_SCLAlertView_setShouldDismissOnTapOutside__Instance, (IMP*)&_rollout_storage_SCLAlertView_setShouldDismissOnTapOutside__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setShouldDismissOnTapOutside:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_setSoundURL__Instance(id rcv, SEL _cmd, id __rollout_var_soundURL);
static void (*_rollout_storage_SCLAlertView_setSoundURL__Instance)(id rcv, SEL _cmd, id __rollout_var_soundURL);
void  _rollout_impl_SCLAlertView_setSoundURL__Instance(id rcv, SEL _cmd, id __rollout_var_soundURL){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_soundURL], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setSoundURL:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_setSoundURL__Instance(rcv, _cmd, __rollout_var_soundURL); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_setSoundURL__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_setSoundURL__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setSoundURL:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(setSoundURL:),(IMP) _rollout_impl_SCLAlertView_setSoundURL__Instance, (IMP*)&_rollout_storage_SCLAlertView_setSoundURL__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setSoundURL:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertView_addTextField__Instance(id rcv, SEL _cmd, id __rollout_var_title);
static id (*_rollout_storage_SCLAlertView_addTextField__Instance)(id rcv, SEL _cmd, id __rollout_var_title);
id  _rollout_impl_SCLAlertView_addTextField__Instance(id rcv, SEL _cmd, id __rollout_var_title){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"addTextField:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertView_addTextField__Instance(rcv, _cmd, __rollout_var_title);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_addTextField__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_addTextField__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"addTextField:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(addTextField:),(IMP) _rollout_impl_SCLAlertView_addTextField__Instance, (IMP*)&_rollout_storage_SCLAlertView_addTextField__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"addTextField:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_SCLAlertView_textFieldShouldReturn__Instance(id rcv, SEL _cmd, id __rollout_var_textField);
static signed char (*_rollout_storage_SCLAlertView_textFieldShouldReturn__Instance)(id rcv, SEL _cmd, id __rollout_var_textField);
signed char  _rollout_impl_SCLAlertView_textFieldShouldReturn__Instance(id rcv, SEL _cmd, id __rollout_var_textField){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_textField], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"textFieldShouldReturn:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertView_textFieldShouldReturn__Instance(rcv, _cmd, __rollout_var_textField);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SCLAlertView_textFieldShouldReturn__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SCLAlertView_textFieldShouldReturn__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"textFieldShouldReturn:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(textFieldShouldReturn:),(IMP) _rollout_impl_SCLAlertView_textFieldShouldReturn__Instance, (IMP*)&_rollout_storage_SCLAlertView_textFieldShouldReturn__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"textFieldShouldReturn:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_keyboardDidShow__Instance(id rcv, SEL _cmd, id __rollout_var_notification);
static void (*_rollout_storage_SCLAlertView_keyboardDidShow__Instance)(id rcv, SEL _cmd, id __rollout_var_notification);
void  _rollout_impl_SCLAlertView_keyboardDidShow__Instance(id rcv, SEL _cmd, id __rollout_var_notification){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_notification], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"keyboardDidShow:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_keyboardDidShow__Instance(rcv, _cmd, __rollout_var_notification); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_keyboardDidShow__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_keyboardDidShow__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"keyboardDidShow:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(keyboardDidShow:),(IMP) _rollout_impl_SCLAlertView_keyboardDidShow__Instance, (IMP*)&_rollout_storage_SCLAlertView_keyboardDidShow__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"keyboardDidShow:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_keyboardDidHide__Instance(id rcv, SEL _cmd, id __rollout_var_notification);
static void (*_rollout_storage_SCLAlertView_keyboardDidHide__Instance)(id rcv, SEL _cmd, id __rollout_var_notification);
void  _rollout_impl_SCLAlertView_keyboardDidHide__Instance(id rcv, SEL _cmd, id __rollout_var_notification){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_notification], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"keyboardDidHide:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_keyboardDidHide__Instance(rcv, _cmd, __rollout_var_notification); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_keyboardDidHide__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_keyboardDidHide__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"keyboardDidHide:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(keyboardDidHide:),(IMP) _rollout_impl_SCLAlertView_keyboardDidHide__Instance, (IMP*)&_rollout_storage_SCLAlertView_keyboardDidHide__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"keyboardDidHide:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertView_addButton__Instance(id rcv, SEL _cmd, id __rollout_var_title);
static id (*_rollout_storage_SCLAlertView_addButton__Instance)(id rcv, SEL _cmd, id __rollout_var_title);
id  _rollout_impl_SCLAlertView_addButton__Instance(id rcv, SEL _cmd, id __rollout_var_title){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"addButton:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertView_addButton__Instance(rcv, _cmd, __rollout_var_title);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_addButton__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_addButton__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"addButton:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(addButton:),(IMP) _rollout_impl_SCLAlertView_addButton__Instance, (IMP*)&_rollout_storage_SCLAlertView_addButton__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"addButton:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertView_addDoneButtonWithTitle__Instance(id rcv, SEL _cmd, id __rollout_var_title);
static id (*_rollout_storage_SCLAlertView_addDoneButtonWithTitle__Instance)(id rcv, SEL _cmd, id __rollout_var_title);
id  _rollout_impl_SCLAlertView_addDoneButtonWithTitle__Instance(id rcv, SEL _cmd, id __rollout_var_title){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"addDoneButtonWithTitle:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertView_addDoneButtonWithTitle__Instance(rcv, _cmd, __rollout_var_title);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_addDoneButtonWithTitle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_addDoneButtonWithTitle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"addDoneButtonWithTitle:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(addDoneButtonWithTitle:),(IMP) _rollout_impl_SCLAlertView_addDoneButtonWithTitle__Instance, (IMP*)&_rollout_storage_SCLAlertView_addDoneButtonWithTitle__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"addDoneButtonWithTitle:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertView_addButton_actionBlock__Instance(id rcv, SEL _cmd, id __rollout_var_title, id __rollout_var_action);
static id (*_rollout_storage_SCLAlertView_addButton_actionBlock__Instance)(id rcv, SEL _cmd, id __rollout_var_title, id __rollout_var_action);
id  _rollout_impl_SCLAlertView_addButton_actionBlock__Instance(id rcv, SEL _cmd, id __rollout_var_title, id __rollout_var_action){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
     [[RolloutTypeWrapper alloc] initWithBlockPointer:__rollout_var_action], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"addButton:actionBlock:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertView_addButton_actionBlock__Instance(rcv, _cmd, __rollout_var_title, __rollout_var_action);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_addButton_actionBlock__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).blockPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_addButton_actionBlock__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).blockPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"addButton:actionBlock:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(addButton:actionBlock:),(IMP) _rollout_impl_SCLAlertView_addButton_actionBlock__Instance, (IMP*)&_rollout_storage_SCLAlertView_addButton_actionBlock__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"addButton:actionBlock:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertView_addButton_validationBlock_actionBlock__Instance(id rcv, SEL _cmd, id __rollout_var_title, id __rollout_var_validationBlock, id __rollout_var_action);
static id (*_rollout_storage_SCLAlertView_addButton_validationBlock_actionBlock__Instance)(id rcv, SEL _cmd, id __rollout_var_title, id __rollout_var_validationBlock, id __rollout_var_action);
id  _rollout_impl_SCLAlertView_addButton_validationBlock_actionBlock__Instance(id rcv, SEL _cmd, id __rollout_var_title, id __rollout_var_validationBlock, id __rollout_var_action){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
     [[RolloutTypeWrapper alloc] initWithBlockPointer:__rollout_var_validationBlock], 
     [[RolloutTypeWrapper alloc] initWithBlockPointer:__rollout_var_action], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"addButton:validationBlock:actionBlock:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertView_addButton_validationBlock_actionBlock__Instance(rcv, _cmd, __rollout_var_title, __rollout_var_validationBlock, __rollout_var_action);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_addButton_validationBlock_actionBlock__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).blockPointerValue, ((RolloutTypeWrapper*)arguments[2]).blockPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_addButton_validationBlock_actionBlock__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).blockPointerValue, ((RolloutTypeWrapper*)arguments[2]).blockPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"addButton:validationBlock:actionBlock:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(addButton:validationBlock:actionBlock:),(IMP) _rollout_impl_SCLAlertView_addButton_validationBlock_actionBlock__Instance, (IMP*)&_rollout_storage_SCLAlertView_addButton_validationBlock_actionBlock__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"addButton:validationBlock:actionBlock:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertView_addButton_target_selector__Instance(id rcv, SEL _cmd, id __rollout_var_title, id __rollout_var_target, void* __rollout_var_selector);
static id (*_rollout_storage_SCLAlertView_addButton_target_selector__Instance)(id rcv, SEL _cmd, id __rollout_var_title, id __rollout_var_target, void* __rollout_var_selector);
id  _rollout_impl_SCLAlertView_addButton_target_selector__Instance(id rcv, SEL _cmd, id __rollout_var_title, id __rollout_var_target, void* __rollout_var_selector){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_target], 
     [[RolloutTypeWrapper alloc] initWithPointer:__rollout_var_selector], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"addButton:target:selector:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertView_addButton_target_selector__Instance(rcv, _cmd, __rollout_var_title, __rollout_var_target, __rollout_var_selector);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_addButton_target_selector__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).pointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_addButton_target_selector__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).pointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"addButton:target:selector:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(addButton:target:selector:),(IMP) _rollout_impl_SCLAlertView_addButton_target_selector__Instance, (IMP*)&_rollout_storage_SCLAlertView_addButton_target_selector__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"addButton:target:selector:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_buttonTapped__Instance(id rcv, SEL _cmd, id __rollout_var_btn);
static void (*_rollout_storage_SCLAlertView_buttonTapped__Instance)(id rcv, SEL _cmd, id __rollout_var_btn);
void  _rollout_impl_SCLAlertView_buttonTapped__Instance(id rcv, SEL _cmd, id __rollout_var_btn){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_btn], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"buttonTapped:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_buttonTapped__Instance(rcv, _cmd, __rollout_var_btn); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_buttonTapped__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_buttonTapped__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"buttonTapped:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(buttonTapped:),(IMP) _rollout_impl_SCLAlertView_buttonTapped__Instance, (IMP*)&_rollout_storage_SCLAlertView_buttonTapped__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"buttonTapped:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertView_showTitle_image_color_title_subTitle_duration_completeText_style__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_image, id __rollout_var_color, id __rollout_var_title, id __rollout_var_subTitle, double __rollout_var_duration, id __rollout_var_completeText, __rollout_enum __rollout_var_style);
static id (*_rollout_storage_SCLAlertView_showTitle_image_color_title_subTitle_duration_completeText_style__Instance)(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_image, id __rollout_var_color, id __rollout_var_title, id __rollout_var_subTitle, double __rollout_var_duration, id __rollout_var_completeText, __rollout_enum __rollout_var_style);
id  _rollout_impl_SCLAlertView_showTitle_image_color_title_subTitle_duration_completeText_style__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_image, id __rollout_var_color, id __rollout_var_title, id __rollout_var_subTitle, double __rollout_var_duration, id __rollout_var_completeText, __rollout_enum __rollout_var_style){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_vc], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_image], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_color], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_subTitle], 
     [[RolloutTypeWrapper alloc] initWithDouble:__rollout_var_duration], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_completeText], 
     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_style], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"showTitle:image:color:title:subTitle:duration:completeText:style:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertView_showTitle_image_color_title_subTitle_duration_completeText_style__Instance(rcv, _cmd, __rollout_var_vc, __rollout_var_image, __rollout_var_color, __rollout_var_title, __rollout_var_subTitle, __rollout_var_duration, __rollout_var_completeText, __rollout_var_style);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_showTitle_image_color_title_subTitle_duration_completeText_style__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[5]).doubleValue, ((RolloutTypeWrapper*)arguments[6]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[7]).enumValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertView_showTitle_image_color_title_subTitle_duration_completeText_style__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[5]).doubleValue, ((RolloutTypeWrapper*)arguments[6]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[7]).enumValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"showTitle:image:color:title:subTitle:duration:completeText:style:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(showTitle:image:color:title:subTitle:duration:completeText:style:),(IMP) _rollout_impl_SCLAlertView_showTitle_image_color_title_subTitle_duration_completeText_style__Instance, (IMP*)&_rollout_storage_SCLAlertView_showTitle_image_color_title_subTitle_duration_completeText_style__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"showTitle:image:color:title:subTitle:duration:completeText:style:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_showSuccess_title_subTitle_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
static void (*_rollout_storage_SCLAlertView_showSuccess_title_subTitle_closeButtonTitle_duration__Instance)(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
void  _rollout_impl_SCLAlertView_showSuccess_title_subTitle_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_vc], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_subTitle], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_closeButtonTitle], 
     [[RolloutTypeWrapper alloc] initWithDouble:__rollout_var_duration], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"showSuccess:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_showSuccess_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, __rollout_var_vc, __rollout_var_title, __rollout_var_subTitle, __rollout_var_closeButtonTitle, __rollout_var_duration); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_showSuccess_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).doubleValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_showSuccess_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).doubleValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"showSuccess:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(showSuccess:title:subTitle:closeButtonTitle:duration:),(IMP) _rollout_impl_SCLAlertView_showSuccess_title_subTitle_closeButtonTitle_duration__Instance, (IMP*)&_rollout_storage_SCLAlertView_showSuccess_title_subTitle_closeButtonTitle_duration__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"showSuccess:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_showError_title_subTitle_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
static void (*_rollout_storage_SCLAlertView_showError_title_subTitle_closeButtonTitle_duration__Instance)(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
void  _rollout_impl_SCLAlertView_showError_title_subTitle_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_vc], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_subTitle], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_closeButtonTitle], 
     [[RolloutTypeWrapper alloc] initWithDouble:__rollout_var_duration], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"showError:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_showError_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, __rollout_var_vc, __rollout_var_title, __rollout_var_subTitle, __rollout_var_closeButtonTitle, __rollout_var_duration); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_showError_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).doubleValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_showError_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).doubleValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"showError:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(showError:title:subTitle:closeButtonTitle:duration:),(IMP) _rollout_impl_SCLAlertView_showError_title_subTitle_closeButtonTitle_duration__Instance, (IMP*)&_rollout_storage_SCLAlertView_showError_title_subTitle_closeButtonTitle_duration__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"showError:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_showNotice_title_subTitle_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
static void (*_rollout_storage_SCLAlertView_showNotice_title_subTitle_closeButtonTitle_duration__Instance)(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
void  _rollout_impl_SCLAlertView_showNotice_title_subTitle_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_vc], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_subTitle], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_closeButtonTitle], 
     [[RolloutTypeWrapper alloc] initWithDouble:__rollout_var_duration], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"showNotice:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_showNotice_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, __rollout_var_vc, __rollout_var_title, __rollout_var_subTitle, __rollout_var_closeButtonTitle, __rollout_var_duration); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_showNotice_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).doubleValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_showNotice_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).doubleValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"showNotice:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(showNotice:title:subTitle:closeButtonTitle:duration:),(IMP) _rollout_impl_SCLAlertView_showNotice_title_subTitle_closeButtonTitle_duration__Instance, (IMP*)&_rollout_storage_SCLAlertView_showNotice_title_subTitle_closeButtonTitle_duration__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"showNotice:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_showWarning_title_subTitle_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
static void (*_rollout_storage_SCLAlertView_showWarning_title_subTitle_closeButtonTitle_duration__Instance)(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
void  _rollout_impl_SCLAlertView_showWarning_title_subTitle_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_vc], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_subTitle], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_closeButtonTitle], 
     [[RolloutTypeWrapper alloc] initWithDouble:__rollout_var_duration], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"showWarning:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_showWarning_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, __rollout_var_vc, __rollout_var_title, __rollout_var_subTitle, __rollout_var_closeButtonTitle, __rollout_var_duration); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_showWarning_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).doubleValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_showWarning_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).doubleValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"showWarning:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(showWarning:title:subTitle:closeButtonTitle:duration:),(IMP) _rollout_impl_SCLAlertView_showWarning_title_subTitle_closeButtonTitle_duration__Instance, (IMP*)&_rollout_storage_SCLAlertView_showWarning_title_subTitle_closeButtonTitle_duration__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"showWarning:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_showInfo_title_subTitle_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
static void (*_rollout_storage_SCLAlertView_showInfo_title_subTitle_closeButtonTitle_duration__Instance)(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
void  _rollout_impl_SCLAlertView_showInfo_title_subTitle_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_vc], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_subTitle], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_closeButtonTitle], 
     [[RolloutTypeWrapper alloc] initWithDouble:__rollout_var_duration], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"showInfo:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_showInfo_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, __rollout_var_vc, __rollout_var_title, __rollout_var_subTitle, __rollout_var_closeButtonTitle, __rollout_var_duration); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_showInfo_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).doubleValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_showInfo_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).doubleValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"showInfo:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(showInfo:title:subTitle:closeButtonTitle:duration:),(IMP) _rollout_impl_SCLAlertView_showInfo_title_subTitle_closeButtonTitle_duration__Instance, (IMP*)&_rollout_storage_SCLAlertView_showInfo_title_subTitle_closeButtonTitle_duration__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"showInfo:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_showEdit_title_subTitle_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
static void (*_rollout_storage_SCLAlertView_showEdit_title_subTitle_closeButtonTitle_duration__Instance)(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
void  _rollout_impl_SCLAlertView_showEdit_title_subTitle_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_vc], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_subTitle], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_closeButtonTitle], 
     [[RolloutTypeWrapper alloc] initWithDouble:__rollout_var_duration], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"showEdit:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_showEdit_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, __rollout_var_vc, __rollout_var_title, __rollout_var_subTitle, __rollout_var_closeButtonTitle, __rollout_var_duration); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_showEdit_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).doubleValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_showEdit_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).doubleValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"showEdit:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(showEdit:title:subTitle:closeButtonTitle:duration:),(IMP) _rollout_impl_SCLAlertView_showEdit_title_subTitle_closeButtonTitle_duration__Instance, (IMP*)&_rollout_storage_SCLAlertView_showEdit_title_subTitle_closeButtonTitle_duration__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"showEdit:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_showTitle_title_subTitle_style_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, __rollout_enum __rollout_var_style, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
static void (*_rollout_storage_SCLAlertView_showTitle_title_subTitle_style_closeButtonTitle_duration__Instance)(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, __rollout_enum __rollout_var_style, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
void  _rollout_impl_SCLAlertView_showTitle_title_subTitle_style_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_title, id __rollout_var_subTitle, __rollout_enum __rollout_var_style, id __rollout_var_closeButtonTitle, double __rollout_var_duration){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_vc], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_subTitle], 
     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_style], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_closeButtonTitle], 
     [[RolloutTypeWrapper alloc] initWithDouble:__rollout_var_duration], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"showTitle:title:subTitle:style:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_showTitle_title_subTitle_style_closeButtonTitle_duration__Instance(rcv, _cmd, __rollout_var_vc, __rollout_var_title, __rollout_var_subTitle, __rollout_var_style, __rollout_var_closeButtonTitle, __rollout_var_duration); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_showTitle_title_subTitle_style_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).enumValue, ((RolloutTypeWrapper*)arguments[4]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[5]).doubleValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_showTitle_title_subTitle_style_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).enumValue, ((RolloutTypeWrapper*)arguments[4]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[5]).doubleValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"showTitle:title:subTitle:style:closeButtonTitle:duration:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(showTitle:title:subTitle:style:closeButtonTitle:duration:),(IMP) _rollout_impl_SCLAlertView_showTitle_title_subTitle_style_closeButtonTitle_duration__Instance, (IMP*)&_rollout_storage_SCLAlertView_showTitle_title_subTitle_style_closeButtonTitle_duration__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"showTitle:title:subTitle:style:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_showCustom_image_color_title_subTitle_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_image, id __rollout_var_color, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
static void (*_rollout_storage_SCLAlertView_showCustom_image_color_title_subTitle_closeButtonTitle_duration__Instance)(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_image, id __rollout_var_color, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration);
void  _rollout_impl_SCLAlertView_showCustom_image_color_title_subTitle_closeButtonTitle_duration__Instance(id rcv, SEL _cmd, id __rollout_var_vc, id __rollout_var_image, id __rollout_var_color, id __rollout_var_title, id __rollout_var_subTitle, id __rollout_var_closeButtonTitle, double __rollout_var_duration){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_vc], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_image], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_color], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_title], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_subTitle], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_closeButtonTitle], 
     [[RolloutTypeWrapper alloc] initWithDouble:__rollout_var_duration], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"showCustom:image:color:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_showCustom_image_color_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, __rollout_var_vc, __rollout_var_image, __rollout_var_color, __rollout_var_title, __rollout_var_subTitle, __rollout_var_closeButtonTitle, __rollout_var_duration); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_showCustom_image_color_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[5]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[6]).doubleValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_showCustom_image_color_title_subTitle_closeButtonTitle_duration__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[4]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[5]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[6]).doubleValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"showCustom:image:color:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(showCustom:image:color:title:subTitle:closeButtonTitle:duration:),(IMP) _rollout_impl_SCLAlertView_showCustom_image_color_title_subTitle_closeButtonTitle_duration__Instance, (IMP*)&_rollout_storage_SCLAlertView_showCustom_image_color_title_subTitle_closeButtonTitle_duration__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"showCustom:image:color:title:subTitle:closeButtonTitle:duration:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_SCLAlertView_isVisible_Instance(id rcv, SEL _cmd);
static signed char (*_rollout_storage_SCLAlertView_isVisible_Instance)(id rcv, SEL _cmd);
signed char  _rollout_impl_SCLAlertView_isVisible_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"isVisible" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertView_isVisible_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SCLAlertView_isVisible_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SCLAlertView_isVisible_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"isVisible" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(isVisible),(IMP) _rollout_impl_SCLAlertView_isVisible_Instance, (IMP*)&_rollout_storage_SCLAlertView_isVisible_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"isVisible" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_alertIsDismissed__Instance(id rcv, SEL _cmd, id __rollout_var_dismissBlock);
static void (*_rollout_storage_SCLAlertView_alertIsDismissed__Instance)(id rcv, SEL _cmd, id __rollout_var_dismissBlock);
void  _rollout_impl_SCLAlertView_alertIsDismissed__Instance(id rcv, SEL _cmd, id __rollout_var_dismissBlock){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithBlockPointer:__rollout_var_dismissBlock], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"alertIsDismissed:" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_alertIsDismissed__Instance(rcv, _cmd, __rollout_var_dismissBlock); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_alertIsDismissed__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).blockPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_alertIsDismissed__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).blockPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"alertIsDismissed:" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(alertIsDismissed:),(IMP) _rollout_impl_SCLAlertView_alertIsDismissed__Instance, (IMP*)&_rollout_storage_SCLAlertView_alertIsDismissed__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"alertIsDismissed:" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static struct CGRect  _rollout_impl_SCLAlertView_mainScreenFrame_Instance(id rcv, SEL _cmd);
static struct CGRect (*_rollout_storage_SCLAlertView_mainScreenFrame_Instance)(id rcv, SEL _cmd);
struct CGRect  _rollout_impl_SCLAlertView_mainScreenFrame_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"mainScreenFrame" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertView_mainScreenFrame_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              {struct CGRect record = _rollout_storage_SCLAlertView_mainScreenFrame_Instance(rcv, _cmd);
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithRecordPointer:&record ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO];}
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              {struct CGRect record = _rollout_storage_SCLAlertView_mainScreenFrame_Instance(rcv, _cmd);
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithRecordPointer:&record ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO];};
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return *((struct CGRect *)__rollout_r.recordPointer);
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"mainScreenFrame" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(mainScreenFrame),(IMP) _rollout_impl_SCLAlertView_mainScreenFrame_Instance, (IMP*)&_rollout_storage_SCLAlertView_mainScreenFrame_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"mainScreenFrame" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_makeShadowBackground_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_makeShadowBackground_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_makeShadowBackground_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"makeShadowBackground" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_makeShadowBackground_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_makeShadowBackground_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_makeShadowBackground_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"makeShadowBackground" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(makeShadowBackground),(IMP) _rollout_impl_SCLAlertView_makeShadowBackground_Instance, (IMP*)&_rollout_storage_SCLAlertView_makeShadowBackground_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"makeShadowBackground" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_makeBlurBackground_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_makeBlurBackground_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_makeBlurBackground_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"makeBlurBackground" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_makeBlurBackground_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_makeBlurBackground_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_makeBlurBackground_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"makeBlurBackground" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(makeBlurBackground),(IMP) _rollout_impl_SCLAlertView_makeBlurBackground_Instance, (IMP*)&_rollout_storage_SCLAlertView_makeBlurBackground_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"makeBlurBackground" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_setBackground_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_setBackground_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_setBackground_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setBackground" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_setBackground_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_setBackground_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_setBackground_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setBackground" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(setBackground),(IMP) _rollout_impl_SCLAlertView_setBackground_Instance, (IMP*)&_rollout_storage_SCLAlertView_setBackground_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setBackground" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_showView_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_showView_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_showView_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"showView" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_showView_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_showView_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_showView_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"showView" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(showView),(IMP) _rollout_impl_SCLAlertView_showView_Instance, (IMP*)&_rollout_storage_SCLAlertView_showView_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"showView" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_hideView_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_hideView_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_hideView_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"hideView" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_hideView_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_hideView_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_hideView_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"hideView" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(hideView),(IMP) _rollout_impl_SCLAlertView_hideView_Instance, (IMP*)&_rollout_storage_SCLAlertView_hideView_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"hideView" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_fadeOut_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_fadeOut_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_fadeOut_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"fadeOut" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_fadeOut_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_fadeOut_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_fadeOut_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"fadeOut" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(fadeOut),(IMP) _rollout_impl_SCLAlertView_fadeOut_Instance, (IMP*)&_rollout_storage_SCLAlertView_fadeOut_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"fadeOut" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_slideOutToBottom_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_slideOutToBottom_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_slideOutToBottom_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"slideOutToBottom" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_slideOutToBottom_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_slideOutToBottom_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_slideOutToBottom_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"slideOutToBottom" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(slideOutToBottom),(IMP) _rollout_impl_SCLAlertView_slideOutToBottom_Instance, (IMP*)&_rollout_storage_SCLAlertView_slideOutToBottom_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"slideOutToBottom" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_slideOutToTop_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_slideOutToTop_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_slideOutToTop_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"slideOutToTop" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_slideOutToTop_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_slideOutToTop_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_slideOutToTop_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"slideOutToTop" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(slideOutToTop),(IMP) _rollout_impl_SCLAlertView_slideOutToTop_Instance, (IMP*)&_rollout_storage_SCLAlertView_slideOutToTop_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"slideOutToTop" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_slideOutToLeft_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_slideOutToLeft_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_slideOutToLeft_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"slideOutToLeft" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_slideOutToLeft_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_slideOutToLeft_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_slideOutToLeft_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"slideOutToLeft" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(slideOutToLeft),(IMP) _rollout_impl_SCLAlertView_slideOutToLeft_Instance, (IMP*)&_rollout_storage_SCLAlertView_slideOutToLeft_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"slideOutToLeft" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_slideOutToRight_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_slideOutToRight_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_slideOutToRight_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"slideOutToRight" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_slideOutToRight_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_slideOutToRight_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_slideOutToRight_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"slideOutToRight" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(slideOutToRight),(IMP) _rollout_impl_SCLAlertView_slideOutToRight_Instance, (IMP*)&_rollout_storage_SCLAlertView_slideOutToRight_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"slideOutToRight" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_fadeIn_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_fadeIn_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_fadeIn_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"fadeIn" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_fadeIn_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_fadeIn_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_fadeIn_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"fadeIn" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(fadeIn),(IMP) _rollout_impl_SCLAlertView_fadeIn_Instance, (IMP*)&_rollout_storage_SCLAlertView_fadeIn_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"fadeIn" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_slideInFromTop_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_slideInFromTop_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_slideInFromTop_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"slideInFromTop" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_slideInFromTop_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_slideInFromTop_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_slideInFromTop_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"slideInFromTop" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(slideInFromTop),(IMP) _rollout_impl_SCLAlertView_slideInFromTop_Instance, (IMP*)&_rollout_storage_SCLAlertView_slideInFromTop_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"slideInFromTop" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_slideInFromBottom_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_slideInFromBottom_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_slideInFromBottom_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"slideInFromBottom" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_slideInFromBottom_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_slideInFromBottom_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_slideInFromBottom_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"slideInFromBottom" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(slideInFromBottom),(IMP) _rollout_impl_SCLAlertView_slideInFromBottom_Instance, (IMP*)&_rollout_storage_SCLAlertView_slideInFromBottom_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"slideInFromBottom" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_slideInFromLeft_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_slideInFromLeft_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_slideInFromLeft_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"slideInFromLeft" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_slideInFromLeft_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_slideInFromLeft_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_slideInFromLeft_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"slideInFromLeft" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(slideInFromLeft),(IMP) _rollout_impl_SCLAlertView_slideInFromLeft_Instance, (IMP*)&_rollout_storage_SCLAlertView_slideInFromLeft_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"slideInFromLeft" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertView_slideInFromRight_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertView_slideInFromRight_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertView_slideInFromRight_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"slideInFromRight" forClass:@"SCLAlertView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertView_slideInFromRight_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertView_slideInFromRight_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertView_slideInFromRight_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"slideInFromRight" forClass:@"SCLAlertView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SCLAlertView"), @selector(slideInFromRight),(IMP) _rollout_impl_SCLAlertView_slideInFromRight_Instance, (IMP*)&_rollout_storage_SCLAlertView_slideInFromRight_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"slideInFromRight" forClass:@"SCLAlertView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SDiPhoneVersion_deviceNamesByCode_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_SDiPhoneVersion_deviceNamesByCode_Class)(id rcv, SEL _cmd);
id  _rollout_impl_SDiPhoneVersion_deviceNamesByCode_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"deviceNamesByCode" forClass:@"SDiPhoneVersion"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SDiPhoneVersion_deviceNamesByCode_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SDiPhoneVersion_deviceNamesByCode_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SDiPhoneVersion_deviceNamesByCode_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"deviceNamesByCode" forClass:@"SDiPhoneVersion"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SDiPhoneVersion"), @selector(deviceNamesByCode),(IMP) _rollout_impl_SDiPhoneVersion_deviceNamesByCode_Class, (IMP*)&_rollout_storage_SDiPhoneVersion_deviceNamesByCode_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"deviceNamesByCode" forClass:@"SDiPhoneVersion"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static __rollout_enum  _rollout_impl_SDiPhoneVersion_deviceVersion_Class(id rcv, SEL _cmd);
static __rollout_enum (*_rollout_storage_SDiPhoneVersion_deviceVersion_Class)(id rcv, SEL _cmd);
__rollout_enum  _rollout_impl_SDiPhoneVersion_deviceVersion_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"deviceVersion" forClass:@"SDiPhoneVersion"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SDiPhoneVersion_deviceVersion_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:_rollout_storage_SDiPhoneVersion_deviceVersion_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:_rollout_storage_SDiPhoneVersion_deviceVersion_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.enumValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"deviceVersion" forClass:@"SDiPhoneVersion"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SDiPhoneVersion"), @selector(deviceVersion),(IMP) _rollout_impl_SDiPhoneVersion_deviceVersion_Class, (IMP*)&_rollout_storage_SDiPhoneVersion_deviceVersion_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"deviceVersion" forClass:@"SDiPhoneVersion"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static __rollout_enum  _rollout_impl_SDiPhoneVersion_deviceSize_Class(id rcv, SEL _cmd);
static __rollout_enum (*_rollout_storage_SDiPhoneVersion_deviceSize_Class)(id rcv, SEL _cmd);
__rollout_enum  _rollout_impl_SDiPhoneVersion_deviceSize_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"deviceSize" forClass:@"SDiPhoneVersion"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SDiPhoneVersion_deviceSize_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:_rollout_storage_SDiPhoneVersion_deviceSize_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:_rollout_storage_SDiPhoneVersion_deviceSize_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.enumValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"deviceSize" forClass:@"SDiPhoneVersion"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SDiPhoneVersion"), @selector(deviceSize),(IMP) _rollout_impl_SDiPhoneVersion_deviceSize_Class, (IMP*)&_rollout_storage_SDiPhoneVersion_deviceSize_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"deviceSize" forClass:@"SDiPhoneVersion"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SDiPhoneVersion_deviceName_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_SDiPhoneVersion_deviceName_Class)(id rcv, SEL _cmd);
id  _rollout_impl_SDiPhoneVersion_deviceName_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"deviceName" forClass:@"SDiPhoneVersion"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SDiPhoneVersion_deviceName_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SDiPhoneVersion_deviceName_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SDiPhoneVersion_deviceName_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"deviceName" forClass:@"SDiPhoneVersion"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SDiPhoneVersion"), @selector(deviceName),(IMP) _rollout_impl_SDiPhoneVersion_deviceName_Class, (IMP*)&_rollout_storage_SDiPhoneVersion_deviceName_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"deviceName" forClass:@"SDiPhoneVersion"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_THCrystalBall_predictions_Instance(id rcv, SEL _cmd);
static id (*_rollout_storage_THCrystalBall_predictions_Instance)(id rcv, SEL _cmd);
id  _rollout_impl_THCrystalBall_predictions_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"predictions" forClass:@"THCrystalBall"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_THCrystalBall_predictions_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_THCrystalBall_predictions_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_THCrystalBall_predictions_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"predictions" forClass:@"THCrystalBall"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"THCrystalBall"), @selector(predictions),(IMP) _rollout_impl_THCrystalBall_predictions_Instance, (IMP*)&_rollout_storage_THCrystalBall_predictions_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"predictions" forClass:@"THCrystalBall"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_THCrystalBall_randomPrediction_Instance(id rcv, SEL _cmd);
static id (*_rollout_storage_THCrystalBall_randomPrediction_Instance)(id rcv, SEL _cmd);
id  _rollout_impl_THCrystalBall_randomPrediction_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"randomPrediction" forClass:@"THCrystalBall"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_THCrystalBall_randomPrediction_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_THCrystalBall_randomPrediction_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_THCrystalBall_randomPrediction_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"randomPrediction" forClass:@"THCrystalBall"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"THCrystalBall"), @selector(randomPrediction),(IMP) _rollout_impl_THCrystalBall_randomPrediction_Instance, (IMP*)&_rollout_storage_THCrystalBall_randomPrediction_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"randomPrediction" forClass:@"THCrystalBall"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_mobilappTableCell_initWithStyle_reuseIdentifier__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_style, id __rollout_var_reuseIdentifier);
static id (*_rollout_storage_mobilappTableCell_initWithStyle_reuseIdentifier__Instance)(id rcv, SEL _cmd, __rollout_enum __rollout_var_style, id __rollout_var_reuseIdentifier);
id  _rollout_impl_mobilappTableCell_initWithStyle_reuseIdentifier__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_style, id __rollout_var_reuseIdentifier){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_style], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_reuseIdentifier], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithStyle:reuseIdentifier:" forClass:@"mobilappTableCell"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_mobilappTableCell_initWithStyle_reuseIdentifier__Instance(rcv, _cmd, __rollout_var_style, __rollout_var_reuseIdentifier);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_mobilappTableCell_initWithStyle_reuseIdentifier__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_mobilappTableCell_initWithStyle_reuseIdentifier__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithStyle:reuseIdentifier:" forClass:@"mobilappTableCell"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"mobilappTableCell"), @selector(initWithStyle:reuseIdentifier:),(IMP) _rollout_impl_mobilappTableCell_initWithStyle_reuseIdentifier__Instance, (IMP*)&_rollout_storage_mobilappTableCell_initWithStyle_reuseIdentifier__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithStyle:reuseIdentifier:" forClass:@"mobilappTableCell"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_mobilappTableCell_setSelected_animated__Instance(id rcv, SEL _cmd, signed char __rollout_var_selected, signed char __rollout_var_animated);
static void (*_rollout_storage_mobilappTableCell_setSelected_animated__Instance)(id rcv, SEL _cmd, signed char __rollout_var_selected, signed char __rollout_var_animated);
void  _rollout_impl_mobilappTableCell_setSelected_animated__Instance(id rcv, SEL _cmd, signed char __rollout_var_selected, signed char __rollout_var_animated){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_selected], 
     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_animated], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setSelected:animated:" forClass:@"mobilappTableCell"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_mobilappTableCell_setSelected_animated__Instance(rcv, _cmd, __rollout_var_selected, __rollout_var_animated); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_mobilappTableCell_setSelected_animated__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue, ((RolloutTypeWrapper*)arguments[1]).sCharValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_mobilappTableCell_setSelected_animated__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue, ((RolloutTypeWrapper*)arguments[1]).sCharValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setSelected:animated:" forClass:@"mobilappTableCell"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"mobilappTableCell"), @selector(setSelected:animated:),(IMP) _rollout_impl_mobilappTableCell_setSelected_animated__Instance, (IMP*)&_rollout_storage_mobilappTableCell_setSelected_animated__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setSelected:animated:" forClass:@"mobilappTableCell"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_Utils_isVersion6AndBelow_Class(id rcv, SEL _cmd);
static signed char (*_rollout_storage_Utils_isVersion6AndBelow_Class)(id rcv, SEL _cmd);
signed char  _rollout_impl_Utils_isVersion6AndBelow_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"isVersion6AndBelow" forClass:@"Utils"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_Utils_isVersion6AndBelow_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_Utils_isVersion6AndBelow_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_Utils_isVersion6AndBelow_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"isVersion6AndBelow" forClass:@"Utils"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"Utils"), @selector(isVersion6AndBelow),(IMP) _rollout_impl_Utils_isVersion6AndBelow_Class, (IMP*)&_rollout_storage_Utils_isVersion6AndBelow_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"isVersion6AndBelow" forClass:@"Utils"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_Utils_createSolidColorImageWithColor_andSize__Class(id rcv, SEL _cmd, id __rollout_var_color, struct CGSize __rollout_var_size);
static id (*_rollout_storage_Utils_createSolidColorImageWithColor_andSize__Class)(id rcv, SEL _cmd, id __rollout_var_color, struct CGSize __rollout_var_size);
id  _rollout_impl_Utils_createSolidColorImageWithColor_andSize__Class(id rcv, SEL _cmd, id __rollout_var_color, struct CGSize __rollout_var_size){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_color], 
     [[RolloutTypeWrapper alloc] initWithRecordPointer:&__rollout_var_size ofSize:sizeof(struct CGSize) shouldBeFreedInDealloc:NO], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"createSolidColorImageWithColor:andSize:" forClass:@"Utils"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_Utils_createSolidColorImageWithColor_andSize__Class(rcv, _cmd, __rollout_var_color, __rollout_var_size);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_Utils_createSolidColorImageWithColor_andSize__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, *(struct CGSize*)((RolloutTypeWrapper*)arguments[1]).recordPointer)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_Utils_createSolidColorImageWithColor_andSize__Class(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, *(struct CGSize*)((RolloutTypeWrapper*)arguments[1]).recordPointer)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"createSolidColorImageWithColor:andSize:" forClass:@"Utils"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"Utils"), @selector(createSolidColorImageWithColor:andSize:),(IMP) _rollout_impl_Utils_createSolidColorImageWithColor_andSize__Class, (IMP*)&_rollout_storage_Utils_createSolidColorImageWithColor_andSize__Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"createSolidColorImageWithColor:andSize:" forClass:@"Utils"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_DeviceTableCell_initWithStyle_reuseIdentifier__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_style, id __rollout_var_reuseIdentifier);
static id (*_rollout_storage_DeviceTableCell_initWithStyle_reuseIdentifier__Instance)(id rcv, SEL _cmd, __rollout_enum __rollout_var_style, id __rollout_var_reuseIdentifier);
id  _rollout_impl_DeviceTableCell_initWithStyle_reuseIdentifier__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_style, id __rollout_var_reuseIdentifier){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_style], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_reuseIdentifier], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithStyle:reuseIdentifier:" forClass:@"DeviceTableCell"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DeviceTableCell_initWithStyle_reuseIdentifier__Instance(rcv, _cmd, __rollout_var_style, __rollout_var_reuseIdentifier);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DeviceTableCell_initWithStyle_reuseIdentifier__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DeviceTableCell_initWithStyle_reuseIdentifier__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithStyle:reuseIdentifier:" forClass:@"DeviceTableCell"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DeviceTableCell"), @selector(initWithStyle:reuseIdentifier:),(IMP) _rollout_impl_DeviceTableCell_initWithStyle_reuseIdentifier__Instance, (IMP*)&_rollout_storage_DeviceTableCell_initWithStyle_reuseIdentifier__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithStyle:reuseIdentifier:" forClass:@"DeviceTableCell"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_DeviceTableCell_setSelected_animated__Instance(id rcv, SEL _cmd, signed char __rollout_var_selected, signed char __rollout_var_animated);
static void (*_rollout_storage_DeviceTableCell_setSelected_animated__Instance)(id rcv, SEL _cmd, signed char __rollout_var_selected, signed char __rollout_var_animated);
void  _rollout_impl_DeviceTableCell_setSelected_animated__Instance(id rcv, SEL _cmd, signed char __rollout_var_selected, signed char __rollout_var_animated){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_selected], 
     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_animated], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setSelected:animated:" forClass:@"DeviceTableCell"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_DeviceTableCell_setSelected_animated__Instance(rcv, _cmd, __rollout_var_selected, __rollout_var_animated); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_DeviceTableCell_setSelected_animated__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue, ((RolloutTypeWrapper*)arguments[1]).sCharValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_DeviceTableCell_setSelected_animated__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue, ((RolloutTypeWrapper*)arguments[1]).sCharValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setSelected:animated:" forClass:@"DeviceTableCell"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DeviceTableCell"), @selector(setSelected:animated:),(IMP) _rollout_impl_DeviceTableCell_setSelected_animated__Instance, (IMP*)&_rollout_storage_DeviceTableCell_setSelected_animated__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setSelected:animated:" forClass:@"DeviceTableCell"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_mobilappTableViewController_initWithStyle__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_style);
static id (*_rollout_storage_mobilappTableViewController_initWithStyle__Instance)(id rcv, SEL _cmd, __rollout_enum __rollout_var_style);
id  _rollout_impl_mobilappTableViewController_initWithStyle__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_style){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_style], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithStyle:" forClass:@"mobilappTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_mobilappTableViewController_initWithStyle__Instance(rcv, _cmd, __rollout_var_style);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_mobilappTableViewController_initWithStyle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_mobilappTableViewController_initWithStyle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithStyle:" forClass:@"mobilappTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"mobilappTableViewController"), @selector(initWithStyle:),(IMP) _rollout_impl_mobilappTableViewController_initWithStyle__Instance, (IMP*)&_rollout_storage_mobilappTableViewController_initWithStyle__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithStyle:" forClass:@"mobilappTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_mobilappTableViewController_viewDidLoad_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_mobilappTableViewController_viewDidLoad_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_mobilappTableViewController_viewDidLoad_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewDidLoad" forClass:@"mobilappTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_mobilappTableViewController_viewDidLoad_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_mobilappTableViewController_viewDidLoad_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_mobilappTableViewController_viewDidLoad_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewDidLoad" forClass:@"mobilappTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"mobilappTableViewController"), @selector(viewDidLoad),(IMP) _rollout_impl_mobilappTableViewController_viewDidLoad_Instance, (IMP*)&_rollout_storage_mobilappTableViewController_viewDidLoad_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewDidLoad" forClass:@"mobilappTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_mobilappTableViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_mobilappTableViewController_didReceiveMemoryWarning_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_mobilappTableViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"didReceiveMemoryWarning" forClass:@"mobilappTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_mobilappTableViewController_didReceiveMemoryWarning_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_mobilappTableViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_mobilappTableViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"mobilappTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"mobilappTableViewController"), @selector(didReceiveMemoryWarning),(IMP) _rollout_impl_mobilappTableViewController_didReceiveMemoryWarning_Instance, (IMP*)&_rollout_storage_mobilappTableViewController_didReceiveMemoryWarning_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"mobilappTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static int  _rollout_impl_mobilappTableViewController_tableView_numberOfRowsInSection__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section);
static int (*_rollout_storage_mobilappTableViewController_tableView_numberOfRowsInSection__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section);
int  _rollout_impl_mobilappTableViewController_tableView_numberOfRowsInSection__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, int __rollout_var_section){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithInt:__rollout_var_section], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:numberOfRowsInSection:" forClass:@"mobilappTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_mobilappTableViewController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_section);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:_rollout_storage_mobilappTableViewController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:_rollout_storage_mobilappTableViewController_tableView_numberOfRowsInSection__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.intValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:numberOfRowsInSection:" forClass:@"mobilappTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"mobilappTableViewController"), @selector(tableView:numberOfRowsInSection:),(IMP) _rollout_impl_mobilappTableViewController_tableView_numberOfRowsInSection__Instance, (IMP*)&_rollout_storage_mobilappTableViewController_tableView_numberOfRowsInSection__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:numberOfRowsInSection:" forClass:@"mobilappTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static float  _rollout_impl_mobilappTableViewController_tableView_heightForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
static float (*_rollout_storage_mobilappTableViewController_tableView_heightForRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
float  _rollout_impl_mobilappTableViewController_tableView_heightForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:heightForRowAtIndexPath:" forClass:@"mobilappTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_mobilappTableViewController_tableView_heightForRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_indexPath);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithFloat:_rollout_storage_mobilappTableViewController_tableView_heightForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithFloat:_rollout_storage_mobilappTableViewController_tableView_heightForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.floatValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:heightForRowAtIndexPath:" forClass:@"mobilappTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"mobilappTableViewController"), @selector(tableView:heightForRowAtIndexPath:),(IMP) _rollout_impl_mobilappTableViewController_tableView_heightForRowAtIndexPath__Instance, (IMP*)&_rollout_storage_mobilappTableViewController_tableView_heightForRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:heightForRowAtIndexPath:" forClass:@"mobilappTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_mobilappTableViewController_cellBackgroundForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_indexPath);
static id (*_rollout_storage_mobilappTableViewController_cellBackgroundForRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_indexPath);
id  _rollout_impl_mobilappTableViewController_cellBackgroundForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_indexPath){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"cellBackgroundForRowAtIndexPath:" forClass:@"mobilappTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_mobilappTableViewController_cellBackgroundForRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_indexPath);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_mobilappTableViewController_cellBackgroundForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_mobilappTableViewController_cellBackgroundForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"cellBackgroundForRowAtIndexPath:" forClass:@"mobilappTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"mobilappTableViewController"), @selector(cellBackgroundForRowAtIndexPath:),(IMP) _rollout_impl_mobilappTableViewController_cellBackgroundForRowAtIndexPath__Instance, (IMP*)&_rollout_storage_mobilappTableViewController_cellBackgroundForRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"cellBackgroundForRowAtIndexPath:" forClass:@"mobilappTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_mobilappTableViewController_tableView_cellForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
static id (*_rollout_storage_mobilappTableViewController_tableView_cellForRowAtIndexPath__Instance)(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath);
id  _rollout_impl_mobilappTableViewController_tableView_cellForRowAtIndexPath__Instance(id rcv, SEL _cmd, id __rollout_var_tableView, id __rollout_var_indexPath){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tableView], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_indexPath], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tableView:cellForRowAtIndexPath:" forClass:@"mobilappTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_mobilappTableViewController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, __rollout_var_tableView, __rollout_var_indexPath);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_mobilappTableViewController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_mobilappTableViewController_tableView_cellForRowAtIndexPath__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tableView:cellForRowAtIndexPath:" forClass:@"mobilappTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"mobilappTableViewController"), @selector(tableView:cellForRowAtIndexPath:),(IMP) _rollout_impl_mobilappTableViewController_tableView_cellForRowAtIndexPath__Instance, (IMP*)&_rollout_storage_mobilappTableViewController_tableView_cellForRowAtIndexPath__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tableView:cellForRowAtIndexPath:" forClass:@"mobilappTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_mobilappTableViewController_prepareForSegue_sender__Instance(id rcv, SEL _cmd, id __rollout_var_segue, id __rollout_var_sender);
static void (*_rollout_storage_mobilappTableViewController_prepareForSegue_sender__Instance)(id rcv, SEL _cmd, id __rollout_var_segue, id __rollout_var_sender);
void  _rollout_impl_mobilappTableViewController_prepareForSegue_sender__Instance(id rcv, SEL _cmd, id __rollout_var_segue, id __rollout_var_sender){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_segue], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_sender], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"prepareForSegue:sender:" forClass:@"mobilappTableViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_mobilappTableViewController_prepareForSegue_sender__Instance(rcv, _cmd, __rollout_var_segue, __rollout_var_sender); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_mobilappTableViewController_prepareForSegue_sender__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_mobilappTableViewController_prepareForSegue_sender__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"prepareForSegue:sender:" forClass:@"mobilappTableViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"mobilappTableViewController"), @selector(prepareForSegue:sender:),(IMP) _rollout_impl_mobilappTableViewController_prepareForSegue_sender__Instance, (IMP*)&_rollout_storage_mobilappTableViewController_prepareForSegue_sender__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"prepareForSegue:sender:" forClass:@"mobilappTableViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_DeviceDetailViewController_initWithNibName_bundle__Instance(id rcv, SEL _cmd, id __rollout_var_nibNameOrNil, id __rollout_var_nibBundleOrNil);
static id (*_rollout_storage_DeviceDetailViewController_initWithNibName_bundle__Instance)(id rcv, SEL _cmd, id __rollout_var_nibNameOrNil, id __rollout_var_nibBundleOrNil);
id  _rollout_impl_DeviceDetailViewController_initWithNibName_bundle__Instance(id rcv, SEL _cmd, id __rollout_var_nibNameOrNil, id __rollout_var_nibBundleOrNil){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_nibNameOrNil], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_nibBundleOrNil], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithNibName:bundle:" forClass:@"DeviceDetailViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DeviceDetailViewController_initWithNibName_bundle__Instance(rcv, _cmd, __rollout_var_nibNameOrNil, __rollout_var_nibBundleOrNil);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DeviceDetailViewController_initWithNibName_bundle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DeviceDetailViewController_initWithNibName_bundle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithNibName:bundle:" forClass:@"DeviceDetailViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DeviceDetailViewController"), @selector(initWithNibName:bundle:),(IMP) _rollout_impl_DeviceDetailViewController_initWithNibName_bundle__Instance, (IMP*)&_rollout_storage_DeviceDetailViewController_initWithNibName_bundle__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithNibName:bundle:" forClass:@"DeviceDetailViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_DeviceDetailViewController_viewDidLoad_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_DeviceDetailViewController_viewDidLoad_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_DeviceDetailViewController_viewDidLoad_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewDidLoad" forClass:@"DeviceDetailViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_DeviceDetailViewController_viewDidLoad_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_DeviceDetailViewController_viewDidLoad_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_DeviceDetailViewController_viewDidLoad_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewDidLoad" forClass:@"DeviceDetailViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DeviceDetailViewController"), @selector(viewDidLoad),(IMP) _rollout_impl_DeviceDetailViewController_viewDidLoad_Instance, (IMP*)&_rollout_storage_DeviceDetailViewController_viewDidLoad_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewDidLoad" forClass:@"DeviceDetailViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_DeviceDetailViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_DeviceDetailViewController_didReceiveMemoryWarning_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_DeviceDetailViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"didReceiveMemoryWarning" forClass:@"DeviceDetailViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_DeviceDetailViewController_didReceiveMemoryWarning_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_DeviceDetailViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_DeviceDetailViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"DeviceDetailViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DeviceDetailViewController"), @selector(didReceiveMemoryWarning),(IMP) _rollout_impl_DeviceDetailViewController_didReceiveMemoryWarning_Instance, (IMP*)&_rollout_storage_DeviceDetailViewController_didReceiveMemoryWarning_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"DeviceDetailViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_advantageTableCell_initWithStyle_reuseIdentifier__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_style, id __rollout_var_reuseIdentifier);
static id (*_rollout_storage_advantageTableCell_initWithStyle_reuseIdentifier__Instance)(id rcv, SEL _cmd, __rollout_enum __rollout_var_style, id __rollout_var_reuseIdentifier);
id  _rollout_impl_advantageTableCell_initWithStyle_reuseIdentifier__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_style, id __rollout_var_reuseIdentifier){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_style], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_reuseIdentifier], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithStyle:reuseIdentifier:" forClass:@"advantageTableCell"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_advantageTableCell_initWithStyle_reuseIdentifier__Instance(rcv, _cmd, __rollout_var_style, __rollout_var_reuseIdentifier);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_advantageTableCell_initWithStyle_reuseIdentifier__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_advantageTableCell_initWithStyle_reuseIdentifier__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithStyle:reuseIdentifier:" forClass:@"advantageTableCell"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"advantageTableCell"), @selector(initWithStyle:reuseIdentifier:),(IMP) _rollout_impl_advantageTableCell_initWithStyle_reuseIdentifier__Instance, (IMP*)&_rollout_storage_advantageTableCell_initWithStyle_reuseIdentifier__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithStyle:reuseIdentifier:" forClass:@"advantageTableCell"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_advantageTableCell_setSelected_animated__Instance(id rcv, SEL _cmd, signed char __rollout_var_selected, signed char __rollout_var_animated);
static void (*_rollout_storage_advantageTableCell_setSelected_animated__Instance)(id rcv, SEL _cmd, signed char __rollout_var_selected, signed char __rollout_var_animated);
void  _rollout_impl_advantageTableCell_setSelected_animated__Instance(id rcv, SEL _cmd, signed char __rollout_var_selected, signed char __rollout_var_animated){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_selected], 
     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_animated], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setSelected:animated:" forClass:@"advantageTableCell"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_advantageTableCell_setSelected_animated__Instance(rcv, _cmd, __rollout_var_selected, __rollout_var_animated); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_advantageTableCell_setSelected_animated__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue, ((RolloutTypeWrapper*)arguments[1]).sCharValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_advantageTableCell_setSelected_animated__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue, ((RolloutTypeWrapper*)arguments[1]).sCharValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setSelected:animated:" forClass:@"advantageTableCell"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"advantageTableCell"), @selector(setSelected:animated:),(IMP) _rollout_impl_advantageTableCell_setSelected_animated__Instance, (IMP*)&_rollout_storage_advantageTableCell_setSelected_animated__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setSelected:animated:" forClass:@"advantageTableCell"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_IPInsetLabel_drawTextInRect__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_rect);
static void (*_rollout_storage_IPInsetLabel_drawTextInRect__Instance)(id rcv, SEL _cmd, struct CGRect __rollout_var_rect);
void  _rollout_impl_IPInsetLabel_drawTextInRect__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_rect){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithRecordPointer:&__rollout_var_rect ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"drawTextInRect:" forClass:@"IPInsetLabel"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_IPInsetLabel_drawTextInRect__Instance(rcv, _cmd, __rollout_var_rect); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_IPInsetLabel_drawTextInRect__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_IPInsetLabel_drawTextInRect__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"drawTextInRect:" forClass:@"IPInsetLabel"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"IPInsetLabel"), @selector(drawTextInRect:),(IMP) _rollout_impl_IPInsetLabel_drawTextInRect__Instance, (IMP*)&_rollout_storage_IPInsetLabel_drawTextInRect__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"drawTextInRect:" forClass:@"IPInsetLabel"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_IPInsetLabel_resizeHeightToFitText_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_IPInsetLabel_resizeHeightToFitText_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_IPInsetLabel_resizeHeightToFitText_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"resizeHeightToFitText" forClass:@"IPInsetLabel"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_IPInsetLabel_resizeHeightToFitText_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_IPInsetLabel_resizeHeightToFitText_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_IPInsetLabel_resizeHeightToFitText_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"resizeHeightToFitText" forClass:@"IPInsetLabel"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"IPInsetLabel"), @selector(resizeHeightToFitText),(IMP) _rollout_impl_IPInsetLabel_resizeHeightToFitText_Instance, (IMP*)&_rollout_storage_IPInsetLabel_resizeHeightToFitText_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"resizeHeightToFitText" forClass:@"IPInsetLabel"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AutoTextView_willMoveToWindow__Instance(id rcv, SEL _cmd, id __rollout_var_newWindow);
static void (*_rollout_storage_AutoTextView_willMoveToWindow__Instance)(id rcv, SEL _cmd, id __rollout_var_newWindow);
void  _rollout_impl_AutoTextView_willMoveToWindow__Instance(id rcv, SEL _cmd, id __rollout_var_newWindow){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_newWindow], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"willMoveToWindow:" forClass:@"AutoTextView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AutoTextView_willMoveToWindow__Instance(rcv, _cmd, __rollout_var_newWindow); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AutoTextView_willMoveToWindow__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AutoTextView_willMoveToWindow__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"willMoveToWindow:" forClass:@"AutoTextView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AutoTextView"), @selector(willMoveToWindow:),(IMP) _rollout_impl_AutoTextView_willMoveToWindow__Instance, (IMP*)&_rollout_storage_AutoTextView_willMoveToWindow__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"willMoveToWindow:" forClass:@"AutoTextView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_AutoTextView_touchesShouldBegin_withEvent_inContentView__Instance(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event, id __rollout_var_view);
static signed char (*_rollout_storage_AutoTextView_touchesShouldBegin_withEvent_inContentView__Instance)(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event, id __rollout_var_view);
signed char  _rollout_impl_AutoTextView_touchesShouldBegin_withEvent_inContentView__Instance(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event, id __rollout_var_view){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_touches], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_event], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_view], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"touchesShouldBegin:withEvent:inContentView:" forClass:@"AutoTextView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_AutoTextView_touchesShouldBegin_withEvent_inContentView__Instance(rcv, _cmd, __rollout_var_touches, __rollout_var_event, __rollout_var_view);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_AutoTextView_touchesShouldBegin_withEvent_inContentView__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_AutoTextView_touchesShouldBegin_withEvent_inContentView__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"touchesShouldBegin:withEvent:inContentView:" forClass:@"AutoTextView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AutoTextView"), @selector(touchesShouldBegin:withEvent:inContentView:),(IMP) _rollout_impl_AutoTextView_touchesShouldBegin_withEvent_inContentView__Instance, (IMP*)&_rollout_storage_AutoTextView_touchesShouldBegin_withEvent_inContentView__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"touchesShouldBegin:withEvent:inContentView:" forClass:@"AutoTextView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AutoTextView_gestureDidChange__Instance(id rcv, SEL _cmd, id __rollout_var_gesture);
static void (*_rollout_storage_AutoTextView_gestureDidChange__Instance)(id rcv, SEL _cmd, id __rollout_var_gesture);
void  _rollout_impl_AutoTextView_gestureDidChange__Instance(id rcv, SEL _cmd, id __rollout_var_gesture){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_gesture], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"gestureDidChange:" forClass:@"AutoTextView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AutoTextView_gestureDidChange__Instance(rcv, _cmd, __rollout_var_gesture); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AutoTextView_gestureDidChange__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AutoTextView_gestureDidChange__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"gestureDidChange:" forClass:@"AutoTextView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AutoTextView"), @selector(gestureDidChange:),(IMP) _rollout_impl_AutoTextView_gestureDidChange__Instance, (IMP*)&_rollout_storage_AutoTextView_gestureDidChange__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"gestureDidChange:" forClass:@"AutoTextView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_AutoTextView_becomeFirstResponder_Instance(id rcv, SEL _cmd);
static signed char (*_rollout_storage_AutoTextView_becomeFirstResponder_Instance)(id rcv, SEL _cmd);
signed char  _rollout_impl_AutoTextView_becomeFirstResponder_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"becomeFirstResponder" forClass:@"AutoTextView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_AutoTextView_becomeFirstResponder_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_AutoTextView_becomeFirstResponder_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_AutoTextView_becomeFirstResponder_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"becomeFirstResponder" forClass:@"AutoTextView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AutoTextView"), @selector(becomeFirstResponder),(IMP) _rollout_impl_AutoTextView_becomeFirstResponder_Instance, (IMP*)&_rollout_storage_AutoTextView_becomeFirstResponder_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"becomeFirstResponder" forClass:@"AutoTextView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static float  _rollout_impl_AutoTextView_pointsPerSecond_Instance(id rcv, SEL _cmd);
static float (*_rollout_storage_AutoTextView_pointsPerSecond_Instance)(id rcv, SEL _cmd);
float  _rollout_impl_AutoTextView_pointsPerSecond_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"pointsPerSecond" forClass:@"AutoTextView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_AutoTextView_pointsPerSecond_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithFloat:_rollout_storage_AutoTextView_pointsPerSecond_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithFloat:_rollout_storage_AutoTextView_pointsPerSecond_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.floatValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"pointsPerSecond" forClass:@"AutoTextView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AutoTextView"), @selector(pointsPerSecond),(IMP) _rollout_impl_AutoTextView_pointsPerSecond_Instance, (IMP*)&_rollout_storage_AutoTextView_pointsPerSecond_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"pointsPerSecond" forClass:@"AutoTextView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AutoTextView_startScrolling_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_AutoTextView_startScrolling_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_AutoTextView_startScrolling_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"startScrolling" forClass:@"AutoTextView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AutoTextView_startScrolling_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AutoTextView_startScrolling_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AutoTextView_startScrolling_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"startScrolling" forClass:@"AutoTextView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AutoTextView"), @selector(startScrolling),(IMP) _rollout_impl_AutoTextView_startScrolling_Instance, (IMP*)&_rollout_storage_AutoTextView_startScrolling_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"startScrolling" forClass:@"AutoTextView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AutoTextView_stopScrolling__Instance(id rcv, SEL _cmd, signed char __rollout_var_postNotification);
static void (*_rollout_storage_AutoTextView_stopScrolling__Instance)(id rcv, SEL _cmd, signed char __rollout_var_postNotification);
void  _rollout_impl_AutoTextView_stopScrolling__Instance(id rcv, SEL _cmd, signed char __rollout_var_postNotification){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_postNotification], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"stopScrolling:" forClass:@"AutoTextView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AutoTextView_stopScrolling__Instance(rcv, _cmd, __rollout_var_postNotification); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AutoTextView_stopScrolling__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AutoTextView_stopScrolling__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"stopScrolling:" forClass:@"AutoTextView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AutoTextView"), @selector(stopScrolling:),(IMP) _rollout_impl_AutoTextView_stopScrolling__Instance, (IMP*)&_rollout_storage_AutoTextView_stopScrolling__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"stopScrolling:" forClass:@"AutoTextView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_AutoTextView_updateScroll_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_AutoTextView_updateScroll_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_AutoTextView_updateScroll_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"updateScroll" forClass:@"AutoTextView"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_AutoTextView_updateScroll_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_AutoTextView_updateScroll_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_AutoTextView_updateScroll_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"updateScroll" forClass:@"AutoTextView"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"AutoTextView"), @selector(updateScroll),(IMP) _rollout_impl_AutoTextView_updateScroll_Instance, (IMP*)&_rollout_storage_AutoTextView_updateScroll_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"updateScroll" forClass:@"AutoTextView"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertViewStyleKit_initialize_Class(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertViewStyleKit_initialize_Class)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertViewStyleKit_initialize_Class(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"initialize" forClass:@"SCLAlertViewStyleKit"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertViewStyleKit_initialize_Class(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertViewStyleKit_initialize_Class(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertViewStyleKit_initialize_Class(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"initialize" forClass:@"SCLAlertViewStyleKit"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SCLAlertViewStyleKit"), @selector(initialize),(IMP) _rollout_impl_SCLAlertViewStyleKit_initialize_Class, (IMP*)&_rollout_storage_SCLAlertViewStyleKit_initialize_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"initialize" forClass:@"SCLAlertViewStyleKit"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertViewStyleKit_drawCheckmark_Class(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertViewStyleKit_drawCheckmark_Class)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertViewStyleKit_drawCheckmark_Class(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"drawCheckmark" forClass:@"SCLAlertViewStyleKit"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertViewStyleKit_drawCheckmark_Class(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertViewStyleKit_drawCheckmark_Class(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertViewStyleKit_drawCheckmark_Class(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"drawCheckmark" forClass:@"SCLAlertViewStyleKit"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SCLAlertViewStyleKit"), @selector(drawCheckmark),(IMP) _rollout_impl_SCLAlertViewStyleKit_drawCheckmark_Class, (IMP*)&_rollout_storage_SCLAlertViewStyleKit_drawCheckmark_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"drawCheckmark" forClass:@"SCLAlertViewStyleKit"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertViewStyleKit_drawCross_Class(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertViewStyleKit_drawCross_Class)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertViewStyleKit_drawCross_Class(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"drawCross" forClass:@"SCLAlertViewStyleKit"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertViewStyleKit_drawCross_Class(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertViewStyleKit_drawCross_Class(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertViewStyleKit_drawCross_Class(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"drawCross" forClass:@"SCLAlertViewStyleKit"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SCLAlertViewStyleKit"), @selector(drawCross),(IMP) _rollout_impl_SCLAlertViewStyleKit_drawCross_Class, (IMP*)&_rollout_storage_SCLAlertViewStyleKit_drawCross_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"drawCross" forClass:@"SCLAlertViewStyleKit"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertViewStyleKit_drawNotice_Class(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertViewStyleKit_drawNotice_Class)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertViewStyleKit_drawNotice_Class(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"drawNotice" forClass:@"SCLAlertViewStyleKit"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertViewStyleKit_drawNotice_Class(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertViewStyleKit_drawNotice_Class(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertViewStyleKit_drawNotice_Class(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"drawNotice" forClass:@"SCLAlertViewStyleKit"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SCLAlertViewStyleKit"), @selector(drawNotice),(IMP) _rollout_impl_SCLAlertViewStyleKit_drawNotice_Class, (IMP*)&_rollout_storage_SCLAlertViewStyleKit_drawNotice_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"drawNotice" forClass:@"SCLAlertViewStyleKit"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertViewStyleKit_drawWarning_Class(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertViewStyleKit_drawWarning_Class)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertViewStyleKit_drawWarning_Class(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"drawWarning" forClass:@"SCLAlertViewStyleKit"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertViewStyleKit_drawWarning_Class(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertViewStyleKit_drawWarning_Class(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertViewStyleKit_drawWarning_Class(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"drawWarning" forClass:@"SCLAlertViewStyleKit"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SCLAlertViewStyleKit"), @selector(drawWarning),(IMP) _rollout_impl_SCLAlertViewStyleKit_drawWarning_Class, (IMP*)&_rollout_storage_SCLAlertViewStyleKit_drawWarning_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"drawWarning" forClass:@"SCLAlertViewStyleKit"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertViewStyleKit_drawInfo_Class(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertViewStyleKit_drawInfo_Class)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertViewStyleKit_drawInfo_Class(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"drawInfo" forClass:@"SCLAlertViewStyleKit"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertViewStyleKit_drawInfo_Class(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertViewStyleKit_drawInfo_Class(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertViewStyleKit_drawInfo_Class(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"drawInfo" forClass:@"SCLAlertViewStyleKit"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SCLAlertViewStyleKit"), @selector(drawInfo),(IMP) _rollout_impl_SCLAlertViewStyleKit_drawInfo_Class, (IMP*)&_rollout_storage_SCLAlertViewStyleKit_drawInfo_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"drawInfo" forClass:@"SCLAlertViewStyleKit"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SCLAlertViewStyleKit_drawEdit_Class(id rcv, SEL _cmd);
static void (*_rollout_storage_SCLAlertViewStyleKit_drawEdit_Class)(id rcv, SEL _cmd);
void  _rollout_impl_SCLAlertViewStyleKit_drawEdit_Class(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"drawEdit" forClass:@"SCLAlertViewStyleKit"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SCLAlertViewStyleKit_drawEdit_Class(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SCLAlertViewStyleKit_drawEdit_Class(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SCLAlertViewStyleKit_drawEdit_Class(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"drawEdit" forClass:@"SCLAlertViewStyleKit"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SCLAlertViewStyleKit"), @selector(drawEdit),(IMP) _rollout_impl_SCLAlertViewStyleKit_drawEdit_Class, (IMP*)&_rollout_storage_SCLAlertViewStyleKit_drawEdit_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"drawEdit" forClass:@"SCLAlertViewStyleKit"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertViewStyleKit_imageOfCheckmark_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_SCLAlertViewStyleKit_imageOfCheckmark_Class)(id rcv, SEL _cmd);
id  _rollout_impl_SCLAlertViewStyleKit_imageOfCheckmark_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"imageOfCheckmark" forClass:@"SCLAlertViewStyleKit"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertViewStyleKit_imageOfCheckmark_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertViewStyleKit_imageOfCheckmark_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertViewStyleKit_imageOfCheckmark_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"imageOfCheckmark" forClass:@"SCLAlertViewStyleKit"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SCLAlertViewStyleKit"), @selector(imageOfCheckmark),(IMP) _rollout_impl_SCLAlertViewStyleKit_imageOfCheckmark_Class, (IMP*)&_rollout_storage_SCLAlertViewStyleKit_imageOfCheckmark_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"imageOfCheckmark" forClass:@"SCLAlertViewStyleKit"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertViewStyleKit_imageOfCross_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_SCLAlertViewStyleKit_imageOfCross_Class)(id rcv, SEL _cmd);
id  _rollout_impl_SCLAlertViewStyleKit_imageOfCross_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"imageOfCross" forClass:@"SCLAlertViewStyleKit"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertViewStyleKit_imageOfCross_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertViewStyleKit_imageOfCross_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertViewStyleKit_imageOfCross_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"imageOfCross" forClass:@"SCLAlertViewStyleKit"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SCLAlertViewStyleKit"), @selector(imageOfCross),(IMP) _rollout_impl_SCLAlertViewStyleKit_imageOfCross_Class, (IMP*)&_rollout_storage_SCLAlertViewStyleKit_imageOfCross_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"imageOfCross" forClass:@"SCLAlertViewStyleKit"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertViewStyleKit_imageOfNotice_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_SCLAlertViewStyleKit_imageOfNotice_Class)(id rcv, SEL _cmd);
id  _rollout_impl_SCLAlertViewStyleKit_imageOfNotice_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"imageOfNotice" forClass:@"SCLAlertViewStyleKit"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertViewStyleKit_imageOfNotice_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertViewStyleKit_imageOfNotice_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertViewStyleKit_imageOfNotice_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"imageOfNotice" forClass:@"SCLAlertViewStyleKit"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SCLAlertViewStyleKit"), @selector(imageOfNotice),(IMP) _rollout_impl_SCLAlertViewStyleKit_imageOfNotice_Class, (IMP*)&_rollout_storage_SCLAlertViewStyleKit_imageOfNotice_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"imageOfNotice" forClass:@"SCLAlertViewStyleKit"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertViewStyleKit_imageOfWarning_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_SCLAlertViewStyleKit_imageOfWarning_Class)(id rcv, SEL _cmd);
id  _rollout_impl_SCLAlertViewStyleKit_imageOfWarning_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"imageOfWarning" forClass:@"SCLAlertViewStyleKit"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertViewStyleKit_imageOfWarning_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertViewStyleKit_imageOfWarning_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertViewStyleKit_imageOfWarning_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"imageOfWarning" forClass:@"SCLAlertViewStyleKit"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SCLAlertViewStyleKit"), @selector(imageOfWarning),(IMP) _rollout_impl_SCLAlertViewStyleKit_imageOfWarning_Class, (IMP*)&_rollout_storage_SCLAlertViewStyleKit_imageOfWarning_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"imageOfWarning" forClass:@"SCLAlertViewStyleKit"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertViewStyleKit_imageOfInfo_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_SCLAlertViewStyleKit_imageOfInfo_Class)(id rcv, SEL _cmd);
id  _rollout_impl_SCLAlertViewStyleKit_imageOfInfo_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"imageOfInfo" forClass:@"SCLAlertViewStyleKit"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertViewStyleKit_imageOfInfo_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertViewStyleKit_imageOfInfo_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertViewStyleKit_imageOfInfo_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"imageOfInfo" forClass:@"SCLAlertViewStyleKit"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SCLAlertViewStyleKit"), @selector(imageOfInfo),(IMP) _rollout_impl_SCLAlertViewStyleKit_imageOfInfo_Class, (IMP*)&_rollout_storage_SCLAlertViewStyleKit_imageOfInfo_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"imageOfInfo" forClass:@"SCLAlertViewStyleKit"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SCLAlertViewStyleKit_imageOfEdit_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_SCLAlertViewStyleKit_imageOfEdit_Class)(id rcv, SEL _cmd);
id  _rollout_impl_SCLAlertViewStyleKit_imageOfEdit_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"imageOfEdit" forClass:@"SCLAlertViewStyleKit"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SCLAlertViewStyleKit_imageOfEdit_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertViewStyleKit_imageOfEdit_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SCLAlertViewStyleKit_imageOfEdit_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"imageOfEdit" forClass:@"SCLAlertViewStyleKit"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SCLAlertViewStyleKit"), @selector(imageOfEdit),(IMP) _rollout_impl_SCLAlertViewStyleKit_imageOfEdit_Class, (IMP*)&_rollout_storage_SCLAlertViewStyleKit_imageOfEdit_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"imageOfEdit" forClass:@"SCLAlertViewStyleKit"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SJOPaperboyLocationManager_init_Instance(id rcv, SEL _cmd);
static id (*_rollout_storage_SJOPaperboyLocationManager_init_Instance)(id rcv, SEL _cmd);
id  _rollout_impl_SJOPaperboyLocationManager_init_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"init" forClass:@"SJOPaperboyLocationManager"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SJOPaperboyLocationManager_init_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SJOPaperboyLocationManager_init_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SJOPaperboyLocationManager_init_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"init" forClass:@"SJOPaperboyLocationManager"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyLocationManager"), @selector(init),(IMP) _rollout_impl_SJOPaperboyLocationManager_init_Instance, (IMP*)&_rollout_storage_SJOPaperboyLocationManager_init_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"init" forClass:@"SJOPaperboyLocationManager"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SJOPaperboyLocationManager_sharedInstance_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_SJOPaperboyLocationManager_sharedInstance_Class)(id rcv, SEL _cmd);
id  _rollout_impl_SJOPaperboyLocationManager_sharedInstance_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"sharedInstance" forClass:@"SJOPaperboyLocationManager"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SJOPaperboyLocationManager_sharedInstance_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SJOPaperboyLocationManager_sharedInstance_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SJOPaperboyLocationManager_sharedInstance_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"sharedInstance" forClass:@"SJOPaperboyLocationManager"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SJOPaperboyLocationManager"), @selector(sharedInstance),(IMP) _rollout_impl_SJOPaperboyLocationManager_sharedInstance_Class, (IMP*)&_rollout_storage_SJOPaperboyLocationManager_sharedInstance_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"sharedInstance" forClass:@"SJOPaperboyLocationManager"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SJOPaperboyLocationManager_sharedLocationManager_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_SJOPaperboyLocationManager_sharedLocationManager_Class)(id rcv, SEL _cmd);
id  _rollout_impl_SJOPaperboyLocationManager_sharedLocationManager_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"sharedLocationManager" forClass:@"SJOPaperboyLocationManager"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SJOPaperboyLocationManager_sharedLocationManager_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SJOPaperboyLocationManager_sharedLocationManager_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SJOPaperboyLocationManager_sharedLocationManager_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"sharedLocationManager" forClass:@"SJOPaperboyLocationManager"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"SJOPaperboyLocationManager"), @selector(sharedLocationManager),(IMP) _rollout_impl_SJOPaperboyLocationManager_sharedLocationManager_Class, (IMP*)&_rollout_storage_SJOPaperboyLocationManager_sharedLocationManager_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"sharedLocationManager" forClass:@"SJOPaperboyLocationManager"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyLocationManager_locationManager_didEnterRegion__Instance(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_region);
static void (*_rollout_storage_SJOPaperboyLocationManager_locationManager_didEnterRegion__Instance)(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_region);
void  _rollout_impl_SJOPaperboyLocationManager_locationManager_didEnterRegion__Instance(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_region){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_manager], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_region], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"locationManager:didEnterRegion:" forClass:@"SJOPaperboyLocationManager"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyLocationManager_locationManager_didEnterRegion__Instance(rcv, _cmd, __rollout_var_manager, __rollout_var_region); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyLocationManager_locationManager_didEnterRegion__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyLocationManager_locationManager_didEnterRegion__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"locationManager:didEnterRegion:" forClass:@"SJOPaperboyLocationManager"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyLocationManager"), @selector(locationManager:didEnterRegion:),(IMP) _rollout_impl_SJOPaperboyLocationManager_locationManager_didEnterRegion__Instance, (IMP*)&_rollout_storage_SJOPaperboyLocationManager_locationManager_didEnterRegion__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"locationManager:didEnterRegion:" forClass:@"SJOPaperboyLocationManager"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyLocationManager_locationManager_didExitRegion__Instance(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_region);
static void (*_rollout_storage_SJOPaperboyLocationManager_locationManager_didExitRegion__Instance)(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_region);
void  _rollout_impl_SJOPaperboyLocationManager_locationManager_didExitRegion__Instance(id rcv, SEL _cmd, id __rollout_var_manager, id __rollout_var_region){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_manager], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_region], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"locationManager:didExitRegion:" forClass:@"SJOPaperboyLocationManager"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyLocationManager_locationManager_didExitRegion__Instance(rcv, _cmd, __rollout_var_manager, __rollout_var_region); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyLocationManager_locationManager_didExitRegion__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyLocationManager_locationManager_didExitRegion__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"locationManager:didExitRegion:" forClass:@"SJOPaperboyLocationManager"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyLocationManager"), @selector(locationManager:didExitRegion:),(IMP) _rollout_impl_SJOPaperboyLocationManager_locationManager_didExitRegion__Instance, (IMP*)&_rollout_storage_SJOPaperboyLocationManager_locationManager_didExitRegion__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"locationManager:didExitRegion:" forClass:@"SJOPaperboyLocationManager"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyLocationManager_locationChanged_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SJOPaperboyLocationManager_locationChanged_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SJOPaperboyLocationManager_locationChanged_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"locationChanged" forClass:@"SJOPaperboyLocationManager"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyLocationManager_locationChanged_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyLocationManager_locationChanged_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyLocationManager_locationChanged_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"locationChanged" forClass:@"SJOPaperboyLocationManager"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyLocationManager"), @selector(locationChanged),(IMP) _rollout_impl_SJOPaperboyLocationManager_locationChanged_Instance, (IMP*)&_rollout_storage_SJOPaperboyLocationManager_locationChanged_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"locationChanged" forClass:@"SJOPaperboyLocationManager"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyLocationManager_checks_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SJOPaperboyLocationManager_checks_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SJOPaperboyLocationManager_checks_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"checks" forClass:@"SJOPaperboyLocationManager"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyLocationManager_checks_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyLocationManager_checks_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyLocationManager_checks_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"checks" forClass:@"SJOPaperboyLocationManager"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyLocationManager"), @selector(checks),(IMP) _rollout_impl_SJOPaperboyLocationManager_checks_Instance, (IMP*)&_rollout_storage_SJOPaperboyLocationManager_checks_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"checks" forClass:@"SJOPaperboyLocationManager"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyLocationManager_torchOnOff__Instance(id rcv, SEL _cmd, signed char __rollout_var_onOff);
static void (*_rollout_storage_SJOPaperboyLocationManager_torchOnOff__Instance)(id rcv, SEL _cmd, signed char __rollout_var_onOff);
void  _rollout_impl_SJOPaperboyLocationManager_torchOnOff__Instance(id rcv, SEL _cmd, signed char __rollout_var_onOff){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithSChar:__rollout_var_onOff], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"torchOnOff:" forClass:@"SJOPaperboyLocationManager"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyLocationManager_torchOnOff__Instance(rcv, _cmd, __rollout_var_onOff); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyLocationManager_torchOnOff__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyLocationManager_torchOnOff__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).sCharValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"torchOnOff:" forClass:@"SJOPaperboyLocationManager"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyLocationManager"), @selector(torchOnOff:),(IMP) _rollout_impl_SJOPaperboyLocationManager_torchOnOff__Instance, (IMP*)&_rollout_storage_SJOPaperboyLocationManager_torchOnOff__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"torchOnOff:" forClass:@"SJOPaperboyLocationManager"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SJOPaperboyLocationManager_drain_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SJOPaperboyLocationManager_drain_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SJOPaperboyLocationManager_drain_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"drain" forClass:@"SJOPaperboyLocationManager"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SJOPaperboyLocationManager_drain_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SJOPaperboyLocationManager_drain_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SJOPaperboyLocationManager_drain_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"drain" forClass:@"SJOPaperboyLocationManager"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SJOPaperboyLocationManager"), @selector(drain),(IMP) _rollout_impl_SJOPaperboyLocationManager_drain_Instance, (IMP*)&_rollout_storage_SJOPaperboyLocationManager_drain_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"drain" forClass:@"SJOPaperboyLocationManager"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_mobilappDetailViewController_initWithNibName_bundle__Instance(id rcv, SEL _cmd, id __rollout_var_nibNameOrNil, id __rollout_var_nibBundleOrNil);
static id (*_rollout_storage_mobilappDetailViewController_initWithNibName_bundle__Instance)(id rcv, SEL _cmd, id __rollout_var_nibNameOrNil, id __rollout_var_nibBundleOrNil);
id  _rollout_impl_mobilappDetailViewController_initWithNibName_bundle__Instance(id rcv, SEL _cmd, id __rollout_var_nibNameOrNil, id __rollout_var_nibBundleOrNil){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_nibNameOrNil], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_nibBundleOrNil], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithNibName:bundle:" forClass:@"mobilappDetailViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_mobilappDetailViewController_initWithNibName_bundle__Instance(rcv, _cmd, __rollout_var_nibNameOrNil, __rollout_var_nibBundleOrNil);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_mobilappDetailViewController_initWithNibName_bundle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_mobilappDetailViewController_initWithNibName_bundle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithNibName:bundle:" forClass:@"mobilappDetailViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"mobilappDetailViewController"), @selector(initWithNibName:bundle:),(IMP) _rollout_impl_mobilappDetailViewController_initWithNibName_bundle__Instance, (IMP*)&_rollout_storage_mobilappDetailViewController_initWithNibName_bundle__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithNibName:bundle:" forClass:@"mobilappDetailViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_mobilappDetailViewController_viewDidLoad_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_mobilappDetailViewController_viewDidLoad_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_mobilappDetailViewController_viewDidLoad_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewDidLoad" forClass:@"mobilappDetailViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_mobilappDetailViewController_viewDidLoad_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_mobilappDetailViewController_viewDidLoad_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_mobilappDetailViewController_viewDidLoad_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewDidLoad" forClass:@"mobilappDetailViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"mobilappDetailViewController"), @selector(viewDidLoad),(IMP) _rollout_impl_mobilappDetailViewController_viewDidLoad_Instance, (IMP*)&_rollout_storage_mobilappDetailViewController_viewDidLoad_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewDidLoad" forClass:@"mobilappDetailViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_mobilappDetailViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_mobilappDetailViewController_didReceiveMemoryWarning_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_mobilappDetailViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"didReceiveMemoryWarning" forClass:@"mobilappDetailViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_mobilappDetailViewController_didReceiveMemoryWarning_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_mobilappDetailViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_mobilappDetailViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"mobilappDetailViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"mobilappDetailViewController"), @selector(didReceiveMemoryWarning),(IMP) _rollout_impl_mobilappDetailViewController_didReceiveMemoryWarning_Instance, (IMP*)&_rollout_storage_mobilappDetailViewController_didReceiveMemoryWarning_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"mobilappDetailViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_ViewController_viewDidLoad_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_ViewController_viewDidLoad_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_ViewController_viewDidLoad_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewDidLoad" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_ViewController_viewDidLoad_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_ViewController_viewDidLoad_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_ViewController_viewDidLoad_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewDidLoad" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(viewDidLoad),(IMP) _rollout_impl_ViewController_viewDidLoad_Instance, (IMP*)&_rollout_storage_ViewController_viewDidLoad_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewDidLoad" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_ViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_ViewController_didReceiveMemoryWarning_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_ViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"didReceiveMemoryWarning" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_ViewController_didReceiveMemoryWarning_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_ViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_ViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(didReceiveMemoryWarning),(IMP) _rollout_impl_ViewController_didReceiveMemoryWarning_Instance, (IMP*)&_rollout_storage_ViewController_didReceiveMemoryWarning_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_ViewController_exit_app__Instance(id rcv, SEL _cmd, id __rollout_var_sender);
static void (*_rollout_storage_ViewController_exit_app__Instance)(id rcv, SEL _cmd, id __rollout_var_sender);
void  _rollout_impl_ViewController_exit_app__Instance(id rcv, SEL _cmd, id __rollout_var_sender){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_sender], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"exit_app:" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_ViewController_exit_app__Instance(rcv, _cmd, __rollout_var_sender); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_ViewController_exit_app__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_ViewController_exit_app__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"exit_app:" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(exit_app:),(IMP) _rollout_impl_ViewController_exit_app__Instance, (IMP*)&_rollout_storage_ViewController_exit_app__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"exit_app:" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_ViewController_video__Instance(id rcv, SEL _cmd, id __rollout_var_sender);
static void (*_rollout_storage_ViewController_video__Instance)(id rcv, SEL _cmd, id __rollout_var_sender);
void  _rollout_impl_ViewController_video__Instance(id rcv, SEL _cmd, id __rollout_var_sender){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_sender], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"video:" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_ViewController_video__Instance(rcv, _cmd, __rollout_var_sender); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_ViewController_video__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_ViewController_video__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"video:" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(video:),(IMP) _rollout_impl_ViewController_video__Instance, (IMP*)&_rollout_storage_ViewController_video__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"video:" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_ViewController_makePrediction_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_ViewController_makePrediction_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_ViewController_makePrediction_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"makePrediction" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_ViewController_makePrediction_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_ViewController_makePrediction_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_ViewController_makePrediction_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"makePrediction" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(makePrediction),(IMP) _rollout_impl_ViewController_makePrediction_Instance, (IMP*)&_rollout_storage_ViewController_makePrediction_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"makePrediction" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_ViewController_motionBegan_withEvent__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event);
static void (*_rollout_storage_ViewController_motionBegan_withEvent__Instance)(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event);
void  _rollout_impl_ViewController_motionBegan_withEvent__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_motion], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_event], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"motionBegan:withEvent:" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_ViewController_motionBegan_withEvent__Instance(rcv, _cmd, __rollout_var_motion, __rollout_var_event); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_ViewController_motionBegan_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_ViewController_motionBegan_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"motionBegan:withEvent:" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(motionBegan:withEvent:),(IMP) _rollout_impl_ViewController_motionBegan_withEvent__Instance, (IMP*)&_rollout_storage_ViewController_motionBegan_withEvent__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"motionBegan:withEvent:" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_ViewController_motionEnded_withEvent__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event);
static void (*_rollout_storage_ViewController_motionEnded_withEvent__Instance)(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event);
void  _rollout_impl_ViewController_motionEnded_withEvent__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_motion], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_event], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"motionEnded:withEvent:" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_ViewController_motionEnded_withEvent__Instance(rcv, _cmd, __rollout_var_motion, __rollout_var_event); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_ViewController_motionEnded_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_ViewController_motionEnded_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"motionEnded:withEvent:" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(motionEnded:withEvent:),(IMP) _rollout_impl_ViewController_motionEnded_withEvent__Instance, (IMP*)&_rollout_storage_ViewController_motionEnded_withEvent__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"motionEnded:withEvent:" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_ViewController_motionCancelled_withEvent__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event);
static void (*_rollout_storage_ViewController_motionCancelled_withEvent__Instance)(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event);
void  _rollout_impl_ViewController_motionCancelled_withEvent__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_motion, id __rollout_var_event){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_motion], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_event], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"motionCancelled:withEvent:" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_ViewController_motionCancelled_withEvent__Instance(rcv, _cmd, __rollout_var_motion, __rollout_var_event); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_ViewController_motionCancelled_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_ViewController_motionCancelled_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"motionCancelled:withEvent:" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(motionCancelled:withEvent:),(IMP) _rollout_impl_ViewController_motionCancelled_withEvent__Instance, (IMP*)&_rollout_storage_ViewController_motionCancelled_withEvent__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"motionCancelled:withEvent:" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_ViewController_touchesBegan_withEvent__Instance(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event);
static void (*_rollout_storage_ViewController_touchesBegan_withEvent__Instance)(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event);
void  _rollout_impl_ViewController_touchesBegan_withEvent__Instance(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_touches], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_event], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"touchesBegan:withEvent:" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_ViewController_touchesBegan_withEvent__Instance(rcv, _cmd, __rollout_var_touches, __rollout_var_event); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_ViewController_touchesBegan_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_ViewController_touchesBegan_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"touchesBegan:withEvent:" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(touchesBegan:withEvent:),(IMP) _rollout_impl_ViewController_touchesBegan_withEvent__Instance, (IMP*)&_rollout_storage_ViewController_touchesBegan_withEvent__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"touchesBegan:withEvent:" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_ViewController_touchesEnded_withEvent__Instance(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event);
static void (*_rollout_storage_ViewController_touchesEnded_withEvent__Instance)(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event);
void  _rollout_impl_ViewController_touchesEnded_withEvent__Instance(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_touches], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_event], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"touchesEnded:withEvent:" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_ViewController_touchesEnded_withEvent__Instance(rcv, _cmd, __rollout_var_touches, __rollout_var_event); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_ViewController_touchesEnded_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_ViewController_touchesEnded_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"touchesEnded:withEvent:" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(touchesEnded:withEvent:),(IMP) _rollout_impl_ViewController_touchesEnded_withEvent__Instance, (IMP*)&_rollout_storage_ViewController_touchesEnded_withEvent__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"touchesEnded:withEvent:" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_ViewController_touchesCancelled_withEvent__Instance(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event);
static void (*_rollout_storage_ViewController_touchesCancelled_withEvent__Instance)(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event);
void  _rollout_impl_ViewController_touchesCancelled_withEvent__Instance(id rcv, SEL _cmd, id __rollout_var_touches, id __rollout_var_event){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_touches], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_event], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"touchesCancelled:withEvent:" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_ViewController_touchesCancelled_withEvent__Instance(rcv, _cmd, __rollout_var_touches, __rollout_var_event); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_ViewController_touchesCancelled_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_ViewController_touchesCancelled_withEvent__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"touchesCancelled:withEvent:" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(touchesCancelled:withEvent:),(IMP) _rollout_impl_ViewController_touchesCancelled_withEvent__Instance, (IMP*)&_rollout_storage_ViewController_touchesCancelled_withEvent__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"touchesCancelled:withEvent:" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_ViewController_reverseString__Instance(id rcv, SEL _cmd, id __rollout_var_stringToReverse);
static id (*_rollout_storage_ViewController_reverseString__Instance)(id rcv, SEL _cmd, id __rollout_var_stringToReverse);
id  _rollout_impl_ViewController_reverseString__Instance(id rcv, SEL _cmd, id __rollout_var_stringToReverse){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_stringToReverse], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"reverseString:" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_ViewController_reverseString__Instance(rcv, _cmd, __rollout_var_stringToReverse);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_ViewController_reverseString__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_ViewController_reverseString__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"reverseString:" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(reverseString:),(IMP) _rollout_impl_ViewController_reverseString__Instance, (IMP*)&_rollout_storage_ViewController_reverseString__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"reverseString:" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_ViewController_doSomethingThatTakesSomeTimesWithCompletionBlock__Instance(id rcv, SEL _cmd, id __rollout_var_completion);
static void (*_rollout_storage_ViewController_doSomethingThatTakesSomeTimesWithCompletionBlock__Instance)(id rcv, SEL _cmd, id __rollout_var_completion);
void  _rollout_impl_ViewController_doSomethingThatTakesSomeTimesWithCompletionBlock__Instance(id rcv, SEL _cmd, id __rollout_var_completion){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithBlockPointer:__rollout_var_completion], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"doSomethingThatTakesSomeTimesWithCompletionBlock:" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_ViewController_doSomethingThatTakesSomeTimesWithCompletionBlock__Instance(rcv, _cmd, __rollout_var_completion); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_ViewController_doSomethingThatTakesSomeTimesWithCompletionBlock__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).blockPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_ViewController_doSomethingThatTakesSomeTimesWithCompletionBlock__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).blockPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"doSomethingThatTakesSomeTimesWithCompletionBlock:" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(doSomethingThatTakesSomeTimesWithCompletionBlock:),(IMP) _rollout_impl_ViewController_doSomethingThatTakesSomeTimesWithCompletionBlock__Instance, (IMP*)&_rollout_storage_ViewController_doSomethingThatTakesSomeTimesWithCompletionBlock__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"doSomethingThatTakesSomeTimesWithCompletionBlock:" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_ViewController_tapGestureRecognized__Instance(id rcv, SEL _cmd, id __rollout_var_tapGesture);
static void (*_rollout_storage_ViewController_tapGestureRecognized__Instance)(id rcv, SEL _cmd, id __rollout_var_tapGesture);
void  _rollout_impl_ViewController_tapGestureRecognized__Instance(id rcv, SEL _cmd, id __rollout_var_tapGesture){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_tapGesture], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"tapGestureRecognized:" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_ViewController_tapGestureRecognized__Instance(rcv, _cmd, __rollout_var_tapGesture); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_ViewController_tapGestureRecognized__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_ViewController_tapGestureRecognized__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"tapGestureRecognized:" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(tapGestureRecognized:),(IMP) _rollout_impl_ViewController_tapGestureRecognized__Instance, (IMP*)&_rollout_storage_ViewController_tapGestureRecognized__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"tapGestureRecognized:" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_ViewController_gestureRecognizer_shouldReceiveTouch__Instance(id rcv, SEL _cmd, id __rollout_var_gestureRecognizer, id __rollout_var_touch);
static signed char (*_rollout_storage_ViewController_gestureRecognizer_shouldReceiveTouch__Instance)(id rcv, SEL _cmd, id __rollout_var_gestureRecognizer, id __rollout_var_touch);
signed char  _rollout_impl_ViewController_gestureRecognizer_shouldReceiveTouch__Instance(id rcv, SEL _cmd, id __rollout_var_gestureRecognizer, id __rollout_var_touch){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_gestureRecognizer], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_touch], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"gestureRecognizer:shouldReceiveTouch:" forClass:@"ViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_ViewController_gestureRecognizer_shouldReceiveTouch__Instance(rcv, _cmd, __rollout_var_gestureRecognizer, __rollout_var_touch);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_ViewController_gestureRecognizer_shouldReceiveTouch__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_ViewController_gestureRecognizer_shouldReceiveTouch__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"gestureRecognizer:shouldReceiveTouch:" forClass:@"ViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"ViewController"), @selector(gestureRecognizer:shouldReceiveTouch:),(IMP) _rollout_impl_ViewController_gestureRecognizer_shouldReceiveTouch__Instance, (IMP*)&_rollout_storage_ViewController_gestureRecognizer_shouldReceiveTouch__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"gestureRecognizer:shouldReceiveTouch:" forClass:@"ViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_MoviePlayerUserPrefs_registerDefaults_Class(id rcv, SEL _cmd);
static void (*_rollout_storage_MoviePlayerUserPrefs_registerDefaults_Class)(id rcv, SEL _cmd);
void  _rollout_impl_MoviePlayerUserPrefs_registerDefaults_Class(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"registerDefaults" forClass:@"MoviePlayerUserPrefs"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_MoviePlayerUserPrefs_registerDefaults_Class(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_MoviePlayerUserPrefs_registerDefaults_Class(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_MoviePlayerUserPrefs_registerDefaults_Class(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"registerDefaults" forClass:@"MoviePlayerUserPrefs"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"MoviePlayerUserPrefs"), @selector(registerDefaults),(IMP) _rollout_impl_MoviePlayerUserPrefs_registerDefaults_Class, (IMP*)&_rollout_storage_MoviePlayerUserPrefs_registerDefaults_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"registerDefaults" forClass:@"MoviePlayerUserPrefs"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static __rollout_enum  _rollout_impl_MoviePlayerUserPrefs_scalingModeUserSetting_Class(id rcv, SEL _cmd);
static __rollout_enum (*_rollout_storage_MoviePlayerUserPrefs_scalingModeUserSetting_Class)(id rcv, SEL _cmd);
__rollout_enum  _rollout_impl_MoviePlayerUserPrefs_scalingModeUserSetting_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"scalingModeUserSetting" forClass:@"MoviePlayerUserPrefs"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_MoviePlayerUserPrefs_scalingModeUserSetting_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:_rollout_storage_MoviePlayerUserPrefs_scalingModeUserSetting_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:_rollout_storage_MoviePlayerUserPrefs_scalingModeUserSetting_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.enumValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"scalingModeUserSetting" forClass:@"MoviePlayerUserPrefs"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"MoviePlayerUserPrefs"), @selector(scalingModeUserSetting),(IMP) _rollout_impl_MoviePlayerUserPrefs_scalingModeUserSetting_Class, (IMP*)&_rollout_storage_MoviePlayerUserPrefs_scalingModeUserSetting_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"scalingModeUserSetting" forClass:@"MoviePlayerUserPrefs"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static __rollout_enum  _rollout_impl_MoviePlayerUserPrefs_controlStyleUserSetting_Class(id rcv, SEL _cmd);
static __rollout_enum (*_rollout_storage_MoviePlayerUserPrefs_controlStyleUserSetting_Class)(id rcv, SEL _cmd);
__rollout_enum  _rollout_impl_MoviePlayerUserPrefs_controlStyleUserSetting_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"controlStyleUserSetting" forClass:@"MoviePlayerUserPrefs"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_MoviePlayerUserPrefs_controlStyleUserSetting_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:_rollout_storage_MoviePlayerUserPrefs_controlStyleUserSetting_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:_rollout_storage_MoviePlayerUserPrefs_controlStyleUserSetting_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.enumValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"controlStyleUserSetting" forClass:@"MoviePlayerUserPrefs"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"MoviePlayerUserPrefs"), @selector(controlStyleUserSetting),(IMP) _rollout_impl_MoviePlayerUserPrefs_controlStyleUserSetting_Class, (IMP*)&_rollout_storage_MoviePlayerUserPrefs_controlStyleUserSetting_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"controlStyleUserSetting" forClass:@"MoviePlayerUserPrefs"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_MoviePlayerUserPrefs_backgroundColorUserSetting_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_MoviePlayerUserPrefs_backgroundColorUserSetting_Class)(id rcv, SEL _cmd);
id  _rollout_impl_MoviePlayerUserPrefs_backgroundColorUserSetting_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"backgroundColorUserSetting" forClass:@"MoviePlayerUserPrefs"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_MoviePlayerUserPrefs_backgroundColorUserSetting_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_MoviePlayerUserPrefs_backgroundColorUserSetting_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_MoviePlayerUserPrefs_backgroundColorUserSetting_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"backgroundColorUserSetting" forClass:@"MoviePlayerUserPrefs"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"MoviePlayerUserPrefs"), @selector(backgroundColorUserSetting),(IMP) _rollout_impl_MoviePlayerUserPrefs_backgroundColorUserSetting_Class, (IMP*)&_rollout_storage_MoviePlayerUserPrefs_backgroundColorUserSetting_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"backgroundColorUserSetting" forClass:@"MoviePlayerUserPrefs"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static __rollout_enum  _rollout_impl_MoviePlayerUserPrefs_repeatModeUserSetting_Class(id rcv, SEL _cmd);
static __rollout_enum (*_rollout_storage_MoviePlayerUserPrefs_repeatModeUserSetting_Class)(id rcv, SEL _cmd);
__rollout_enum  _rollout_impl_MoviePlayerUserPrefs_repeatModeUserSetting_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"repeatModeUserSetting" forClass:@"MoviePlayerUserPrefs"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_MoviePlayerUserPrefs_repeatModeUserSetting_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:_rollout_storage_MoviePlayerUserPrefs_repeatModeUserSetting_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:_rollout_storage_MoviePlayerUserPrefs_repeatModeUserSetting_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.enumValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"repeatModeUserSetting" forClass:@"MoviePlayerUserPrefs"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"MoviePlayerUserPrefs"), @selector(repeatModeUserSetting),(IMP) _rollout_impl_MoviePlayerUserPrefs_repeatModeUserSetting_Class, (IMP*)&_rollout_storage_MoviePlayerUserPrefs_repeatModeUserSetting_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"repeatModeUserSetting" forClass:@"MoviePlayerUserPrefs"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_MoviePlayerUserPrefs_backgroundImageUserSetting_Class(id rcv, SEL _cmd);
static signed char (*_rollout_storage_MoviePlayerUserPrefs_backgroundImageUserSetting_Class)(id rcv, SEL _cmd);
signed char  _rollout_impl_MoviePlayerUserPrefs_backgroundImageUserSetting_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"backgroundImageUserSetting" forClass:@"MoviePlayerUserPrefs"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_MoviePlayerUserPrefs_backgroundImageUserSetting_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_MoviePlayerUserPrefs_backgroundImageUserSetting_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_MoviePlayerUserPrefs_backgroundImageUserSetting_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"backgroundImageUserSetting" forClass:@"MoviePlayerUserPrefs"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"MoviePlayerUserPrefs"), @selector(backgroundImageUserSetting),(IMP) _rollout_impl_MoviePlayerUserPrefs_backgroundImageUserSetting_Class, (IMP*)&_rollout_storage_MoviePlayerUserPrefs_backgroundImageUserSetting_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"backgroundImageUserSetting" forClass:@"MoviePlayerUserPrefs"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_advantageDetailViewController_initWithNibName_bundle__Instance(id rcv, SEL _cmd, id __rollout_var_nibNameOrNil, id __rollout_var_nibBundleOrNil);
static id (*_rollout_storage_advantageDetailViewController_initWithNibName_bundle__Instance)(id rcv, SEL _cmd, id __rollout_var_nibNameOrNil, id __rollout_var_nibBundleOrNil);
id  _rollout_impl_advantageDetailViewController_initWithNibName_bundle__Instance(id rcv, SEL _cmd, id __rollout_var_nibNameOrNil, id __rollout_var_nibBundleOrNil){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_nibNameOrNil], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_nibBundleOrNil], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithNibName:bundle:" forClass:@"advantageDetailViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_advantageDetailViewController_initWithNibName_bundle__Instance(rcv, _cmd, __rollout_var_nibNameOrNil, __rollout_var_nibBundleOrNil);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_advantageDetailViewController_initWithNibName_bundle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_advantageDetailViewController_initWithNibName_bundle__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithNibName:bundle:" forClass:@"advantageDetailViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"advantageDetailViewController"), @selector(initWithNibName:bundle:),(IMP) _rollout_impl_advantageDetailViewController_initWithNibName_bundle__Instance, (IMP*)&_rollout_storage_advantageDetailViewController_initWithNibName_bundle__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithNibName:bundle:" forClass:@"advantageDetailViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_advantageDetailViewController_viewDidLoad_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_advantageDetailViewController_viewDidLoad_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_advantageDetailViewController_viewDidLoad_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"viewDidLoad" forClass:@"advantageDetailViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_advantageDetailViewController_viewDidLoad_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_advantageDetailViewController_viewDidLoad_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_advantageDetailViewController_viewDidLoad_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"viewDidLoad" forClass:@"advantageDetailViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"advantageDetailViewController"), @selector(viewDidLoad),(IMP) _rollout_impl_advantageDetailViewController_viewDidLoad_Instance, (IMP*)&_rollout_storage_advantageDetailViewController_viewDidLoad_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"viewDidLoad" forClass:@"advantageDetailViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_advantageDetailViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_advantageDetailViewController_didReceiveMemoryWarning_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_advantageDetailViewController_didReceiveMemoryWarning_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"didReceiveMemoryWarning" forClass:@"advantageDetailViewController"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_advantageDetailViewController_didReceiveMemoryWarning_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_advantageDetailViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_advantageDetailViewController_didReceiveMemoryWarning_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"advantageDetailViewController"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"advantageDetailViewController"), @selector(didReceiveMemoryWarning),(IMP) _rollout_impl_advantageDetailViewController_didReceiveMemoryWarning_Instance, (IMP*)&_rollout_storage_advantageDetailViewController_didReceiveMemoryWarning_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"didReceiveMemoryWarning" forClass:@"advantageDetailViewController"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SAHighlightedTextField_initWithFrame__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_frame);
static id (*_rollout_storage_SAHighlightedTextField_initWithFrame__Instance)(id rcv, SEL _cmd, struct CGRect __rollout_var_frame);
id  _rollout_impl_SAHighlightedTextField_initWithFrame__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_frame){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithRecordPointer:&__rollout_var_frame ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithFrame:" forClass:@"SAHighlightedTextField"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SAHighlightedTextField_initWithFrame__Instance(rcv, _cmd, __rollout_var_frame);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SAHighlightedTextField_initWithFrame__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SAHighlightedTextField_initWithFrame__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithFrame:" forClass:@"SAHighlightedTextField"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SAHighlightedTextField"), @selector(initWithFrame:),(IMP) _rollout_impl_SAHighlightedTextField_initWithFrame__Instance, (IMP*)&_rollout_storage_SAHighlightedTextField_initWithFrame__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithFrame:" forClass:@"SAHighlightedTextField"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_SAHighlightedTextField_initWithCoder__Instance(id rcv, SEL _cmd, id __rollout_var_aDecoder);
static id (*_rollout_storage_SAHighlightedTextField_initWithCoder__Instance)(id rcv, SEL _cmd, id __rollout_var_aDecoder);
id  _rollout_impl_SAHighlightedTextField_initWithCoder__Instance(id rcv, SEL _cmd, id __rollout_var_aDecoder){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_aDecoder], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithCoder:" forClass:@"SAHighlightedTextField"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SAHighlightedTextField_initWithCoder__Instance(rcv, _cmd, __rollout_var_aDecoder);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SAHighlightedTextField_initWithCoder__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_SAHighlightedTextField_initWithCoder__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithCoder:" forClass:@"SAHighlightedTextField"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SAHighlightedTextField"), @selector(initWithCoder:),(IMP) _rollout_impl_SAHighlightedTextField_initWithCoder__Instance, (IMP*)&_rollout_storage_SAHighlightedTextField_initWithCoder__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithCoder:" forClass:@"SAHighlightedTextField"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SAHighlightedTextField_commonInit_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SAHighlightedTextField_commonInit_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SAHighlightedTextField_commonInit_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"commonInit" forClass:@"SAHighlightedTextField"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SAHighlightedTextField_commonInit_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SAHighlightedTextField_commonInit_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SAHighlightedTextField_commonInit_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"commonInit" forClass:@"SAHighlightedTextField"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SAHighlightedTextField"), @selector(commonInit),(IMP) _rollout_impl_SAHighlightedTextField_commonInit_Instance, (IMP*)&_rollout_storage_SAHighlightedTextField_commonInit_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"commonInit" forClass:@"SAHighlightedTextField"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SAHighlightedTextField_configureWithBackgroundImage_andHighlightedImage_withResizeCapInsets__Instance(id rcv, SEL _cmd, id __rollout_var_bgImage, id __rollout_var_highlightedImage, struct UIEdgeInsets __rollout_var_insets);
static void (*_rollout_storage_SAHighlightedTextField_configureWithBackgroundImage_andHighlightedImage_withResizeCapInsets__Instance)(id rcv, SEL _cmd, id __rollout_var_bgImage, id __rollout_var_highlightedImage, struct UIEdgeInsets __rollout_var_insets);
void  _rollout_impl_SAHighlightedTextField_configureWithBackgroundImage_andHighlightedImage_withResizeCapInsets__Instance(id rcv, SEL _cmd, id __rollout_var_bgImage, id __rollout_var_highlightedImage, struct UIEdgeInsets __rollout_var_insets){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_bgImage], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_highlightedImage], 
     [[RolloutTypeWrapper alloc] initWithRecordPointer:&__rollout_var_insets ofSize:sizeof(struct UIEdgeInsets) shouldBeFreedInDealloc:NO], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"configureWithBackgroundImage:andHighlightedImage:withResizeCapInsets:" forClass:@"SAHighlightedTextField"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SAHighlightedTextField_configureWithBackgroundImage_andHighlightedImage_withResizeCapInsets__Instance(rcv, _cmd, __rollout_var_bgImage, __rollout_var_highlightedImage, __rollout_var_insets); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SAHighlightedTextField_configureWithBackgroundImage_andHighlightedImage_withResizeCapInsets__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, *(struct UIEdgeInsets*)((RolloutTypeWrapper*)arguments[2]).recordPointer);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SAHighlightedTextField_configureWithBackgroundImage_andHighlightedImage_withResizeCapInsets__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, *(struct UIEdgeInsets*)((RolloutTypeWrapper*)arguments[2]).recordPointer);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"configureWithBackgroundImage:andHighlightedImage:withResizeCapInsets:" forClass:@"SAHighlightedTextField"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SAHighlightedTextField"), @selector(configureWithBackgroundImage:andHighlightedImage:withResizeCapInsets:),(IMP) _rollout_impl_SAHighlightedTextField_configureWithBackgroundImage_andHighlightedImage_withResizeCapInsets__Instance, (IMP*)&_rollout_storage_SAHighlightedTextField_configureWithBackgroundImage_andHighlightedImage_withResizeCapInsets__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"configureWithBackgroundImage:andHighlightedImage:withResizeCapInsets:" forClass:@"SAHighlightedTextField"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SAHighlightedTextField_updateView_Instance(id rcv, SEL _cmd);
static void (*_rollout_storage_SAHighlightedTextField_updateView_Instance)(id rcv, SEL _cmd);
void  _rollout_impl_SAHighlightedTextField_updateView_Instance(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"updateView" forClass:@"SAHighlightedTextField"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SAHighlightedTextField_updateView_Instance(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SAHighlightedTextField_updateView_Instance(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SAHighlightedTextField_updateView_Instance(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"updateView" forClass:@"SAHighlightedTextField"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SAHighlightedTextField"), @selector(updateView),(IMP) _rollout_impl_SAHighlightedTextField_updateView_Instance, (IMP*)&_rollout_storage_SAHighlightedTextField_updateView_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"updateView" forClass:@"SAHighlightedTextField"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_SAHighlightedTextField_toggleState__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_toState);
static void (*_rollout_storage_SAHighlightedTextField_toggleState__Instance)(id rcv, SEL _cmd, __rollout_enum __rollout_var_toState);
void  _rollout_impl_SAHighlightedTextField_toggleState__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_toState){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_toState], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"toggleState:" forClass:@"SAHighlightedTextField"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_SAHighlightedTextField_toggleState__Instance(rcv, _cmd, __rollout_var_toState); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_SAHighlightedTextField_toggleState__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_SAHighlightedTextField_toggleState__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"toggleState:" forClass:@"SAHighlightedTextField"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SAHighlightedTextField"), @selector(toggleState:),(IMP) _rollout_impl_SAHighlightedTextField_toggleState__Instance, (IMP*)&_rollout_storage_SAHighlightedTextField_toggleState__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"toggleState:" forClass:@"SAHighlightedTextField"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_SAHighlightedTextField_becomeFirstResponder_Instance(id rcv, SEL _cmd);
static signed char (*_rollout_storage_SAHighlightedTextField_becomeFirstResponder_Instance)(id rcv, SEL _cmd);
signed char  _rollout_impl_SAHighlightedTextField_becomeFirstResponder_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"becomeFirstResponder" forClass:@"SAHighlightedTextField"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SAHighlightedTextField_becomeFirstResponder_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SAHighlightedTextField_becomeFirstResponder_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SAHighlightedTextField_becomeFirstResponder_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"becomeFirstResponder" forClass:@"SAHighlightedTextField"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SAHighlightedTextField"), @selector(becomeFirstResponder),(IMP) _rollout_impl_SAHighlightedTextField_becomeFirstResponder_Instance, (IMP*)&_rollout_storage_SAHighlightedTextField_becomeFirstResponder_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"becomeFirstResponder" forClass:@"SAHighlightedTextField"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static signed char  _rollout_impl_SAHighlightedTextField_resignFirstResponder_Instance(id rcv, SEL _cmd);
static signed char (*_rollout_storage_SAHighlightedTextField_resignFirstResponder_Instance)(id rcv, SEL _cmd);
signed char  _rollout_impl_SAHighlightedTextField_resignFirstResponder_Instance(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"resignFirstResponder" forClass:@"SAHighlightedTextField"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SAHighlightedTextField_resignFirstResponder_Instance(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SAHighlightedTextField_resignFirstResponder_Instance(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithSChar:_rollout_storage_SAHighlightedTextField_resignFirstResponder_Instance(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.sCharValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"resignFirstResponder" forClass:@"SAHighlightedTextField"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SAHighlightedTextField"), @selector(resignFirstResponder),(IMP) _rollout_impl_SAHighlightedTextField_resignFirstResponder_Instance, (IMP*)&_rollout_storage_SAHighlightedTextField_resignFirstResponder_Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"resignFirstResponder" forClass:@"SAHighlightedTextField"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static struct CGRect  _rollout_impl_SAHighlightedTextField_generalInsetRectForBounds__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_bounds);
static struct CGRect (*_rollout_storage_SAHighlightedTextField_generalInsetRectForBounds__Instance)(id rcv, SEL _cmd, struct CGRect __rollout_var_bounds);
struct CGRect  _rollout_impl_SAHighlightedTextField_generalInsetRectForBounds__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_bounds){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithRecordPointer:&__rollout_var_bounds ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"generalInsetRectForBounds:" forClass:@"SAHighlightedTextField"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SAHighlightedTextField_generalInsetRectForBounds__Instance(rcv, _cmd, __rollout_var_bounds);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              {struct CGRect record = _rollout_storage_SAHighlightedTextField_generalInsetRectForBounds__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer);
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithRecordPointer:&record ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO];}
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              {struct CGRect record = _rollout_storage_SAHighlightedTextField_generalInsetRectForBounds__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer);
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithRecordPointer:&record ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO];};
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return *((struct CGRect *)__rollout_r.recordPointer);
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"generalInsetRectForBounds:" forClass:@"SAHighlightedTextField"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SAHighlightedTextField"), @selector(generalInsetRectForBounds:),(IMP) _rollout_impl_SAHighlightedTextField_generalInsetRectForBounds__Instance, (IMP*)&_rollout_storage_SAHighlightedTextField_generalInsetRectForBounds__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"generalInsetRectForBounds:" forClass:@"SAHighlightedTextField"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static struct CGRect  _rollout_impl_SAHighlightedTextField_placeholderRectForBounds__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_bounds);
static struct CGRect (*_rollout_storage_SAHighlightedTextField_placeholderRectForBounds__Instance)(id rcv, SEL _cmd, struct CGRect __rollout_var_bounds);
struct CGRect  _rollout_impl_SAHighlightedTextField_placeholderRectForBounds__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_bounds){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithRecordPointer:&__rollout_var_bounds ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"placeholderRectForBounds:" forClass:@"SAHighlightedTextField"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SAHighlightedTextField_placeholderRectForBounds__Instance(rcv, _cmd, __rollout_var_bounds);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              {struct CGRect record = _rollout_storage_SAHighlightedTextField_placeholderRectForBounds__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer);
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithRecordPointer:&record ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO];}
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              {struct CGRect record = _rollout_storage_SAHighlightedTextField_placeholderRectForBounds__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer);
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithRecordPointer:&record ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO];};
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return *((struct CGRect *)__rollout_r.recordPointer);
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"placeholderRectForBounds:" forClass:@"SAHighlightedTextField"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SAHighlightedTextField"), @selector(placeholderRectForBounds:),(IMP) _rollout_impl_SAHighlightedTextField_placeholderRectForBounds__Instance, (IMP*)&_rollout_storage_SAHighlightedTextField_placeholderRectForBounds__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"placeholderRectForBounds:" forClass:@"SAHighlightedTextField"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static struct CGRect  _rollout_impl_SAHighlightedTextField_editingRectForBounds__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_bounds);
static struct CGRect (*_rollout_storage_SAHighlightedTextField_editingRectForBounds__Instance)(id rcv, SEL _cmd, struct CGRect __rollout_var_bounds);
struct CGRect  _rollout_impl_SAHighlightedTextField_editingRectForBounds__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_bounds){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithRecordPointer:&__rollout_var_bounds ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"editingRectForBounds:" forClass:@"SAHighlightedTextField"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SAHighlightedTextField_editingRectForBounds__Instance(rcv, _cmd, __rollout_var_bounds);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              {struct CGRect record = _rollout_storage_SAHighlightedTextField_editingRectForBounds__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer);
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithRecordPointer:&record ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO];}
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              {struct CGRect record = _rollout_storage_SAHighlightedTextField_editingRectForBounds__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer);
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithRecordPointer:&record ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO];};
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return *((struct CGRect *)__rollout_r.recordPointer);
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"editingRectForBounds:" forClass:@"SAHighlightedTextField"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SAHighlightedTextField"), @selector(editingRectForBounds:),(IMP) _rollout_impl_SAHighlightedTextField_editingRectForBounds__Instance, (IMP*)&_rollout_storage_SAHighlightedTextField_editingRectForBounds__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"editingRectForBounds:" forClass:@"SAHighlightedTextField"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static struct CGRect  _rollout_impl_SAHighlightedTextField_textRectForBounds__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_bounds);
static struct CGRect (*_rollout_storage_SAHighlightedTextField_textRectForBounds__Instance)(id rcv, SEL _cmd, struct CGRect __rollout_var_bounds);
struct CGRect  _rollout_impl_SAHighlightedTextField_textRectForBounds__Instance(id rcv, SEL _cmd, struct CGRect __rollout_var_bounds){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithRecordPointer:&__rollout_var_bounds ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"textRectForBounds:" forClass:@"SAHighlightedTextField"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_SAHighlightedTextField_textRectForBounds__Instance(rcv, _cmd, __rollout_var_bounds);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              {struct CGRect record = _rollout_storage_SAHighlightedTextField_textRectForBounds__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer);
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithRecordPointer:&record ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO];}
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              {struct CGRect record = _rollout_storage_SAHighlightedTextField_textRectForBounds__Instance(rcv, _cmd, *(struct CGRect*)((RolloutTypeWrapper*)arguments[0]).recordPointer);
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithRecordPointer:&record ofSize:sizeof(struct CGRect) shouldBeFreedInDealloc:NO];};
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return *((struct CGRect *)__rollout_r.recordPointer);
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"textRectForBounds:" forClass:@"SAHighlightedTextField"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"SAHighlightedTextField"), @selector(textRectForBounds:),(IMP) _rollout_impl_SAHighlightedTextField_textRectForBounds__Instance, (IMP*)&_rollout_storage_SAHighlightedTextField_textRectForBounds__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"textRectForBounds:" forClass:@"SAHighlightedTextField"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_DBPrivateHelperCell_identifier_Class(id rcv, SEL _cmd);
static id (*_rollout_storage_DBPrivateHelperCell_identifier_Class)(id rcv, SEL _cmd);
id  _rollout_impl_DBPrivateHelperCell_identifier_Class(id rcv, SEL _cmd){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"identifier" forClass:@"DBPrivateHelperCell"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DBPrivateHelperCell_identifier_Class(rcv, _cmd);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DBPrivateHelperCell_identifier_Class(rcv, _cmd)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DBPrivateHelperCell_identifier_Class(rcv, _cmd)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"identifier" forClass:@"DBPrivateHelperCell"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"DBPrivateHelperCell"), @selector(identifier),(IMP) _rollout_impl_DBPrivateHelperCell_identifier_Class, (IMP*)&_rollout_storage_DBPrivateHelperCell_identifier_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"identifier" forClass:@"DBPrivateHelperCell"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static id  _rollout_impl_DBPrivateHelperCell_initWithStyle_reuseIdentifier__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_style, id __rollout_var_reuseIdentifier);
static id (*_rollout_storage_DBPrivateHelperCell_initWithStyle_reuseIdentifier__Instance)(id rcv, SEL _cmd, __rollout_enum __rollout_var_style, id __rollout_var_reuseIdentifier);
id  _rollout_impl_DBPrivateHelperCell_initWithStyle_reuseIdentifier__Instance(id rcv, SEL _cmd, __rollout_enum __rollout_var_style, id __rollout_var_reuseIdentifier){
    RolloutTypeWrapper *__rollout_r;
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithEnum:__rollout_var_style], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_reuseIdentifier], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"initWithStyle:reuseIdentifier:" forClass:@"DBPrivateHelperCell"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       return _rollout_storage_DBPrivateHelperCell_initWithStyle_reuseIdentifier__Instance(rcv, _cmd, __rollout_var_style, __rollout_var_reuseIdentifier);
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            __rollout_r =         [inv disableReturnValue];
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DBPrivateHelperCell_initWithStyle_reuseIdentifier__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
              __rollout_r =   [inv conditionalReturnValue];
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                __rollout_r = [inv tryCatchReturnValue];
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:_rollout_storage_DBPrivateHelperCell_initWithStyle_reuseIdentifier__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).enumValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
              __rollout_r =   [inv conditionalReturnValue];
            break;
    }
    return __rollout_r.objCObjectPointerValue;
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"initWithStyle:reuseIdentifier:" forClass:@"DBPrivateHelperCell"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperCell"), @selector(initWithStyle:reuseIdentifier:),(IMP) _rollout_impl_DBPrivateHelperCell_initWithStyle_reuseIdentifier__Instance, (IMP*)&_rollout_storage_DBPrivateHelperCell_initWithStyle_reuseIdentifier__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"initWithStyle:reuseIdentifier:" forClass:@"DBPrivateHelperCell"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_DBPrivateHelperCell_setIcon_text_row__Instance(id rcv, SEL _cmd, id __rollout_var_icon, id __rollout_var_text, int __rollout_var_row);
static void (*_rollout_storage_DBPrivateHelperCell_setIcon_text_row__Instance)(id rcv, SEL _cmd, id __rollout_var_icon, id __rollout_var_text, int __rollout_var_row);
void  _rollout_impl_DBPrivateHelperCell_setIcon_text_row__Instance(id rcv, SEL _cmd, id __rollout_var_icon, id __rollout_var_text, int __rollout_var_row){
    
    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_icon], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:__rollout_var_text], 
     [[RolloutTypeWrapper alloc] initWithInt:__rollout_var_row], 
];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForInstanceMethod:@"setIcon:text:row:" forClass:@"DBPrivateHelperCell"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_DBPrivateHelperCell_setIcon_text_row__Instance(rcv, _cmd, __rollout_var_icon, __rollout_var_text, __rollout_var_row); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    NSArray *arguments = inv.tweakedArguments;

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_DBPrivateHelperCell_setIcon_text_row__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).intValue);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_DBPrivateHelperCell_setIcon_text_row__Instance(rcv, _cmd, ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).intValue);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupInstanceSwizzle:@"setIcon:text:row:" forClass:@"DBPrivateHelperCell"]){
  rollout_swizzleInstanceMethodAndStore(NSClassFromString(@"DBPrivateHelperCell"), @selector(setIcon:text:row:),(IMP) _rollout_impl_DBPrivateHelperCell_setIcon_text_row__Instance, (IMP*)&_rollout_storage_DBPrivateHelperCell_setIcon_text_row__Instance);
  [RolloutInvocationsListFactory markInstanceSwizzle:@"setIcon:text:row:" forClass:@"DBPrivateHelperCell"];
}
#endif

#ifdef ROLLOUT_SWIZZLE_DEFINITION_AREA
static void  _rollout_impl_RolloutDynamic_onApplicationStarts_Class(id rcv, SEL _cmd);
static void (*_rollout_storage_RolloutDynamic_onApplicationStarts_Class)(id rcv, SEL _cmd);
void  _rollout_impl_RolloutDynamic_onApplicationStarts_Class(id rcv, SEL _cmd){
    
    NSArray *originalArguments = @[];
    RolloutInvocationsList *invocationsList = [RolloutInvocationsListFactory invocationsListForClassMethod:@"onApplicationStarts" forClass:@"RolloutDynamic"];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];

    if(!inv) {
       _rollout_storage_RolloutDynamic_onApplicationStarts_Class(rcv, _cmd); return;
    }

    [inv runBefore];

    inv.originalArguments = originalArguments;
    

    switch ([inv type]) {
        case RolloutInvocationTypeDisable:
            
            break;
        case RolloutInvocationTypeTryCatch:
            @try{
              _rollout_storage_RolloutDynamic_onApplicationStarts_Class(rcv, _cmd);
              
            }
            @catch(id e){
                [inv runAfterExceptionCaught];
                
            }
            break;
        case RolloutInvocationTypeNormal:
        default:
              _rollout_storage_RolloutDynamic_onApplicationStarts_Class(rcv, _cmd);;
              
            break;
    }
    
}
#endif
#ifdef ROLLOUT_SWIZZLE_ACT_AREA
if ([RolloutInvocationsListFactory shouldSetupClassSwizzle:@"onApplicationStarts" forClass:@"RolloutDynamic"]){
  rollout_swizzleClassMethodAndStore(NSClassFromString(@"RolloutDynamic"), @selector(onApplicationStarts),(IMP) _rollout_impl_RolloutDynamic_onApplicationStarts_Class, (IMP*)&_rollout_storage_RolloutDynamic_onApplicationStarts_Class);
  [RolloutInvocationsListFactory markClassSwizzle:@"onApplicationStarts" forClass:@"RolloutDynamic"];
}
#endif
